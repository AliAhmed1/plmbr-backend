"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateProviderNotificationInputSchema = exports.modelProviderNotificationConditionInputSchema = exports.modelNotificationStatusInputSchema = exports.createProviderNotificationInputSchema = exports.deleteUserBookmarkInputSchema = exports.updateUserBookmarkInputSchema = exports.modelUserBookmarkConditionInputSchema = exports.createUserBookmarkInputSchema = exports.deleteProviderBookmarkInputSchema = exports.updateProviderBookmarkInputSchema = exports.modelProviderBookmarkConditionInputSchema = exports.createProviderBookmarkInputSchema = exports.deleteUserInvoiceInputSchema = exports.updateUserInvoiceInputSchema = exports.modelUserInvoiceConditionInputSchema = exports.modelInvoiceStatusInputSchema = exports.createUserInvoiceInputSchema = exports.deleteUserReportInputSchema = exports.updateUserReportInputSchema = exports.modelUserReportConditionInputSchema = exports.createUserReportInputSchema = exports.deleteProviderReportInputSchema = exports.updateProviderReportInputSchema = exports.modelProviderReportConditionInputSchema = exports.modelStringInputSchema = exports.createProviderReportInputSchema = exports.deleteServicePromotionInputSchema = exports.updateServicePromotionInputSchema = exports.providerHistorySchema = exports.verificationStatusSchema = exports.notificationStatusSchema = exports.cardTypeSchema = exports.invoiceStatusSchema = exports.pLMBRSubscriptionSchema = exports.feedbackSchema = exports.transactionTypeSchema = exports.messageStatusSchema = exports.bookingStatusSchema = exports.jobStatusSchema = exports.messageSchema = exports.locationSchema = exports.notificationPreferenceSchema = exports.accountTypeSchema = exports.genderSchema = exports.modelIDInputSchema = exports.modelBooleanInputSchema = exports.modelFloatInputSchema = exports.modelSizeInputSchema = exports.modelAttributeTypesSchema = exports.createServicePromotionInputSchema = void 0;
exports.deleteFavoriteProviderInputSchema = exports.updateFavoriteProviderInputSchema = exports.modelFavoriteProviderConditionInputSchema = exports.createFavoriteProviderInputSchema = exports.deleteExpenseInputSchema = exports.updateExpenseInputSchema = exports.modelExpenseConditionInputSchema = exports.createExpenseInputSchema = exports.deleteCustomizationInputSchema = exports.updateCustomizationInputSchema = exports.modelCustomizationConditionInputSchema = exports.createCustomizationInputSchema = exports.deleteAIDiagnosticsInputSchema = exports.updateAIDiagnosticsInputSchema = exports.modelAIDiagnosticsConditionInputSchema = exports.createAIDiagnosticsInputSchema = exports.deleteServiceReviewInputSchema = exports.updateServiceReviewInputSchema = exports.modelServiceReviewConditionInputSchema = exports.modelIntInputSchema = exports.createServiceReviewInputSchema = exports.deleteServiceImageInputSchema = exports.updateServiceImageInputSchema = exports.modelServiceImageConditionInputSchema = exports.createServiceImageInputSchema = exports.deleteServiceVideoInputSchema = exports.updateServiceVideoInputSchema = exports.modelServiceVideoConditionInputSchema = exports.createServiceVideoInputSchema = exports.deleteProviderCertificationInputSchema = exports.updateProviderCertificationInputSchema = exports.modelProviderCertificationConditionInputSchema = exports.createProviderCertificationInputSchema = exports.deleteUserPreferenceInputSchema = exports.updateUserPreferenceInputSchema = exports.modelUserPreferenceConditionInputSchema = exports.createUserPreferenceInputSchema = exports.deleteProviderAvailabilityInputSchema = exports.updateProviderAvailabilityInputSchema = exports.modelProviderAvailabilityConditionInputSchema = exports.createProviderAvailabilityInputSchema = exports.deleteServiceDiscountInputSchema = exports.updateServiceDiscountInputSchema = exports.modelServiceDiscountConditionInputSchema = exports.createServiceDiscountInputSchema = exports.deleteUserNotificationInputSchema = exports.updateUserNotificationInputSchema = exports.modelUserNotificationConditionInputSchema = exports.createUserNotificationInputSchema = exports.deleteProviderNotificationInputSchema = void 0;
exports.deleteVerificationInputSchema = exports.updateVerificationInputSchema = exports.modelVerificationConditionInputSchema = exports.modelVerificationStatusInputSchema = exports.createVerificationInputSchema = exports.deleteLoyaltyProgramInputSchema = exports.updateLoyaltyProgramInputSchema = exports.modelLoyaltyProgramConditionInputSchema = exports.createLoyaltyProgramInputSchema = exports.deleteRewardInputSchema = exports.updateRewardInputSchema = exports.modelRewardConditionInputSchema = exports.createRewardInputSchema = exports.deleteServicePackageInputSchema = exports.updateServicePackageInputSchema = exports.modelServicePackageConditionInputSchema = exports.createServicePackageInputSchema = exports.deleteNicheServiceInputSchema = exports.updateNicheServiceInputSchema = exports.modelNicheServiceConditionInputSchema = exports.createNicheServiceInputSchema = exports.deleteContractInputSchema = exports.updateContractInputSchema = exports.modelContractConditionInputSchema = exports.createContractInputSchema = exports.deleteInvoiceInputSchema = exports.updateInvoiceInputSchema = exports.modelInvoiceConditionInputSchema = exports.createInvoiceInputSchema = exports.deletePaymentMethodInputSchema = exports.updatePaymentMethodInputSchema = exports.modelPaymentMethodConditionInputSchema = exports.modelCardTypeInputSchema = exports.createPaymentMethodInputSchema = exports.deleteTipInputSchema = exports.updateTipInputSchema = exports.modelTipConditionInputSchema = exports.createTipInputSchema = exports.deleteReferralInputSchema = exports.updateReferralInputSchema = exports.modelReferralConditionInputSchema = exports.createReferralInputSchema = exports.deleteProviderAwardInputSchema = exports.updateProviderAwardInputSchema = exports.modelProviderAwardConditionInputSchema = exports.createProviderAwardInputSchema = exports.deleteUserHistoryInputSchema = exports.updateUserHistoryInputSchema = exports.modelUserHistoryConditionInputSchema = exports.createUserHistoryInputSchema = void 0;
exports.createPortfolioInputSchema = exports.deleteProviderSettingsInputSchema = exports.updateProviderSettingsInputSchema = exports.providerSettingsSchema = exports.modelProviderSettingsConditionInputSchema = exports.createProviderSettingsInputSchema = exports.deleteUserSettingsInputSchema = exports.updateUserSettingsInputSchema = exports.userSettingsSchema = exports.modelUserSettingsConditionInputSchema = exports.createUserSettingsInputSchema = exports.deletePLMBRSubscriptionInputSchema = exports.updatePLMBRSubscriptionInputSchema = exports.modelPLMBRSubscriptionConditionInputSchema = exports.createPLMBRSubscriptionInputSchema = exports.deleteSubCategoryInputSchema = exports.updateSubCategoryInputSchema = exports.modelSubCategoryConditionInputSchema = exports.createSubCategoryInputSchema = exports.deleteMainCategoryInputSchema = exports.updateMainCategoryInputSchema = exports.modelMainCategoryConditionInputSchema = exports.createMainCategoryInputSchema = exports.deleteAIChatBotInputSchema = exports.updateAIChatBotInputSchema = exports.modelAIChatBotConditionInputSchema = exports.createAIChatBotInputSchema = exports.deleteAIChatLogInputSchema = exports.updateAIChatLogInputSchema = exports.modelAIChatLogConditionInputSchema = exports.createAIChatLogInputSchema = exports.deleteJobTrackingInputSchema = exports.updateJobTrackingInputSchema = exports.modelJobTrackingConditionInputSchema = exports.modelJobStatusInputSchema = exports.createJobTrackingInputSchema = exports.deleteReportInputSchema = exports.updateReportInputSchema = exports.modelReportConditionInputSchema = exports.createReportInputSchema = exports.deletePromoCodeInputSchema = exports.updatePromoCodeInputSchema = exports.promoCodeSchema = exports.modelPromoCodeConditionInputSchema = exports.createPromoCodeInputSchema = exports.deleteAnalyticsInputSchema = exports.updateAnalyticsInputSchema = exports.analyticsSchema = exports.modelAnalyticsConditionInputSchema = exports.createAnalyticsInputSchema = void 0;
exports.createReviewResponseInputSchema = exports.deleteReviewInputSchema = exports.updateReviewInputSchema = exports.modelReviewConditionInputSchema = exports.createReviewInputSchema = exports.deleteTransactionInputSchema = exports.updateTransactionInputSchema = exports.modelTransactionConditionInputSchema = exports.modelTransactionTypeInputSchema = exports.createTransactionInputSchema = exports.deleteWalletInputSchema = exports.updateWalletInputSchema = exports.modelWalletConditionInputSchema = exports.createWalletInputSchema = exports.deleteEquipmentInputSchema = exports.updateEquipmentInputSchema = exports.equipmentSchema = exports.modelEquipmentConditionInputSchema = exports.modelEquipmentAvailabilityStatusInputSchema = exports.modelEquipmentCategoryInputSchema = exports.equipmentAvailabilityStatusSchema = exports.equipmentCategorySchema = exports.deleteFeedbackInputSchema = exports.updateFeedbackInputSchema = exports.modelFeedbackConditionInputSchema = exports.createFeedbackInputSchema = exports.deleteServiceFAQInputSchema = exports.updateServiceFAQInputSchema = exports.serviceFAQSchema = exports.modelServiceFAQConditionInputSchema = exports.createServiceFAQInputSchema = exports.deleteServiceTagInputSchema = exports.updateServiceTagInputSchema = exports.serviceTagSchema = exports.modelServiceTagConditionInputSchema = exports.createServiceTagInputSchema = exports.deleteServiceHighlightInputSchema = exports.updateServiceHighlightInputSchema = exports.serviceHighlightSchema = exports.modelServiceHighlightConditionInputSchema = exports.createServiceHighlightInputSchema = exports.deleteServiceVariantInputSchema = exports.updateServiceVariantInputSchema = exports.serviceVariantSchema = exports.modelServiceVariantConditionInputSchema = exports.createServiceVariantInputSchema = exports.deletePortfolioInputSchema = exports.updatePortfolioInputSchema = exports.portfolioSchema = exports.modelPortfolioConditionInputSchema = void 0;
exports.modelProviderReviewConditionInputSchema = exports.createProviderReviewInputSchema = exports.deleteAvailabilityInputSchema = exports.updateAvailabilityInputSchema = exports.modelAvailabilityConditionInputSchema = exports.createAvailabilityInputSchema = exports.deleteProviderInputSchema = exports.updateProviderInputSchema = exports.modelProviderConditionInputSchema = exports.modelNotificationPreferenceInputSchema = exports.modelAccountTypeInputSchema = exports.modelGenderInputSchema = exports.createProviderInputSchema = exports.deleteServiceInputSchema = exports.updateServiceInputSchema = exports.modelServiceConditionInputSchema = exports.createServiceInputSchema = exports.deleteJobInputSchema = exports.updateJobInputSchema = exports.modelJobConditionInputSchema = exports.createJobInputSchema = exports.deleteMessageInputSchema = exports.updateMessageInputSchema = exports.modelMessageConditionInputSchema = exports.createMessageInputSchema = exports.deleteLocationInputSchema = exports.updateLocationInputSchema = exports.modelLocationConditionInputSchema = exports.createLocationInputSchema = exports.deleteTeamMemberInputSchema = exports.updateTeamMemberInputSchema = exports.modelTeamMemberConditionInputSchema = exports.createTeamMemberInputSchema = exports.deleteBookingInputSchema = exports.updateBookingInputSchema = exports.modelBookingConditionInputSchema = exports.modelBookingStatusInputSchema = exports.createBookingInputSchema = exports.deleteMessageContentInputSchema = exports.updateMessageContentInputSchema = exports.modelMessageContentConditionInputSchema = exports.createMessageContentInputSchema = exports.deleteMessageThreadInputSchema = exports.updateMessageThreadInputSchema = exports.modelMessageThreadConditionInputSchema = exports.modelMessageStatusInputSchema = exports.createMessageThreadInputSchema = exports.deleteReviewResponseInputSchema = exports.updateReviewResponseInputSchema = exports.modelReviewResponseConditionInputSchema = void 0;
exports.modelNicheServiceFilterInputSchema = exports.modelContractFilterInputSchema = exports.modelInvoiceFilterInputSchema = exports.modelPaymentMethodFilterInputSchema = exports.modelTipFilterInputSchema = exports.modelReferralFilterInputSchema = exports.modelProviderAwardFilterInputSchema = exports.modelUserHistoryFilterInputSchema = exports.modelFavoriteProviderFilterInputSchema = exports.modelExpenseFilterInputSchema = exports.modelCustomizationFilterInputSchema = exports.modelAIDiagnosticsFilterInputSchema = exports.modelServiceReviewFilterInputSchema = exports.modelServiceImageFilterInputSchema = exports.modelServiceVideoFilterInputSchema = exports.modelProviderCertificationFilterInputSchema = exports.modelUserPreferenceFilterInputSchema = exports.modelProviderAvailabilityFilterInputSchema = exports.modelServiceDiscountFilterInputSchema = exports.modelUserNotificationFilterInputSchema = exports.modelProviderNotificationFilterInputSchema = exports.modelUserBookmarkFilterInputSchema = exports.modelProviderBookmarkFilterInputSchema = exports.modelUserInvoiceFilterInputSchema = exports.modelUserReportFilterInputSchema = exports.modelProviderReportFilterInputSchema = exports.modelServicePromotionFilterInputSchema = exports.deleteUserInputSchema = exports.updateUserInputSchema = exports.modelUserConditionInputSchema = exports.createUserInputSchema = exports.deleteProviderHistoryInputSchema = exports.updateProviderHistoryInputSchema = exports.modelProviderHistoryConditionInputSchema = exports.createProviderHistoryInputSchema = exports.deleteSpecializationInputSchema = exports.updateSpecializationInputSchema = exports.modelSpecializationConditionInputSchema = exports.createSpecializationInputSchema = exports.deleteQualificationInputSchema = exports.updateQualificationInputSchema = exports.modelQualificationConditionInputSchema = exports.createQualificationInputSchema = exports.deleteCertificationInputSchema = exports.updateCertificationInputSchema = exports.modelCertificationConditionInputSchema = exports.createCertificationInputSchema = exports.deleteProviderReviewInputSchema = exports.updateProviderReviewInputSchema = exports.providerReviewSchema = void 0;
exports.modelCertificationFilterInputSchema = exports.modelProviderReviewConnectionSchema = exports.modelProviderReviewFilterInputSchema = exports.modelAvailabilityFilterInputSchema = exports.modelProviderFilterInputSchema = exports.modelServiceFilterInputSchema = exports.modelJobFilterInputSchema = exports.modelMessageFilterInputSchema = exports.modelLocationConnectionSchema = exports.modelLocationFilterInputSchema = exports.modelTeamMemberFilterInputSchema = exports.modelBookingFilterInputSchema = exports.modelMessageContentFilterInputSchema = exports.modelMessageThreadFilterInputSchema = exports.modelReviewResponseFilterInputSchema = exports.modelReviewFilterInputSchema = exports.modelTransactionFilterInputSchema = exports.modelWalletFilterInputSchema = exports.modelEquipmentConnectionSchema = exports.modelEquipmentFilterInputSchema = exports.modelFeedbackFilterInputSchema = exports.modelServiceFAQConnectionSchema = exports.modelServiceFAQFilterInputSchema = exports.modelServiceTagConnectionSchema = exports.modelServiceTagFilterInputSchema = exports.modelServiceHighlightConnectionSchema = exports.modelServiceHighlightFilterInputSchema = exports.modelServiceVariantConnectionSchema = exports.modelServiceVariantFilterInputSchema = exports.modelPortfolioConnectionSchema = exports.modelPortfolioFilterInputSchema = exports.modelProviderSettingsConnectionSchema = exports.modelProviderSettingsFilterInputSchema = exports.modelUserSettingsConnectionSchema = exports.modelUserSettingsFilterInputSchema = exports.modelPLMBRSubscriptionFilterInputSchema = exports.modelSubCategoryFilterInputSchema = exports.modelMainCategoryFilterInputSchema = exports.modelAIChatBotFilterInputSchema = exports.modelAIChatLogFilterInputSchema = exports.modelJobTrackingFilterInputSchema = exports.modelReportFilterInputSchema = exports.modelPromoCodeConnectionSchema = exports.modelPromoCodeFilterInputSchema = exports.modelAnalyticsConnectionSchema = exports.modelAnalyticsFilterInputSchema = exports.modelVerificationFilterInputSchema = exports.modelLoyaltyProgramFilterInputSchema = exports.modelRewardFilterInputSchema = exports.modelServicePackageFilterInputSchema = void 0;
exports.modelSubscriptionUserSettingsFilterInputSchema = exports.modelSubscriptionPLMBRSubscriptionFilterInputSchema = exports.modelSubscriptionSubCategoryFilterInputSchema = exports.modelSubscriptionMainCategoryFilterInputSchema = exports.modelSubscriptionAIChatBotFilterInputSchema = exports.modelSubscriptionAIChatLogFilterInputSchema = exports.modelSubscriptionJobTrackingFilterInputSchema = exports.modelSubscriptionReportFilterInputSchema = exports.modelSubscriptionPromoCodeFilterInputSchema = exports.modelSubscriptionAnalyticsFilterInputSchema = exports.modelSubscriptionVerificationFilterInputSchema = exports.modelSubscriptionLoyaltyProgramFilterInputSchema = exports.modelSubscriptionRewardFilterInputSchema = exports.modelSubscriptionServicePackageFilterInputSchema = exports.modelSubscriptionNicheServiceFilterInputSchema = exports.modelSubscriptionContractFilterInputSchema = exports.modelSubscriptionInvoiceFilterInputSchema = exports.modelSubscriptionPaymentMethodFilterInputSchema = exports.modelSubscriptionTipFilterInputSchema = exports.modelSubscriptionReferralFilterInputSchema = exports.modelSubscriptionProviderAwardFilterInputSchema = exports.modelSubscriptionUserHistoryFilterInputSchema = exports.modelSubscriptionFavoriteProviderFilterInputSchema = exports.modelSubscriptionExpenseFilterInputSchema = exports.modelSubscriptionCustomizationFilterInputSchema = exports.modelSubscriptionAIDiagnosticsFilterInputSchema = exports.modelSubscriptionServiceReviewFilterInputSchema = exports.modelSubscriptionIntInputSchema = exports.modelSubscriptionServiceImageFilterInputSchema = exports.modelSubscriptionServiceVideoFilterInputSchema = exports.modelSubscriptionProviderCertificationFilterInputSchema = exports.modelSubscriptionUserPreferenceFilterInputSchema = exports.modelSubscriptionProviderAvailabilityFilterInputSchema = exports.modelSubscriptionBooleanInputSchema = exports.modelSubscriptionServiceDiscountFilterInputSchema = exports.modelSubscriptionUserNotificationFilterInputSchema = exports.modelSubscriptionProviderNotificationFilterInputSchema = exports.modelSubscriptionUserBookmarkFilterInputSchema = exports.modelSubscriptionProviderBookmarkFilterInputSchema = exports.modelSubscriptionUserInvoiceFilterInputSchema = exports.modelSubscriptionUserReportFilterInputSchema = exports.modelSubscriptionProviderReportFilterInputSchema = exports.modelSubscriptionServicePromotionFilterInputSchema = exports.modelSubscriptionFloatInputSchema = exports.modelSubscriptionStringInputSchema = exports.modelSubscriptionIDInputSchema = exports.modelUserFilterInputSchema = exports.modelProviderHistoryFilterInputSchema = exports.modelSpecializationFilterInputSchema = exports.modelQualificationFilterInputSchema = void 0;
exports.updateUserInvoiceMutationSchema = exports.updateUserInvoiceMutationVariablesSchema = exports.createUserInvoiceMutationSchema = exports.createUserInvoiceMutationVariablesSchema = exports.deleteUserReportMutationSchema = exports.deleteUserReportMutationVariablesSchema = exports.updateUserReportMutationSchema = exports.updateUserReportMutationVariablesSchema = exports.createUserReportMutationSchema = exports.createUserReportMutationVariablesSchema = exports.deleteProviderReportMutationSchema = exports.deleteProviderReportMutationVariablesSchema = exports.updateProviderReportMutationSchema = exports.updateProviderReportMutationVariablesSchema = exports.createProviderReportMutationSchema = exports.createProviderReportMutationVariablesSchema = exports.deleteServicePromotionMutationSchema = exports.deleteServicePromotionMutationVariablesSchema = exports.updateServicePromotionMutationSchema = exports.updateServicePromotionMutationVariablesSchema = exports.createServicePromotionMutationSchema = exports.modelServicePromotionConditionInputSchema = exports.modelSubscriptionUserFilterInputSchema = exports.modelSubscriptionProviderHistoryFilterInputSchema = exports.modelSubscriptionSpecializationFilterInputSchema = exports.modelSubscriptionQualificationFilterInputSchema = exports.modelSubscriptionCertificationFilterInputSchema = exports.modelSubscriptionProviderReviewFilterInputSchema = exports.modelSubscriptionAvailabilityFilterInputSchema = exports.modelSubscriptionProviderFilterInputSchema = exports.modelSubscriptionServiceFilterInputSchema = exports.modelSubscriptionJobFilterInputSchema = exports.modelSubscriptionMessageFilterInputSchema = exports.modelSubscriptionLocationFilterInputSchema = exports.modelSubscriptionTeamMemberFilterInputSchema = exports.modelSubscriptionBookingFilterInputSchema = exports.modelSubscriptionMessageContentFilterInputSchema = exports.modelSubscriptionMessageThreadFilterInputSchema = exports.modelSubscriptionReviewResponseFilterInputSchema = exports.modelSubscriptionReviewFilterInputSchema = exports.modelSubscriptionTransactionFilterInputSchema = exports.modelSubscriptionWalletFilterInputSchema = exports.modelSubscriptionEquipmentFilterInputSchema = exports.modelSubscriptionFeedbackFilterInputSchema = exports.modelSubscriptionServiceFAQFilterInputSchema = exports.modelSubscriptionServiceTagFilterInputSchema = exports.modelSubscriptionServiceHighlightFilterInputSchema = exports.modelSubscriptionServiceVariantFilterInputSchema = exports.modelSubscriptionPortfolioFilterInputSchema = exports.modelSubscriptionProviderSettingsFilterInputSchema = void 0;
exports.deleteProviderCertificationMutationSchema = exports.deleteProviderCertificationMutationVariablesSchema = exports.updateProviderCertificationMutationSchema = exports.updateProviderCertificationMutationVariablesSchema = exports.createProviderCertificationMutationSchema = exports.createProviderCertificationMutationVariablesSchema = exports.deleteUserPreferenceMutationSchema = exports.deleteUserPreferenceMutationVariablesSchema = exports.updateUserPreferenceMutationSchema = exports.updateUserPreferenceMutationVariablesSchema = exports.createUserPreferenceMutationSchema = exports.createUserPreferenceMutationVariablesSchema = exports.deleteProviderAvailabilityMutationSchema = exports.deleteProviderAvailabilityMutationVariablesSchema = exports.updateProviderAvailabilityMutationSchema = exports.updateProviderAvailabilityMutationVariablesSchema = exports.createProviderAvailabilityMutationSchema = exports.createProviderAvailabilityMutationVariablesSchema = exports.deleteServiceDiscountMutationSchema = exports.deleteServiceDiscountMutationVariablesSchema = exports.updateServiceDiscountMutationSchema = exports.updateServiceDiscountMutationVariablesSchema = exports.createServiceDiscountMutationSchema = exports.createServiceDiscountMutationVariablesSchema = exports.deleteUserNotificationMutationSchema = exports.deleteUserNotificationMutationVariablesSchema = exports.updateUserNotificationMutationSchema = exports.updateUserNotificationMutationVariablesSchema = exports.createUserNotificationMutationSchema = exports.createUserNotificationMutationVariablesSchema = exports.deleteProviderNotificationMutationSchema = exports.deleteProviderNotificationMutationVariablesSchema = exports.updateProviderNotificationMutationSchema = exports.updateProviderNotificationMutationVariablesSchema = exports.createProviderNotificationMutationSchema = exports.createProviderNotificationMutationVariablesSchema = exports.deleteUserBookmarkMutationSchema = exports.deleteUserBookmarkMutationVariablesSchema = exports.updateUserBookmarkMutationSchema = exports.updateUserBookmarkMutationVariablesSchema = exports.createUserBookmarkMutationSchema = exports.createUserBookmarkMutationVariablesSchema = exports.deleteProviderBookmarkMutationSchema = exports.deleteProviderBookmarkMutationVariablesSchema = exports.updateProviderBookmarkMutationSchema = exports.updateProviderBookmarkMutationVariablesSchema = exports.createProviderBookmarkMutationSchema = exports.createProviderBookmarkMutationVariablesSchema = exports.deleteUserInvoiceMutationSchema = exports.deleteUserInvoiceMutationVariablesSchema = void 0;
exports.createProviderAwardMutationSchema = exports.createProviderAwardMutationVariablesSchema = exports.deleteUserHistoryMutationSchema = exports.deleteUserHistoryMutationVariablesSchema = exports.updateUserHistoryMutationSchema = exports.updateUserHistoryMutationVariablesSchema = exports.createUserHistoryMutationSchema = exports.createUserHistoryMutationVariablesSchema = exports.deleteFavoriteProviderMutationSchema = exports.deleteFavoriteProviderMutationVariablesSchema = exports.updateFavoriteProviderMutationSchema = exports.updateFavoriteProviderMutationVariablesSchema = exports.createFavoriteProviderMutationSchema = exports.createFavoriteProviderMutationVariablesSchema = exports.deleteExpenseMutationSchema = exports.deleteExpenseMutationVariablesSchema = exports.updateExpenseMutationSchema = exports.updateExpenseMutationVariablesSchema = exports.createExpenseMutationSchema = exports.createExpenseMutationVariablesSchema = exports.deleteCustomizationMutationSchema = exports.deleteCustomizationMutationVariablesSchema = exports.updateCustomizationMutationSchema = exports.updateCustomizationMutationVariablesSchema = exports.createCustomizationMutationSchema = exports.createCustomizationMutationVariablesSchema = exports.deleteAIDiagnosticsMutationSchema = exports.deleteAIDiagnosticsMutationVariablesSchema = exports.updateAIDiagnosticsMutationSchema = exports.updateAIDiagnosticsMutationVariablesSchema = exports.createAIDiagnosticsMutationSchema = exports.createAIDiagnosticsMutationVariablesSchema = exports.deleteServiceReviewMutationSchema = exports.deleteServiceReviewMutationVariablesSchema = exports.updateServiceReviewMutationSchema = exports.updateServiceReviewMutationVariablesSchema = exports.createServiceReviewMutationSchema = exports.createServiceReviewMutationVariablesSchema = exports.deleteServiceImageMutationSchema = exports.deleteServiceImageMutationVariablesSchema = exports.updateServiceImageMutationSchema = exports.updateServiceImageMutationVariablesSchema = exports.createServiceImageMutationSchema = exports.createServiceImageMutationVariablesSchema = exports.deleteServiceVideoMutationSchema = exports.deleteServiceVideoMutationVariablesSchema = exports.updateServiceVideoMutationSchema = exports.updateServiceVideoMutationVariablesSchema = exports.createServiceVideoMutationSchema = exports.createServiceVideoMutationVariablesSchema = void 0;
exports.updateRewardMutationSchema = exports.updateRewardMutationVariablesSchema = exports.createRewardMutationSchema = exports.createRewardMutationVariablesSchema = exports.deleteServicePackageMutationSchema = exports.deleteServicePackageMutationVariablesSchema = exports.updateServicePackageMutationSchema = exports.updateServicePackageMutationVariablesSchema = exports.createServicePackageMutationSchema = exports.createServicePackageMutationVariablesSchema = exports.deleteNicheServiceMutationSchema = exports.deleteNicheServiceMutationVariablesSchema = exports.updateNicheServiceMutationSchema = exports.updateNicheServiceMutationVariablesSchema = exports.createNicheServiceMutationSchema = exports.createNicheServiceMutationVariablesSchema = exports.deleteContractMutationSchema = exports.deleteContractMutationVariablesSchema = exports.updateContractMutationSchema = exports.updateContractMutationVariablesSchema = exports.createContractMutationSchema = exports.createContractMutationVariablesSchema = exports.deleteInvoiceMutationSchema = exports.deleteInvoiceMutationVariablesSchema = exports.updateInvoiceMutationSchema = exports.updateInvoiceMutationVariablesSchema = exports.createInvoiceMutationSchema = exports.createInvoiceMutationVariablesSchema = exports.deletePaymentMethodMutationSchema = exports.deletePaymentMethodMutationVariablesSchema = exports.updatePaymentMethodMutationSchema = exports.updatePaymentMethodMutationVariablesSchema = exports.createPaymentMethodMutationSchema = exports.createPaymentMethodMutationVariablesSchema = exports.deleteTipMutationSchema = exports.deleteTipMutationVariablesSchema = exports.updateTipMutationSchema = exports.updateTipMutationVariablesSchema = exports.createTipMutationSchema = exports.createTipMutationVariablesSchema = exports.deleteReferralMutationSchema = exports.deleteReferralMutationVariablesSchema = exports.updateReferralMutationSchema = exports.updateReferralMutationVariablesSchema = exports.createReferralMutationSchema = exports.createReferralMutationVariablesSchema = exports.deleteProviderAwardMutationSchema = exports.deleteProviderAwardMutationVariablesSchema = exports.updateProviderAwardMutationSchema = exports.updateProviderAwardMutationVariablesSchema = void 0;
exports.deleteAIChatBotMutationSchema = exports.deleteAIChatBotMutationVariablesSchema = exports.updateAIChatBotMutationSchema = exports.updateAIChatBotMutationVariablesSchema = exports.createAIChatBotMutationSchema = exports.createAIChatBotMutationVariablesSchema = exports.deleteAIChatLogMutationSchema = exports.deleteAIChatLogMutationVariablesSchema = exports.updateAIChatLogMutationSchema = exports.updateAIChatLogMutationVariablesSchema = exports.createAIChatLogMutationSchema = exports.createAIChatLogMutationVariablesSchema = exports.deleteJobTrackingMutationSchema = exports.deleteJobTrackingMutationVariablesSchema = exports.updateJobTrackingMutationSchema = exports.updateJobTrackingMutationVariablesSchema = exports.createJobTrackingMutationSchema = exports.createJobTrackingMutationVariablesSchema = exports.deleteReportMutationSchema = exports.deleteReportMutationVariablesSchema = exports.updateReportMutationSchema = exports.updateReportMutationVariablesSchema = exports.createReportMutationSchema = exports.createReportMutationVariablesSchema = exports.deletePromoCodeMutationSchema = exports.deletePromoCodeMutationVariablesSchema = exports.updatePromoCodeMutationSchema = exports.updatePromoCodeMutationVariablesSchema = exports.createPromoCodeMutationSchema = exports.createPromoCodeMutationVariablesSchema = exports.deleteAnalyticsMutationSchema = exports.deleteAnalyticsMutationVariablesSchema = exports.updateAnalyticsMutationSchema = exports.updateAnalyticsMutationVariablesSchema = exports.createAnalyticsMutationSchema = exports.createAnalyticsMutationVariablesSchema = exports.deleteVerificationMutationSchema = exports.deleteVerificationMutationVariablesSchema = exports.updateVerificationMutationSchema = exports.updateVerificationMutationVariablesSchema = exports.createVerificationMutationSchema = exports.createVerificationMutationVariablesSchema = exports.deleteLoyaltyProgramMutationSchema = exports.deleteLoyaltyProgramMutationVariablesSchema = exports.updateLoyaltyProgramMutationSchema = exports.updateLoyaltyProgramMutationVariablesSchema = exports.createLoyaltyProgramMutationSchema = exports.createLoyaltyProgramMutationVariablesSchema = exports.deleteRewardMutationSchema = exports.deleteRewardMutationVariablesSchema = void 0;
exports.createServiceTagMutationSchema = exports.createServiceTagMutationVariablesSchema = exports.deleteServiceHighlightMutationSchema = exports.deleteServiceHighlightMutationVariablesSchema = exports.updateServiceHighlightMutationSchema = exports.updateServiceHighlightMutationVariablesSchema = exports.createServiceHighlightMutationSchema = exports.createServiceHighlightMutationVariablesSchema = exports.deleteServiceVariantMutationSchema = exports.deleteServiceVariantMutationVariablesSchema = exports.updateServiceVariantMutationSchema = exports.updateServiceVariantMutationVariablesSchema = exports.createServiceVariantMutationSchema = exports.createServiceVariantMutationVariablesSchema = exports.deletePortfolioMutationSchema = exports.deletePortfolioMutationVariablesSchema = exports.updatePortfolioMutationSchema = exports.updatePortfolioMutationVariablesSchema = exports.createPortfolioMutationSchema = exports.createPortfolioMutationVariablesSchema = exports.deleteProviderSettingsMutationSchema = exports.deleteProviderSettingsMutationVariablesSchema = exports.updateProviderSettingsMutationSchema = exports.updateProviderSettingsMutationVariablesSchema = exports.createProviderSettingsMutationSchema = exports.createProviderSettingsMutationVariablesSchema = exports.deleteUserSettingsMutationSchema = exports.deleteUserSettingsMutationVariablesSchema = exports.updateUserSettingsMutationSchema = exports.updateUserSettingsMutationVariablesSchema = exports.createUserSettingsMutationSchema = exports.createUserSettingsMutationVariablesSchema = exports.deletePLMBRSubscriptionMutationSchema = exports.deletePLMBRSubscriptionMutationVariablesSchema = exports.updatePLMBRSubscriptionMutationSchema = exports.updatePLMBRSubscriptionMutationVariablesSchema = exports.createPLMBRSubscriptionMutationSchema = exports.createPLMBRSubscriptionMutationVariablesSchema = exports.deleteSubCategoryMutationSchema = exports.deleteSubCategoryMutationVariablesSchema = exports.updateSubCategoryMutationSchema = exports.updateSubCategoryMutationVariablesSchema = exports.createSubCategoryMutationSchema = exports.createSubCategoryMutationVariablesSchema = exports.deleteMainCategoryMutationSchema = exports.deleteMainCategoryMutationVariablesSchema = exports.updateMainCategoryMutationSchema = exports.updateMainCategoryMutationVariablesSchema = exports.createMainCategoryMutationSchema = exports.createMainCategoryMutationVariablesSchema = void 0;
exports.updateMessageThreadMutationSchema = exports.updateMessageThreadMutationVariablesSchema = exports.createMessageThreadMutationSchema = exports.createMessageThreadMutationVariablesSchema = exports.deleteReviewResponseMutationSchema = exports.deleteReviewResponseMutationVariablesSchema = exports.updateReviewResponseMutationSchema = exports.updateReviewResponseMutationVariablesSchema = exports.createReviewResponseMutationSchema = exports.createReviewResponseMutationVariablesSchema = exports.deleteReviewMutationSchema = exports.deleteReviewMutationVariablesSchema = exports.updateReviewMutationSchema = exports.updateReviewMutationVariablesSchema = exports.createReviewMutationSchema = exports.createReviewMutationVariablesSchema = exports.deleteTransactionMutationSchema = exports.deleteTransactionMutationVariablesSchema = exports.updateTransactionMutationSchema = exports.updateTransactionMutationVariablesSchema = exports.createTransactionMutationSchema = exports.createTransactionMutationVariablesSchema = exports.deleteWalletMutationSchema = exports.deleteWalletMutationVariablesSchema = exports.updateWalletMutationSchema = exports.updateWalletMutationVariablesSchema = exports.createWalletMutationSchema = exports.createWalletMutationVariablesSchema = exports.deleteEquipmentMutationSchema = exports.deleteEquipmentMutationVariablesSchema = exports.updateEquipmentMutationSchema = exports.updateEquipmentMutationVariablesSchema = exports.createEquipmentMutationSchema = exports.createEquipmentInputSchema = exports.deleteFeedbackMutationSchema = exports.deleteFeedbackMutationVariablesSchema = exports.updateFeedbackMutationSchema = exports.updateFeedbackMutationVariablesSchema = exports.createFeedbackMutationSchema = exports.createFeedbackMutationVariablesSchema = exports.deleteServiceFAQMutationSchema = exports.deleteServiceFAQMutationVariablesSchema = exports.updateServiceFAQMutationSchema = exports.updateServiceFAQMutationVariablesSchema = exports.createServiceFAQMutationSchema = exports.createServiceFAQMutationVariablesSchema = exports.deleteServiceTagMutationSchema = exports.deleteServiceTagMutationVariablesSchema = exports.updateServiceTagMutationSchema = exports.updateServiceTagMutationVariablesSchema = void 0;
exports.deleteProviderMutationSchema = exports.deleteProviderMutationVariablesSchema = exports.updateProviderMutationSchema = exports.updateProviderMutationVariablesSchema = exports.createProviderMutationSchema = exports.createProviderMutationVariablesSchema = exports.deleteServiceMutationSchema = exports.deleteServiceMutationVariablesSchema = exports.updateServiceMutationSchema = exports.updateServiceMutationVariablesSchema = exports.createServiceMutationSchema = exports.createServiceMutationVariablesSchema = exports.deleteJobMutationSchema = exports.deleteJobMutationVariablesSchema = exports.updateJobMutationSchema = exports.updateJobMutationVariablesSchema = exports.createJobMutationSchema = exports.createJobMutationVariablesSchema = exports.deleteMessageMutationSchema = exports.deleteMessageMutationVariablesSchema = exports.updateMessageMutationSchema = exports.updateMessageMutationVariablesSchema = exports.createMessageMutationSchema = exports.createMessageMutationVariablesSchema = exports.deleteLocationMutationSchema = exports.deleteLocationMutationVariablesSchema = exports.updateLocationMutationSchema = exports.updateLocationMutationVariablesSchema = exports.createLocationMutationSchema = exports.createLocationMutationVariablesSchema = exports.deleteTeamMemberMutationSchema = exports.deleteTeamMemberMutationVariablesSchema = exports.updateTeamMemberMutationSchema = exports.updateTeamMemberMutationVariablesSchema = exports.createTeamMemberMutationSchema = exports.createTeamMemberMutationVariablesSchema = exports.deleteBookingMutationSchema = exports.deleteBookingMutationVariablesSchema = exports.updateBookingMutationSchema = exports.updateBookingMutationVariablesSchema = exports.createBookingMutationSchema = exports.createBookingMutationVariablesSchema = exports.deleteMessageContentMutationSchema = exports.deleteMessageContentMutationVariablesSchema = exports.updateMessageContentMutationSchema = exports.updateMessageContentMutationVariablesSchema = exports.createMessageContentMutationSchema = exports.createMessageContentMutationVariablesSchema = exports.deleteMessageThreadMutationSchema = exports.deleteMessageThreadMutationVariablesSchema = void 0;
exports.getProviderReportQuerySchema = exports.getProviderReportQueryVariablesSchema = exports.syncServicePromotionsQuerySchema = exports.syncServicePromotionsQueryVariablesSchema = exports.listServicePromotionsQuerySchema = exports.listServicePromotionsQueryVariablesSchema = exports.getServicePromotionQuerySchema = exports.getServicePromotionQueryVariablesSchema = exports.deleteUserMutationSchema = exports.deleteUserMutationVariablesSchema = exports.updateUserMutationSchema = exports.updateUserMutationVariablesSchema = exports.createUserMutationSchema = exports.createUserMutationVariablesSchema = exports.deleteProviderHistoryMutationSchema = exports.deleteProviderHistoryMutationVariablesSchema = exports.updateProviderHistoryMutationSchema = exports.updateProviderHistoryMutationVariablesSchema = exports.createProviderHistoryMutationSchema = exports.createProviderHistoryMutationVariablesSchema = exports.deleteSpecializationMutationSchema = exports.deleteSpecializationMutationVariablesSchema = exports.updateSpecializationMutationSchema = exports.updateSpecializationMutationVariablesSchema = exports.createSpecializationMutationSchema = exports.createSpecializationMutationVariablesSchema = exports.deleteQualificationMutationSchema = exports.deleteQualificationMutationVariablesSchema = exports.updateQualificationMutationSchema = exports.updateQualificationMutationVariablesSchema = exports.createQualificationMutationSchema = exports.createQualificationMutationVariablesSchema = exports.deleteCertificationMutationSchema = exports.deleteCertificationMutationVariablesSchema = exports.updateCertificationMutationSchema = exports.updateCertificationMutationVariablesSchema = exports.createCertificationMutationSchema = exports.createCertificationMutationVariablesSchema = exports.deleteProviderReviewMutationSchema = exports.deleteProviderReviewMutationVariablesSchema = exports.updateProviderReviewMutationSchema = exports.updateProviderReviewMutationVariablesSchema = exports.createProviderReviewMutationSchema = exports.createProviderReviewMutationVariablesSchema = exports.deleteAvailabilityMutationSchema = exports.deleteAvailabilityMutationVariablesSchema = exports.updateAvailabilityMutationSchema = exports.updateAvailabilityMutationVariablesSchema = exports.createAvailabilityMutationSchema = exports.createAvailabilityMutationVariablesSchema = void 0;
exports.listProviderAvailabilitiesQuerySchema = exports.listProviderAvailabilitiesQueryVariablesSchema = exports.getProviderAvailabilityQuerySchema = exports.getProviderAvailabilityQueryVariablesSchema = exports.syncServiceDiscountsQuerySchema = exports.syncServiceDiscountsQueryVariablesSchema = exports.listServiceDiscountsQuerySchema = exports.listServiceDiscountsQueryVariablesSchema = exports.getServiceDiscountQuerySchema = exports.getServiceDiscountQueryVariablesSchema = exports.syncUserNotificationsQuerySchema = exports.syncUserNotificationsQueryVariablesSchema = exports.listUserNotificationsQuerySchema = exports.listUserNotificationsQueryVariablesSchema = exports.getUserNotificationQuerySchema = exports.getUserNotificationQueryVariablesSchema = exports.syncProviderNotificationsQuerySchema = exports.syncProviderNotificationsQueryVariablesSchema = exports.listProviderNotificationsQuerySchema = exports.listProviderNotificationsQueryVariablesSchema = exports.getProviderNotificationQuerySchema = exports.getProviderNotificationQueryVariablesSchema = exports.syncUserBookmarksQuerySchema = exports.syncUserBookmarksQueryVariablesSchema = exports.listUserBookmarksQuerySchema = exports.listUserBookmarksQueryVariablesSchema = exports.getUserBookmarkQuerySchema = exports.getUserBookmarkQueryVariablesSchema = exports.syncProviderBookmarksQuerySchema = exports.syncProviderBookmarksQueryVariablesSchema = exports.listProviderBookmarksQuerySchema = exports.listProviderBookmarksQueryVariablesSchema = exports.getProviderBookmarkQuerySchema = exports.getProviderBookmarkQueryVariablesSchema = exports.syncUserInvoicesQuerySchema = exports.syncUserInvoicesQueryVariablesSchema = exports.listUserInvoicesQuerySchema = exports.listUserInvoicesQueryVariablesSchema = exports.getUserInvoiceQuerySchema = exports.getUserInvoiceQueryVariablesSchema = exports.syncUserReportsQuerySchema = exports.syncUserReportsQueryVariablesSchema = exports.listUserReportsQuerySchema = exports.listUserReportsQueryVariablesSchema = exports.getUserReportQuerySchema = exports.getUserReportQueryVariablesSchema = exports.syncProviderReportsQuerySchema = exports.syncProviderReportsQueryVariablesSchema = exports.listProviderReportsQuerySchema = exports.listProviderReportsQueryVariablesSchema = void 0;
exports.syncExpensesQuerySchema = exports.syncExpensesQueryVariablesSchema = exports.listExpensesQuerySchema = exports.listExpensesQueryVariablesSchema = exports.getExpenseQuerySchema = exports.getExpenseQueryVariablesSchema = exports.syncCustomizationsQuerySchema = exports.syncCustomizationsQueryVariablesSchema = exports.listCustomizationsQuerySchema = exports.listCustomizationsQueryVariablesSchema = exports.getCustomizationQuerySchema = exports.getCustomizationQueryVariablesSchema = exports.syncAIDiagnosticsQuerySchema = exports.syncAIDiagnosticsQueryVariablesSchema = exports.listAIDiagnosticsQuerySchema = exports.listAIDiagnosticsQueryVariablesSchema = exports.getAIDiagnosticsQuerySchema = exports.getAIDiagnosticsQueryVariablesSchema = exports.syncServiceReviewsQuerySchema = exports.syncServiceReviewsQueryVariablesSchema = exports.listServiceReviewsQuerySchema = exports.listServiceReviewsQueryVariablesSchema = exports.getServiceReviewQuerySchema = exports.getServiceReviewQueryVariablesSchema = exports.syncServiceImagesQuerySchema = exports.syncServiceImagesQueryVariablesSchema = exports.listServiceImagesQuerySchema = exports.listServiceImagesQueryVariablesSchema = exports.getServiceImageQuerySchema = exports.getServiceImageQueryVariablesSchema = exports.syncServiceVideosQuerySchema = exports.syncServiceVideosQueryVariablesSchema = exports.listServiceVideosQuerySchema = exports.listServiceVideosQueryVariablesSchema = exports.getServiceVideoQuerySchema = exports.getServiceVideoQueryVariablesSchema = exports.syncProviderCertificationsQuerySchema = exports.syncProviderCertificationsQueryVariablesSchema = exports.listProviderCertificationsQuerySchema = exports.listProviderCertificationsQueryVariablesSchema = exports.getProviderCertificationQuerySchema = exports.getProviderCertificationQueryVariablesSchema = exports.syncUserPreferencesQuerySchema = exports.syncUserPreferencesQueryVariablesSchema = exports.listUserPreferencesQuerySchema = exports.listUserPreferencesQueryVariablesSchema = exports.getUserPreferenceQuerySchema = exports.getUserPreferenceQueryVariablesSchema = exports.syncProviderAvailabilitiesQuerySchema = exports.syncProviderAvailabilitiesQueryVariablesSchema = void 0;
exports.getNicheServiceQuerySchema = exports.getNicheServiceQueryVariablesSchema = exports.syncContractsQuerySchema = exports.syncContractsQueryVariablesSchema = exports.listContractsQuerySchema = exports.listContractsQueryVariablesSchema = exports.getContractQuerySchema = exports.getContractQueryVariablesSchema = exports.syncInvoicesQuerySchema = exports.syncInvoicesQueryVariablesSchema = exports.listInvoicesQuerySchema = exports.listInvoicesQueryVariablesSchema = exports.getInvoiceQuerySchema = exports.getInvoiceQueryVariablesSchema = exports.syncPaymentMethodsQuerySchema = exports.syncPaymentMethodsQueryVariablesSchema = exports.listPaymentMethodsQuerySchema = exports.listPaymentMethodsQueryVariablesSchema = exports.getPaymentMethodQuerySchema = exports.getPaymentMethodQueryVariablesSchema = exports.syncTipsQuerySchema = exports.syncTipsQueryVariablesSchema = exports.listTipsQuerySchema = exports.listTipsQueryVariablesSchema = exports.getTipQuerySchema = exports.getTipQueryVariablesSchema = exports.syncReferralsQuerySchema = exports.syncReferralsQueryVariablesSchema = exports.listReferralsQuerySchema = exports.listReferralsQueryVariablesSchema = exports.getReferralQuerySchema = exports.getReferralQueryVariablesSchema = exports.syncProviderAwardsQuerySchema = exports.syncProviderAwardsQueryVariablesSchema = exports.listProviderAwardsQuerySchema = exports.listProviderAwardsQueryVariablesSchema = exports.getProviderAwardQuerySchema = exports.getProviderAwardQueryVariablesSchema = exports.syncUserHistoriesQuerySchema = exports.syncUserHistoriesQueryVariablesSchema = exports.listUserHistoriesQuerySchema = exports.listUserHistoriesQueryVariablesSchema = exports.getUserHistoryQuerySchema = exports.getUserHistoryQueryVariablesSchema = exports.syncFavoriteProvidersQuerySchema = exports.syncFavoriteProvidersQueryVariablesSchema = exports.listFavoriteProvidersQuerySchema = exports.listFavoriteProvidersQueryVariablesSchema = exports.getFavoriteProviderQuerySchema = exports.getFavoriteProviderQueryVariablesSchema = void 0;
exports.listJobTrackingsQuerySchema = exports.listJobTrackingsQueryVariablesSchema = exports.getJobTrackingQuerySchema = exports.getJobTrackingQueryVariablesSchema = exports.syncReportsQuerySchema = exports.syncReportsQueryVariablesSchema = exports.listReportsQuerySchema = exports.listReportsQueryVariablesSchema = exports.getReportQuerySchema = exports.getReportQueryVariablesSchema = exports.syncPromoCodesQuerySchema = exports.syncPromoCodesQueryVariablesSchema = exports.listPromoCodesQuerySchema = exports.listPromoCodesQueryVariablesSchema = exports.getPromoCodeQuerySchema = exports.getPromoCodeQueryVariablesSchema = exports.syncAnalyticsQuerySchema = exports.syncAnalyticsQueryVariablesSchema = exports.listAnalyticsQuerySchema = exports.listAnalyticsQueryVariablesSchema = exports.getAnalyticsQuerySchema = exports.getAnalyticsQueryVariablesSchema = exports.syncVerificationsQuerySchema = exports.syncVerificationsQueryVariablesSchema = exports.listVerificationsQuerySchema = exports.listVerificationsQueryVariablesSchema = exports.getVerificationQuerySchema = exports.getVerificationQueryVariablesSchema = exports.syncLoyaltyProgramsQuerySchema = exports.syncLoyaltyProgramsQueryVariablesSchema = exports.listLoyaltyProgramsQuerySchema = exports.listLoyaltyProgramsQueryVariablesSchema = exports.getLoyaltyProgramQuerySchema = exports.getLoyaltyProgramQueryVariablesSchema = exports.syncRewardsQuerySchema = exports.syncRewardsQueryVariablesSchema = exports.listRewardsQuerySchema = exports.listRewardsQueryVariablesSchema = exports.getRewardQuerySchema = exports.getRewardQueryVariablesSchema = exports.syncServicePackagesQuerySchema = exports.syncServicePackagesQueryVariablesSchema = exports.listServicePackagesQuerySchema = exports.listServicePackagesQueryVariablesSchema = exports.getServicePackageQuerySchema = exports.getServicePackageQueryVariablesSchema = exports.syncNicheServicesQuerySchema = exports.syncNicheServicesQueryVariablesSchema = exports.listNicheServicesQuerySchema = exports.listNicheServicesQueryVariablesSchema = void 0;
exports.syncPortfoliosQuerySchema = exports.syncPortfoliosQueryVariablesSchema = exports.listPortfoliosQuerySchema = exports.listPortfoliosQueryVariablesSchema = exports.getPortfolioQuerySchema = exports.getPortfolioQueryVariablesSchema = exports.syncProviderSettingsQuerySchema = exports.syncProviderSettingsQueryVariablesSchema = exports.listProviderSettingsQuerySchema = exports.listProviderSettingsQueryVariablesSchema = exports.getProviderSettingsQuerySchema = exports.getProviderSettingsQueryVariablesSchema = exports.syncUserSettingsQuerySchema = exports.syncUserSettingsQueryVariablesSchema = exports.listUserSettingsQuerySchema = exports.listUserSettingsQueryVariablesSchema = exports.getUserSettingsQuerySchema = exports.getUserSettingsQueryVariablesSchema = exports.syncPLMBRSubscriptionsQuerySchema = exports.syncPLMBRSubscriptionsQueryVariablesSchema = exports.listPLMBRSubscriptionsQuerySchema = exports.listPLMBRSubscriptionsQueryVariablesSchema = exports.getPLMBRSubscriptionQuerySchema = exports.getPLMBRSubscriptionQueryVariablesSchema = exports.syncSubCategoriesQuerySchema = exports.syncSubCategoriesQueryVariablesSchema = exports.listSubCategoriesQuerySchema = exports.listSubCategoriesQueryVariablesSchema = exports.getSubCategoryQuerySchema = exports.getSubCategoryQueryVariablesSchema = exports.syncMainCategoriesQuerySchema = exports.syncMainCategoriesQueryVariablesSchema = exports.listMainCategoriesQuerySchema = exports.listMainCategoriesQueryVariablesSchema = exports.getMainCategoryQuerySchema = exports.getMainCategoryQueryVariablesSchema = exports.syncAIChatBotsQuerySchema = exports.syncAIChatBotsQueryVariablesSchema = exports.listAIChatBotsQuerySchema = exports.listAIChatBotsQueryVariablesSchema = exports.getAIChatBotQuerySchema = exports.getAIChatBotQueryVariablesSchema = exports.syncAIChatLogsQuerySchema = exports.syncAIChatLogsQueryVariablesSchema = exports.listAIChatLogsQuerySchema = exports.listAIChatLogsQueryVariablesSchema = exports.getAIChatLogQuerySchema = exports.getAIChatLogQueryVariablesSchema = exports.syncJobTrackingsQuerySchema = exports.syncJobTrackingsQueryVariablesSchema = void 0;
exports.getReviewQuerySchema = exports.getReviewQueryVariablesSchema = exports.syncTransactionsQuerySchema = exports.syncTransactionsQueryVariablesSchema = exports.listTransactionsQuerySchema = exports.listTransactionsQueryVariablesSchema = exports.getTransactionQuerySchema = exports.getTransactionQueryVariablesSchema = exports.syncWalletsQuerySchema = exports.syncWalletsQueryVariablesSchema = exports.listWalletsQuerySchema = exports.listWalletsQueryVariablesSchema = exports.getWalletQuerySchema = exports.getWalletQueryVariablesSchema = exports.syncEquipmentQuerySchema = exports.syncEquipmentQueryVariablesSchema = exports.listEquipmentQuerySchema = exports.listEquipmentQueryVariablesSchema = exports.getEquipmentQuerySchema = exports.getEquipmentQueryVariablesSchema = exports.syncFeedbacksQuerySchema = exports.syncFeedbacksQueryVariablesSchema = exports.listFeedbacksQuerySchema = exports.listFeedbacksQueryVariablesSchema = exports.getFeedbackQuerySchema = exports.getFeedbackQueryVariablesSchema = exports.syncServiceFAQSQuerySchema = exports.syncServiceFAQSQueryVariablesSchema = exports.listServiceFAQSQuerySchema = exports.listServiceFAQSQueryVariablesSchema = exports.getServiceFAQQuerySchema = exports.getServiceFAQQueryVariablesSchema = exports.syncServiceTagsQuerySchema = exports.syncServiceTagsQueryVariablesSchema = exports.listServiceTagsQuerySchema = exports.listServiceTagsQueryVariablesSchema = exports.getServiceTagQuerySchema = exports.getServiceTagQueryVariablesSchema = exports.syncServiceHighlightsQuerySchema = exports.syncServiceHighlightsQueryVariablesSchema = exports.listServiceHighlightsQuerySchema = exports.listServiceHighlightsQueryVariablesSchema = exports.getServiceHighlightQuerySchema = exports.getServiceHighlightQueryVariablesSchema = exports.syncServiceVariantsQuerySchema = exports.syncServiceVariantsQueryVariablesSchema = exports.listServiceVariantsQuerySchema = exports.listServiceVariantsQueryVariablesSchema = exports.getServiceVariantQuerySchema = exports.getServiceVariantQueryVariablesSchema = void 0;
exports.listJobsQuerySchema = exports.listJobsQueryVariablesSchema = exports.getJobQuerySchema = exports.getJobQueryVariablesSchema = exports.syncMessagesQuerySchema = exports.syncMessagesQueryVariablesSchema = exports.listMessagesQuerySchema = exports.listMessagesQueryVariablesSchema = exports.getMessageQuerySchema = exports.getMessageQueryVariablesSchema = exports.syncLocationsQuerySchema = exports.syncLocationsQueryVariablesSchema = exports.listLocationsQuerySchema = exports.listLocationsQueryVariablesSchema = exports.getLocationQuerySchema = exports.getLocationQueryVariablesSchema = exports.syncTeamMembersQuerySchema = exports.syncTeamMembersQueryVariablesSchema = exports.listTeamMembersQuerySchema = exports.listTeamMembersQueryVariablesSchema = exports.getTeamMemberQuerySchema = exports.getTeamMemberQueryVariablesSchema = exports.syncBookingsQuerySchema = exports.syncBookingsQueryVariablesSchema = exports.listBookingsQuerySchema = exports.listBookingsQueryVariablesSchema = exports.getBookingQuerySchema = exports.getBookingQueryVariablesSchema = exports.syncMessageContentsQuerySchema = exports.syncMessageContentsQueryVariablesSchema = exports.listMessageContentsQuerySchema = exports.listMessageContentsQueryVariablesSchema = exports.getMessageContentQuerySchema = exports.getMessageContentQueryVariablesSchema = exports.syncMessageThreadsQuerySchema = exports.syncMessageThreadsQueryVariablesSchema = exports.listMessageThreadsQuerySchema = exports.listMessageThreadsQueryVariablesSchema = exports.getMessageThreadQuerySchema = exports.getMessageThreadQueryVariablesSchema = exports.syncReviewResponsesQuerySchema = exports.syncReviewResponsesQueryVariablesSchema = exports.listReviewResponsesQuerySchema = exports.listReviewResponsesQueryVariablesSchema = exports.getReviewResponseQuerySchema = exports.getReviewResponseQueryVariablesSchema = exports.syncReviewsQuerySchema = exports.syncReviewsQueryVariablesSchema = exports.listReviewsQuerySchema = exports.listReviewsQueryVariablesSchema = void 0;
exports.syncProviderHistoriesQuerySchema = exports.syncProviderHistoriesQueryVariablesSchema = exports.listProviderHistoriesQuerySchema = exports.listProviderHistoriesQueryVariablesSchema = exports.getProviderHistoryQuerySchema = exports.getProviderHistoryQueryVariablesSchema = exports.syncSpecializationsQuerySchema = exports.syncSpecializationsQueryVariablesSchema = exports.listSpecializationsQuerySchema = exports.listSpecializationsQueryVariablesSchema = exports.getSpecializationQuerySchema = exports.getSpecializationQueryVariablesSchema = exports.syncQualificationsQuerySchema = exports.syncQualificationsQueryVariablesSchema = exports.listQualificationsQuerySchema = exports.listQualificationsQueryVariablesSchema = exports.getQualificationQuerySchema = exports.getQualificationQueryVariablesSchema = exports.syncCertificationsQuerySchema = exports.syncCertificationsQueryVariablesSchema = exports.listCertificationsQuerySchema = exports.listCertificationsQueryVariablesSchema = exports.getCertificationQuerySchema = exports.getCertificationQueryVariablesSchema = exports.syncProviderReviewsQuerySchema = exports.syncProviderReviewsQueryVariablesSchema = exports.listProviderReviewsQuerySchema = exports.listProviderReviewsQueryVariablesSchema = exports.getProviderReviewQuerySchema = exports.getProviderReviewQueryVariablesSchema = exports.syncAvailabilitiesQuerySchema = exports.syncAvailabilitiesQueryVariablesSchema = exports.listAvailabilitiesQuerySchema = exports.listAvailabilitiesQueryVariablesSchema = exports.getAvailabilityQuerySchema = exports.getAvailabilityQueryVariablesSchema = exports.syncProvidersQuerySchema = exports.syncProvidersQueryVariablesSchema = exports.listProvidersQuerySchema = exports.listProvidersQueryVariablesSchema = exports.getProviderQuerySchema = exports.getProviderQueryVariablesSchema = exports.syncServicesQuerySchema = exports.syncServicesQueryVariablesSchema = exports.listServicesQuerySchema = exports.listServicesQueryVariablesSchema = exports.getServiceQuerySchema = exports.getServiceQueryVariablesSchema = exports.syncJobsQuerySchema = exports.syncJobsQueryVariablesSchema = void 0;
exports.onCreateUserNotificationSubscriptionSchema = exports.onCreateUserNotificationSubscriptionVariablesSchema = exports.onDeleteProviderNotificationSubscriptionSchema = exports.onDeleteProviderNotificationSubscriptionVariablesSchema = exports.onUpdateProviderNotificationSubscriptionSchema = exports.onUpdateProviderNotificationSubscriptionVariablesSchema = exports.onCreateProviderNotificationSubscriptionSchema = exports.onCreateProviderNotificationSubscriptionVariablesSchema = exports.onDeleteUserBookmarkSubscriptionSchema = exports.onDeleteUserBookmarkSubscriptionVariablesSchema = exports.onUpdateUserBookmarkSubscriptionSchema = exports.onUpdateUserBookmarkSubscriptionVariablesSchema = exports.onCreateUserBookmarkSubscriptionSchema = exports.onCreateUserBookmarkSubscriptionVariablesSchema = exports.onDeleteProviderBookmarkSubscriptionSchema = exports.onDeleteProviderBookmarkSubscriptionVariablesSchema = exports.onUpdateProviderBookmarkSubscriptionSchema = exports.onUpdateProviderBookmarkSubscriptionVariablesSchema = exports.onCreateProviderBookmarkSubscriptionSchema = exports.onCreateProviderBookmarkSubscriptionVariablesSchema = exports.onDeleteUserInvoiceSubscriptionSchema = exports.onDeleteUserInvoiceSubscriptionVariablesSchema = exports.onUpdateUserInvoiceSubscriptionSchema = exports.onUpdateUserInvoiceSubscriptionVariablesSchema = exports.onCreateUserInvoiceSubscriptionSchema = exports.onCreateUserInvoiceSubscriptionVariablesSchema = exports.onDeleteUserReportSubscriptionSchema = exports.onDeleteUserReportSubscriptionVariablesSchema = exports.onUpdateUserReportSubscriptionSchema = exports.onUpdateUserReportSubscriptionVariablesSchema = exports.onCreateUserReportSubscriptionSchema = exports.onCreateUserReportSubscriptionVariablesSchema = exports.onDeleteProviderReportSubscriptionSchema = exports.onDeleteProviderReportSubscriptionVariablesSchema = exports.onUpdateProviderReportSubscriptionSchema = exports.onUpdateProviderReportSubscriptionVariablesSchema = exports.onCreateProviderReportSubscriptionSchema = exports.onCreateProviderReportSubscriptionVariablesSchema = exports.onDeleteServicePromotionSubscriptionSchema = exports.onDeleteServicePromotionSubscriptionVariablesSchema = exports.onUpdateServicePromotionSubscriptionSchema = exports.onUpdateServicePromotionSubscriptionVariablesSchema = exports.onCreateServicePromotionSubscriptionSchema = exports.onCreateServicePromotionSubscriptionVariablesSchema = exports.syncUsersQuerySchema = exports.syncUsersQueryVariablesSchema = exports.listUsersQuerySchema = exports.listUsersQueryVariablesSchema = exports.getUserQuerySchema = exports.getUserQueryVariablesSchema = void 0;
exports.onUpdateAIDiagnosticsSubscriptionSchema = exports.onUpdateAIDiagnosticsSubscriptionVariablesSchema = exports.onCreateAIDiagnosticsSubscriptionSchema = exports.onCreateAIDiagnosticsSubscriptionVariablesSchema = exports.onDeleteServiceReviewSubscriptionSchema = exports.onDeleteServiceReviewSubscriptionVariablesSchema = exports.onUpdateServiceReviewSubscriptionSchema = exports.onUpdateServiceReviewSubscriptionVariablesSchema = exports.onCreateServiceReviewSubscriptionSchema = exports.onCreateServiceReviewSubscriptionVariablesSchema = exports.onDeleteServiceImageSubscriptionSchema = exports.onDeleteServiceImageSubscriptionVariablesSchema = exports.onUpdateServiceImageSubscriptionSchema = exports.onUpdateServiceImageSubscriptionVariablesSchema = exports.onCreateServiceImageSubscriptionSchema = exports.onCreateServiceImageSubscriptionVariablesSchema = exports.onDeleteServiceVideoSubscriptionSchema = exports.onDeleteServiceVideoSubscriptionVariablesSchema = exports.onUpdateServiceVideoSubscriptionSchema = exports.onUpdateServiceVideoSubscriptionVariablesSchema = exports.onCreateServiceVideoSubscriptionSchema = exports.onCreateServiceVideoSubscriptionVariablesSchema = exports.onDeleteProviderCertificationSubscriptionSchema = exports.onDeleteProviderCertificationSubscriptionVariablesSchema = exports.onUpdateProviderCertificationSubscriptionSchema = exports.onUpdateProviderCertificationSubscriptionVariablesSchema = exports.onCreateProviderCertificationSubscriptionSchema = exports.onCreateProviderCertificationSubscriptionVariablesSchema = exports.onDeleteUserPreferenceSubscriptionSchema = exports.onDeleteUserPreferenceSubscriptionVariablesSchema = exports.onUpdateUserPreferenceSubscriptionSchema = exports.onUpdateUserPreferenceSubscriptionVariablesSchema = exports.onCreateUserPreferenceSubscriptionSchema = exports.onCreateUserPreferenceSubscriptionVariablesSchema = exports.onDeleteProviderAvailabilitySubscriptionSchema = exports.onDeleteProviderAvailabilitySubscriptionVariablesSchema = exports.onUpdateProviderAvailabilitySubscriptionSchema = exports.onUpdateProviderAvailabilitySubscriptionVariablesSchema = exports.onCreateProviderAvailabilitySubscriptionSchema = exports.onCreateProviderAvailabilitySubscriptionVariablesSchema = exports.onDeleteServiceDiscountSubscriptionSchema = exports.onDeleteServiceDiscountSubscriptionVariablesSchema = exports.onUpdateServiceDiscountSubscriptionSchema = exports.onUpdateServiceDiscountSubscriptionVariablesSchema = exports.onCreateServiceDiscountSubscriptionSchema = exports.onCreateServiceDiscountSubscriptionVariablesSchema = exports.onDeleteUserNotificationSubscriptionSchema = exports.onDeleteUserNotificationSubscriptionVariablesSchema = exports.onUpdateUserNotificationSubscriptionSchema = exports.onUpdateUserNotificationSubscriptionVariablesSchema = void 0;
exports.onDeletePaymentMethodSubscriptionSchema = exports.onDeletePaymentMethodSubscriptionVariablesSchema = exports.onUpdatePaymentMethodSubscriptionSchema = exports.onUpdatePaymentMethodSubscriptionVariablesSchema = exports.onCreatePaymentMethodSubscriptionSchema = exports.onCreatePaymentMethodSubscriptionVariablesSchema = exports.onDeleteTipSubscriptionSchema = exports.onDeleteTipSubscriptionVariablesSchema = exports.onUpdateTipSubscriptionSchema = exports.onUpdateTipSubscriptionVariablesSchema = exports.onCreateTipSubscriptionSchema = exports.onCreateTipSubscriptionVariablesSchema = exports.onDeleteReferralSubscriptionSchema = exports.onDeleteReferralSubscriptionVariablesSchema = exports.onUpdateReferralSubscriptionSchema = exports.onUpdateReferralSubscriptionVariablesSchema = exports.onCreateReferralSubscriptionSchema = exports.onCreateReferralSubscriptionVariablesSchema = exports.onDeleteProviderAwardSubscriptionSchema = exports.onDeleteProviderAwardSubscriptionVariablesSchema = exports.onUpdateProviderAwardSubscriptionSchema = exports.onUpdateProviderAwardSubscriptionVariablesSchema = exports.onCreateProviderAwardSubscriptionSchema = exports.onCreateProviderAwardSubscriptionVariablesSchema = exports.onDeleteUserHistorySubscriptionSchema = exports.onDeleteUserHistorySubscriptionVariablesSchema = exports.onUpdateUserHistorySubscriptionSchema = exports.onUpdateUserHistorySubscriptionVariablesSchema = exports.onCreateUserHistorySubscriptionSchema = exports.onCreateUserHistorySubscriptionVariablesSchema = exports.onDeleteFavoriteProviderSubscriptionSchema = exports.onDeleteFavoriteProviderSubscriptionVariablesSchema = exports.onUpdateFavoriteProviderSubscriptionSchema = exports.onUpdateFavoriteProviderSubscriptionVariablesSchema = exports.onCreateFavoriteProviderSubscriptionSchema = exports.onCreateFavoriteProviderSubscriptionVariablesSchema = exports.onDeleteExpenseSubscriptionSchema = exports.onDeleteExpenseSubscriptionVariablesSchema = exports.onUpdateExpenseSubscriptionSchema = exports.onUpdateExpenseSubscriptionVariablesSchema = exports.onCreateExpenseSubscriptionSchema = exports.onCreateExpenseSubscriptionVariablesSchema = exports.onDeleteCustomizationSubscriptionSchema = exports.onDeleteCustomizationSubscriptionVariablesSchema = exports.onUpdateCustomizationSubscriptionSchema = exports.onUpdateCustomizationSubscriptionVariablesSchema = exports.onCreateCustomizationSubscriptionSchema = exports.onCreateCustomizationSubscriptionVariablesSchema = exports.onDeleteAIDiagnosticsSubscriptionSchema = exports.onDeleteAIDiagnosticsSubscriptionVariablesSchema = void 0;
exports.onCreatePromoCodeSubscriptionSchema = exports.onCreatePromoCodeSubscriptionVariablesSchema = exports.onDeleteAnalyticsSubscriptionSchema = exports.onDeleteAnalyticsSubscriptionVariablesSchema = exports.onUpdateAnalyticsSubscriptionSchema = exports.onUpdateAnalyticsSubscriptionVariablesSchema = exports.onCreateAnalyticsSubscriptionSchema = exports.onCreateAnalyticsSubscriptionVariablesSchema = exports.onDeleteVerificationSubscriptionSchema = exports.onDeleteVerificationSubscriptionVariablesSchema = exports.onUpdateVerificationSubscriptionSchema = exports.onUpdateVerificationSubscriptionVariablesSchema = exports.onCreateVerificationSubscriptionSchema = exports.onCreateVerificationSubscriptionVariablesSchema = exports.onDeleteLoyaltyProgramSubscriptionSchema = exports.onDeleteLoyaltyProgramSubscriptionVariablesSchema = exports.onUpdateLoyaltyProgramSubscriptionSchema = exports.onUpdateLoyaltyProgramSubscriptionVariablesSchema = exports.onCreateLoyaltyProgramSubscriptionSchema = exports.onCreateLoyaltyProgramSubscriptionVariablesSchema = exports.onDeleteRewardSubscriptionSchema = exports.onDeleteRewardSubscriptionVariablesSchema = exports.onUpdateRewardSubscriptionSchema = exports.onUpdateRewardSubscriptionVariablesSchema = exports.onCreateRewardSubscriptionSchema = exports.onCreateRewardSubscriptionVariablesSchema = exports.onDeleteServicePackageSubscriptionSchema = exports.onDeleteServicePackageSubscriptionVariablesSchema = exports.onUpdateServicePackageSubscriptionSchema = exports.onUpdateServicePackageSubscriptionVariablesSchema = exports.onCreateServicePackageSubscriptionSchema = exports.onCreateServicePackageSubscriptionVariablesSchema = exports.onDeleteNicheServiceSubscriptionSchema = exports.onDeleteNicheServiceSubscriptionVariablesSchema = exports.onUpdateNicheServiceSubscriptionSchema = exports.onUpdateNicheServiceSubscriptionVariablesSchema = exports.onCreateNicheServiceSubscriptionSchema = exports.onCreateNicheServiceSubscriptionVariablesSchema = exports.onDeleteContractSubscriptionSchema = exports.onDeleteContractSubscriptionVariablesSchema = exports.onUpdateContractSubscriptionSchema = exports.onUpdateContractSubscriptionVariablesSchema = exports.onCreateContractSubscriptionSchema = exports.onCreateContractSubscriptionVariablesSchema = exports.onDeleteInvoiceSubscriptionSchema = exports.onDeleteInvoiceSubscriptionVariablesSchema = exports.onUpdateInvoiceSubscriptionSchema = exports.onUpdateInvoiceSubscriptionVariablesSchema = exports.onCreateInvoiceSubscriptionSchema = exports.onCreateInvoiceSubscriptionVariablesSchema = void 0;
exports.onUpdateUserSettingsSubscriptionSchema = exports.onUpdateUserSettingsSubscriptionVariablesSchema = exports.onCreateUserSettingsSubscriptionSchema = exports.onCreateUserSettingsSubscriptionVariablesSchema = exports.onDeletePLMBRSubscriptionSubscriptionSchema = exports.onDeletePLMBRSubscriptionSubscriptionVariablesSchema = exports.onUpdatePLMBRSubscriptionSubscriptionSchema = exports.onUpdatePLMBRSubscriptionSubscriptionVariablesSchema = exports.onCreatePLMBRSubscriptionSubscriptionSchema = exports.onCreatePLMBRSubscriptionSubscriptionVariablesSchema = exports.onDeleteSubCategorySubscriptionSchema = exports.onDeleteSubCategorySubscriptionVariablesSchema = exports.onUpdateSubCategorySubscriptionSchema = exports.onUpdateSubCategorySubscriptionVariablesSchema = exports.onCreateSubCategorySubscriptionSchema = exports.onCreateSubCategorySubscriptionVariablesSchema = exports.onDeleteMainCategorySubscriptionSchema = exports.onDeleteMainCategorySubscriptionVariablesSchema = exports.onUpdateMainCategorySubscriptionSchema = exports.onUpdateMainCategorySubscriptionVariablesSchema = exports.onCreateMainCategorySubscriptionSchema = exports.onCreateMainCategorySubscriptionVariablesSchema = exports.onDeleteAIChatBotSubscriptionSchema = exports.onDeleteAIChatBotSubscriptionVariablesSchema = exports.onUpdateAIChatBotSubscriptionSchema = exports.onUpdateAIChatBotSubscriptionVariablesSchema = exports.onCreateAIChatBotSubscriptionSchema = exports.onCreateAIChatBotSubscriptionVariablesSchema = exports.onDeleteAIChatLogSubscriptionSchema = exports.onDeleteAIChatLogSubscriptionVariablesSchema = exports.onUpdateAIChatLogSubscriptionSchema = exports.onUpdateAIChatLogSubscriptionVariablesSchema = exports.onCreateAIChatLogSubscriptionSchema = exports.onCreateAIChatLogSubscriptionVariablesSchema = exports.onDeleteJobTrackingSubscriptionSchema = exports.onDeleteJobTrackingSubscriptionVariablesSchema = exports.onUpdateJobTrackingSubscriptionSchema = exports.onUpdateJobTrackingSubscriptionVariablesSchema = exports.onCreateJobTrackingSubscriptionSchema = exports.onCreateJobTrackingSubscriptionVariablesSchema = exports.onDeleteReportSubscriptionSchema = exports.onDeleteReportSubscriptionVariablesSchema = exports.onUpdateReportSubscriptionSchema = exports.onUpdateReportSubscriptionVariablesSchema = exports.onCreateReportSubscriptionSchema = exports.onCreateReportSubscriptionVariablesSchema = exports.onDeletePromoCodeSubscriptionSchema = exports.onDeletePromoCodeSubscriptionVariablesSchema = exports.onUpdatePromoCodeSubscriptionSchema = exports.onUpdatePromoCodeSubscriptionVariablesSchema = void 0;
exports.onDeleteEquipmentSubscriptionSchema = exports.onDeleteEquipmentSubscriptionVariablesSchema = exports.onUpdateEquipmentSubscriptionSchema = exports.onUpdateEquipmentSubscriptionVariablesSchema = exports.onCreateEquipmentSubscriptionSchema = exports.onCreateEquipmentSubscriptionVariablesSchema = exports.onDeleteFeedbackSubscriptionSchema = exports.onDeleteFeedbackSubscriptionVariablesSchema = exports.onUpdateFeedbackSubscriptionSchema = exports.onUpdateFeedbackSubscriptionVariablesSchema = exports.onCreateFeedbackSubscriptionSchema = exports.onCreateFeedbackSubscriptionVariablesSchema = exports.onDeleteServiceFAQSubscriptionSchema = exports.onDeleteServiceFAQSubscriptionVariablesSchema = exports.onUpdateServiceFAQSubscriptionSchema = exports.onUpdateServiceFAQSubscriptionVariablesSchema = exports.onCreateServiceFAQSubscriptionSchema = exports.onCreateServiceFAQSubscriptionVariablesSchema = exports.onDeleteServiceTagSubscriptionSchema = exports.onDeleteServiceTagSubscriptionVariablesSchema = exports.onUpdateServiceTagSubscriptionSchema = exports.onUpdateServiceTagSubscriptionVariablesSchema = exports.onCreateServiceTagSubscriptionSchema = exports.onCreateServiceTagSubscriptionVariablesSchema = exports.onDeleteServiceHighlightSubscriptionSchema = exports.onDeleteServiceHighlightSubscriptionVariablesSchema = exports.onUpdateServiceHighlightSubscriptionSchema = exports.onUpdateServiceHighlightSubscriptionVariablesSchema = exports.onCreateServiceHighlightSubscriptionSchema = exports.onCreateServiceHighlightSubscriptionVariablesSchema = exports.onDeleteServiceVariantSubscriptionSchema = exports.onDeleteServiceVariantSubscriptionVariablesSchema = exports.onUpdateServiceVariantSubscriptionSchema = exports.onUpdateServiceVariantSubscriptionVariablesSchema = exports.onCreateServiceVariantSubscriptionSchema = exports.onCreateServiceVariantSubscriptionVariablesSchema = exports.onDeletePortfolioSubscriptionSchema = exports.onDeletePortfolioSubscriptionVariablesSchema = exports.onUpdatePortfolioSubscriptionSchema = exports.onUpdatePortfolioSubscriptionVariablesSchema = exports.onCreatePortfolioSubscriptionSchema = exports.onCreatePortfolioSubscriptionVariablesSchema = exports.onDeleteProviderSettingsSubscriptionSchema = exports.onDeleteProviderSettingsSubscriptionVariablesSchema = exports.onUpdateProviderSettingsSubscriptionSchema = exports.onUpdateProviderSettingsSubscriptionVariablesSchema = exports.onCreateProviderSettingsSubscriptionSchema = exports.onCreateProviderSettingsSubscriptionVariablesSchema = exports.onDeleteUserSettingsSubscriptionSchema = exports.onDeleteUserSettingsSubscriptionVariablesSchema = void 0;
exports.onCreateLocationSubscriptionSchema = exports.onCreateLocationSubscriptionVariablesSchema = exports.onDeleteTeamMemberSubscriptionSchema = exports.onDeleteTeamMemberSubscriptionVariablesSchema = exports.onUpdateTeamMemberSubscriptionSchema = exports.onUpdateTeamMemberSubscriptionVariablesSchema = exports.onCreateTeamMemberSubscriptionSchema = exports.onCreateTeamMemberSubscriptionVariablesSchema = exports.onDeleteBookingSubscriptionSchema = exports.onDeleteBookingSubscriptionVariablesSchema = exports.onUpdateBookingSubscriptionSchema = exports.onUpdateBookingSubscriptionVariablesSchema = exports.onCreateBookingSubscriptionSchema = exports.onCreateBookingSubscriptionVariablesSchema = exports.onDeleteMessageContentSubscriptionSchema = exports.onDeleteMessageContentSubscriptionVariablesSchema = exports.onUpdateMessageContentSubscriptionSchema = exports.onUpdateMessageContentSubscriptionVariablesSchema = exports.onCreateMessageContentSubscriptionSchema = exports.onCreateMessageContentSubscriptionVariablesSchema = exports.onDeleteMessageThreadSubscriptionSchema = exports.onDeleteMessageThreadSubscriptionVariablesSchema = exports.onUpdateMessageThreadSubscriptionSchema = exports.onUpdateMessageThreadSubscriptionVariablesSchema = exports.onCreateMessageThreadSubscriptionSchema = exports.onCreateMessageThreadSubscriptionVariablesSchema = exports.onDeleteReviewResponseSubscriptionSchema = exports.onDeleteReviewResponseSubscriptionVariablesSchema = exports.onUpdateReviewResponseSubscriptionSchema = exports.onUpdateReviewResponseSubscriptionVariablesSchema = exports.onCreateReviewResponseSubscriptionSchema = exports.onCreateReviewResponseSubscriptionVariablesSchema = exports.onDeleteReviewSubscriptionSchema = exports.onDeleteReviewSubscriptionVariablesSchema = exports.onUpdateReviewSubscriptionSchema = exports.onUpdateReviewSubscriptionVariablesSchema = exports.onCreateReviewSubscriptionSchema = exports.onCreateReviewSubscriptionVariablesSchema = exports.onDeleteTransactionSubscriptionSchema = exports.onDeleteTransactionSubscriptionVariablesSchema = exports.onUpdateTransactionSubscriptionSchema = exports.onUpdateTransactionSubscriptionVariablesSchema = exports.onCreateTransactionSubscriptionSchema = exports.onCreateTransactionSubscriptionVariablesSchema = exports.onDeleteWalletSubscriptionSchema = exports.onDeleteWalletSubscriptionVariablesSchema = exports.onUpdateWalletSubscriptionSchema = exports.onUpdateWalletSubscriptionVariablesSchema = exports.onCreateWalletSubscriptionSchema = exports.onCreateWalletSubscriptionVariablesSchema = void 0;
exports.onUpdateQualificationSubscriptionSchema = exports.onUpdateQualificationSubscriptionVariablesSchema = exports.onCreateQualificationSubscriptionSchema = exports.onCreateQualificationSubscriptionVariablesSchema = exports.onDeleteCertificationSubscriptionSchema = exports.onDeleteCertificationSubscriptionVariablesSchema = exports.onUpdateCertificationSubscriptionSchema = exports.onUpdateCertificationSubscriptionVariablesSchema = exports.onCreateCertificationSubscriptionSchema = exports.onCreateCertificationSubscriptionVariablesSchema = exports.onDeleteProviderReviewSubscriptionSchema = exports.onDeleteProviderReviewSubscriptionVariablesSchema = exports.onUpdateProviderReviewSubscriptionSchema = exports.onUpdateProviderReviewSubscriptionVariablesSchema = exports.onCreateProviderReviewSubscriptionSchema = exports.onCreateProviderReviewSubscriptionVariablesSchema = exports.onDeleteAvailabilitySubscriptionSchema = exports.onDeleteAvailabilitySubscriptionVariablesSchema = exports.onUpdateAvailabilitySubscriptionSchema = exports.onUpdateAvailabilitySubscriptionVariablesSchema = exports.onCreateAvailabilitySubscriptionSchema = exports.onCreateAvailabilitySubscriptionVariablesSchema = exports.onDeleteProviderSubscriptionSchema = exports.onDeleteProviderSubscriptionVariablesSchema = exports.onUpdateProviderSubscriptionSchema = exports.onUpdateProviderSubscriptionVariablesSchema = exports.onCreateProviderSubscriptionSchema = exports.onCreateProviderSubscriptionVariablesSchema = exports.onDeleteServiceSubscriptionSchema = exports.onDeleteServiceSubscriptionVariablesSchema = exports.onUpdateServiceSubscriptionSchema = exports.onUpdateServiceSubscriptionVariablesSchema = exports.onCreateServiceSubscriptionSchema = exports.onCreateServiceSubscriptionVariablesSchema = exports.onDeleteJobSubscriptionSchema = exports.onDeleteJobSubscriptionVariablesSchema = exports.onUpdateJobSubscriptionSchema = exports.onUpdateJobSubscriptionVariablesSchema = exports.onCreateJobSubscriptionSchema = exports.onCreateJobSubscriptionVariablesSchema = exports.onDeleteMessageSubscriptionSchema = exports.onDeleteMessageSubscriptionVariablesSchema = exports.onUpdateMessageSubscriptionSchema = exports.onUpdateMessageSubscriptionVariablesSchema = exports.onCreateMessageSubscriptionSchema = exports.onCreateMessageSubscriptionVariablesSchema = exports.onDeleteLocationSubscriptionSchema = exports.onDeleteLocationSubscriptionVariablesSchema = exports.onUpdateLocationSubscriptionSchema = exports.onUpdateLocationSubscriptionVariablesSchema = void 0;
exports.modelAIDiagnosticsConnectionSchema = exports.modelServiceReviewConnectionSchema = exports.modelServiceImageConnectionSchema = exports.modelServiceVideoConnectionSchema = exports.modelProviderCertificationConnectionSchema = exports.modelUserPreferenceConnectionSchema = exports.modelProviderAvailabilityConnectionSchema = exports.modelServiceDiscountConnectionSchema = exports.modelUserNotificationConnectionSchema = exports.modelProviderNotificationConnectionSchema = exports.modelUserBookmarkConnectionSchema = exports.modelProviderBookmarkConnectionSchema = exports.modelUserInvoiceConnectionSchema = exports.modelUserReportConnectionSchema = exports.modelProviderReportConnectionSchema = exports.modelServicePromotionConnectionSchema = exports.subCategorySchema = exports.modelBookingConnectionSchema = exports.modelReviewConnectionSchema = exports.providerSchema = exports.serviceSchema = exports.servicePromotionSchema = exports.modelJobConnectionSchema = exports.createEquipmentMutationVariablesSchema = exports.createServicePromotionMutationVariablesSchema = exports.modelPLMBRSubscriptionConnectionSchema = exports.modelFeedbackConnectionSchema = exports.jobSchema = exports.modelMessageConnectionSchema = exports.modelProviderHistoryConnectionSchema = exports.onDeleteUserSubscriptionSchema = exports.onDeleteUserSubscriptionVariablesSchema = exports.onUpdateUserSubscriptionSchema = exports.onUpdateUserSubscriptionVariablesSchema = exports.onCreateUserSubscriptionSchema = exports.onCreateUserSubscriptionVariablesSchema = exports.onDeleteProviderHistorySubscriptionSchema = exports.onDeleteProviderHistorySubscriptionVariablesSchema = exports.onUpdateProviderHistorySubscriptionSchema = exports.onUpdateProviderHistorySubscriptionVariablesSchema = exports.onCreateProviderHistorySubscriptionSchema = exports.onCreateProviderHistorySubscriptionVariablesSchema = exports.onDeleteSpecializationSubscriptionSchema = exports.onDeleteSpecializationSubscriptionVariablesSchema = exports.onUpdateSpecializationSubscriptionSchema = exports.onUpdateSpecializationSubscriptionVariablesSchema = exports.onCreateSpecializationSubscriptionSchema = exports.onCreateSpecializationSubscriptionVariablesSchema = exports.onDeleteQualificationSubscriptionSchema = exports.onDeleteQualificationSubscriptionVariablesSchema = void 0;
exports.favoriteProviderSchema = exports.userHistorySchema = exports.tipSchema = exports.paymentMethodSchema = exports.invoiceSchema = exports.contractSchema = exports.referralSchema = exports.rewardSchema = exports.loyaltyProgramSchema = exports.reportSchema = exports.jobTrackingSchema = exports.aIChatLogSchema = exports.aIDiagnosticsSchema = exports.aIChatBotSchema = exports.transactionSchema = exports.messageContentSchema = exports.modelMessageContentConnectionSchema = exports.messageThreadSchema = exports.bookingSchema = exports.modelVerificationConnectionSchema = exports.modelPaymentMethodConnectionSchema = exports.modelRewardConnectionSchema = exports.modelLoyaltyProgramConnectionSchema = exports.modelReportConnectionSchema = exports.modelAIChatLogConnectionSchema = exports.modelAIChatBotConnectionSchema = exports.modelTransactionConnectionSchema = exports.walletSchema = exports.reviewResponseSchema = exports.userSchema = exports.reviewSchema = exports.availabilitySchema = exports.teamMemberSchema = exports.modelTipConnectionSchema = exports.modelInvoiceConnectionSchema = exports.modelMessageThreadConnectionSchema = exports.modelSpecializationConnectionSchema = exports.modelQualificationConnectionSchema = exports.modelCertificationConnectionSchema = exports.modelAvailabilityConnectionSchema = exports.modelTeamMemberConnectionSchema = exports.modelServiceConnectionSchema = exports.modelJobTrackingConnectionSchema = exports.modelContractConnectionSchema = exports.modelReferralConnectionSchema = exports.modelProviderAwardConnectionSchema = exports.modelUserHistoryConnectionSchema = exports.modelFavoriteProviderConnectionSchema = exports.modelExpenseConnectionSchema = exports.modelCustomizationConnectionSchema = void 0;
exports.modelUserConnectionSchema = exports.modelReviewResponseConnectionSchema = exports.modelWalletConnectionSchema = exports.modelMainCategoryConnectionSchema = exports.modelServicePackageConnectionSchema = exports.modelNicheServiceConnectionSchema = exports.servicePackageSchema = exports.modelProviderConnectionSchema = exports.nicheServiceSchema = exports.serviceImageSchema = exports.serviceVideoSchema = exports.serviceDiscountSchema = exports.modelSubCategoryConnectionSchema = exports.mainCategorySchema = exports.providerAwardSchema = exports.providerCertificationSchema = exports.providerAvailabilitySchema = exports.providerReportSchema = exports.providerNotificationSchema = exports.specializationSchema = exports.qualificationSchema = exports.certificationSchema = exports.verificationSchema = exports.userPreferenceSchema = exports.providerBookmarkSchema = exports.userReportSchema = exports.userInvoiceSchema = exports.userBookmarkSchema = exports.userNotificationSchema = exports.serviceReviewSchema = exports.customizationSchema = exports.expenseSchema = void 0;
// Generated by ts-to-zod
const zod_1 = require("zod");
const API_1 = require("./../src/API");
exports.createServicePromotionInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    description: zod_1.z.string(),
    startDate: zod_1.z.string(),
    endDate: zod_1.z.string(),
    discountPercentage: zod_1.z.number(),
    _version: zod_1.z.number().optional().nullable(),
    serviceServicePromotionsId: zod_1.z.string().optional().nullable(),
});
exports.modelAttributeTypesSchema = zod_1.z.nativeEnum(API_1.ModelAttributeTypes);
exports.modelSizeInputSchema = zod_1.z.object({
    ne: zod_1.z.number().optional().nullable(),
    eq: zod_1.z.number().optional().nullable(),
    le: zod_1.z.number().optional().nullable(),
    lt: zod_1.z.number().optional().nullable(),
    ge: zod_1.z.number().optional().nullable(),
    gt: zod_1.z.number().optional().nullable(),
    between: zod_1.z.array(zod_1.z.number().nullable()).optional().nullable(),
});
exports.modelFloatInputSchema = zod_1.z.object({
    ne: zod_1.z.number().optional().nullable(),
    eq: zod_1.z.number().optional().nullable(),
    le: zod_1.z.number().optional().nullable(),
    lt: zod_1.z.number().optional().nullable(),
    ge: zod_1.z.number().optional().nullable(),
    gt: zod_1.z.number().optional().nullable(),
    between: zod_1.z.array(zod_1.z.number().nullable()).optional().nullable(),
    attributeExists: zod_1.z.boolean().optional().nullable(),
    attributeType: exports.modelAttributeTypesSchema.optional().nullable(),
});
exports.modelBooleanInputSchema = zod_1.z.object({
    ne: zod_1.z.boolean().optional().nullable(),
    eq: zod_1.z.boolean().optional().nullable(),
    attributeExists: zod_1.z.boolean().optional().nullable(),
    attributeType: exports.modelAttributeTypesSchema.optional().nullable(),
});
exports.modelIDInputSchema = zod_1.z.object({
    ne: zod_1.z.string().optional().nullable(),
    eq: zod_1.z.string().optional().nullable(),
    le: zod_1.z.string().optional().nullable(),
    lt: zod_1.z.string().optional().nullable(),
    ge: zod_1.z.string().optional().nullable(),
    gt: zod_1.z.string().optional().nullable(),
    contains: zod_1.z.string().optional().nullable(),
    notContains: zod_1.z.string().optional().nullable(),
    between: zod_1.z.array(zod_1.z.string().nullable()).optional().nullable(),
    beginsWith: zod_1.z.string().optional().nullable(),
    attributeExists: zod_1.z.boolean().optional().nullable(),
    attributeType: exports.modelAttributeTypesSchema.optional().nullable(),
    size: exports.modelSizeInputSchema.optional().nullable(),
});
exports.genderSchema = zod_1.z.nativeEnum(API_1.Gender);
exports.accountTypeSchema = zod_1.z.nativeEnum(API_1.AccountType);
exports.notificationPreferenceSchema = zod_1.z.nativeEnum(API_1.NotificationPreference);
exports.locationSchema = zod_1.z.object({
    __typename: zod_1.z.literal("Location"),
    id: zod_1.z.string(),
    latitude: zod_1.z.number(),
    longitude: zod_1.z.number(),
    timestamp: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
});
exports.messageSchema = zod_1.z.object({
    __typename: zod_1.z.literal("Message"),
    id: zod_1.z.string(),
    sender: zod_1.z.string(),
    content: zod_1.z.string(),
    timestamp: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    teamMemberCommunicationLogId: zod_1.z.string().optional().nullable(),
});
exports.jobStatusSchema = zod_1.z.nativeEnum(API_1.JobStatus);
exports.bookingStatusSchema = zod_1.z.nativeEnum(API_1.BookingStatus);
exports.messageStatusSchema = zod_1.z.nativeEnum(API_1.MessageStatus);
exports.transactionTypeSchema = zod_1.z.nativeEnum(API_1.TransactionType);
exports.feedbackSchema = zod_1.z.object({
    __typename: zod_1.z.literal("Feedback"),
    id: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    userFeedbacksId: zod_1.z.string().optional().nullable(),
});
exports.pLMBRSubscriptionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("PLMBRSubscription"),
    id: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    userSubscriptionsId: zod_1.z.string().optional().nullable(),
});
exports.invoiceStatusSchema = zod_1.z.nativeEnum(API_1.InvoiceStatus);
exports.cardTypeSchema = zod_1.z.nativeEnum(API_1.CardType);
exports.notificationStatusSchema = zod_1.z.nativeEnum(API_1.NotificationStatus);
exports.verificationStatusSchema = zod_1.z.nativeEnum(API_1.VerificationStatus);
exports.providerHistorySchema = zod_1.z.object({
    __typename: zod_1.z.literal("ProviderHistory"),
    id: zod_1.z.string(),
    providerID: zod_1.z.string(),
    event: zod_1.z.string(),
    date: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    providerProviderHistoriesId: zod_1.z.string().optional().nullable(),
});
exports.updateServicePromotionInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    startDate: zod_1.z.string().optional().nullable(),
    endDate: zod_1.z.string().optional().nullable(),
    discountPercentage: zod_1.z.number().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceServicePromotionsId: zod_1.z.string().optional().nullable(),
});
exports.deleteServicePromotionInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createProviderReportInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    description: zod_1.z.string(),
    dateReported: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceProviderReportsId: zod_1.z.string().optional().nullable(),
    providerProviderReportsId: zod_1.z.string().optional().nullable(),
});
exports.modelStringInputSchema = zod_1.z.object({
    ne: zod_1.z.string().optional().nullable(),
    eq: zod_1.z.string().optional().nullable(),
    le: zod_1.z.string().optional().nullable(),
    lt: zod_1.z.string().optional().nullable(),
    ge: zod_1.z.string().optional().nullable(),
    gt: zod_1.z.string().optional().nullable(),
    contains: zod_1.z.string().optional().nullable(),
    notContains: zod_1.z.string().optional().nullable(),
    between: zod_1.z.array(zod_1.z.string().nullable()).optional().nullable(),
    beginsWith: zod_1.z.string().optional().nullable(),
    attributeExists: zod_1.z.boolean().optional().nullable(),
    attributeType: exports.modelAttributeTypesSchema.optional().nullable(),
    size: exports.modelSizeInputSchema.optional().nullable(),
});
exports.modelProviderReportConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    description: exports.modelStringInputSchema.optional().nullable(),
    dateReported: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderReportConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderReportConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderReportConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceProviderReportsId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderReportsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateProviderReportInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    dateReported: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceProviderReportsId: zod_1.z.string().optional().nullable(),
    providerProviderReportsId: zod_1.z.string().optional().nullable(),
});
exports.deleteProviderReportInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createUserReportInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    description: zod_1.z.string(),
    dateReported: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceUserReportsId: zod_1.z.string().optional().nullable(),
    userUserReportsId: zod_1.z.string().optional().nullable(),
});
exports.modelUserReportConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    description: exports.modelStringInputSchema.optional().nullable(),
    dateReported: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelUserReportConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserReportConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserReportConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceUserReportsId: exports.modelIDInputSchema.optional().nullable(),
    userUserReportsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateUserReportInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    dateReported: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceUserReportsId: zod_1.z.string().optional().nullable(),
    userUserReportsId: zod_1.z.string().optional().nullable(),
});
exports.deleteUserReportInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createUserInvoiceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    amount: zod_1.z.number(),
    dateIssued: zod_1.z.string(),
    dueDate: zod_1.z.string(),
    status: exports.invoiceStatusSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceUserInvoicesId: zod_1.z.string().optional().nullable(),
    userUserInvoicesId: zod_1.z.string().optional().nullable(),
});
exports.modelInvoiceStatusInputSchema = zod_1.z.object({
    eq: exports.invoiceStatusSchema.optional().nullable(),
    ne: exports.invoiceStatusSchema.optional().nullable(),
});
exports.modelUserInvoiceConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    amount: exports.modelFloatInputSchema.optional().nullable(),
    dateIssued: exports.modelStringInputSchema.optional().nullable(),
    dueDate: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelInvoiceStatusInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelUserInvoiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserInvoiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserInvoiceConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceUserInvoicesId: exports.modelIDInputSchema.optional().nullable(),
    userUserInvoicesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateUserInvoiceInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    amount: zod_1.z.number().optional().nullable(),
    dateIssued: zod_1.z.string().optional().nullable(),
    dueDate: zod_1.z.string().optional().nullable(),
    status: exports.invoiceStatusSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceUserInvoicesId: zod_1.z.string().optional().nullable(),
    userUserInvoicesId: zod_1.z.string().optional().nullable(),
});
exports.deleteUserInvoiceInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createProviderBookmarkInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    dateBookmarked: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceProviderBookmarksId: zod_1.z.string().optional().nullable(),
    providerProviderBookmarksId: zod_1.z.string().optional().nullable(),
    userProviderBookmarksId: zod_1.z.string().optional().nullable(),
});
exports.modelProviderBookmarkConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    dateBookmarked: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderBookmarkConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderBookmarkConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderBookmarkConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceProviderBookmarksId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderBookmarksId: exports.modelIDInputSchema.optional().nullable(),
    userProviderBookmarksId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateProviderBookmarkInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    dateBookmarked: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceProviderBookmarksId: zod_1.z.string().optional().nullable(),
    providerProviderBookmarksId: zod_1.z.string().optional().nullable(),
    userProviderBookmarksId: zod_1.z.string().optional().nullable(),
});
exports.deleteProviderBookmarkInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createUserBookmarkInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    dateBookmarked: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceUserBookmarksId: zod_1.z.string().optional().nullable(),
    userUserBookmarksId: zod_1.z.string().optional().nullable(),
});
exports.modelUserBookmarkConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    dateBookmarked: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelUserBookmarkConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserBookmarkConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserBookmarkConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceUserBookmarksId: exports.modelIDInputSchema.optional().nullable(),
    userUserBookmarksId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateUserBookmarkInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    dateBookmarked: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceUserBookmarksId: zod_1.z.string().optional().nullable(),
    userUserBookmarksId: zod_1.z.string().optional().nullable(),
});
exports.deleteUserBookmarkInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createProviderNotificationInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    content: zod_1.z.string(),
    dateSent: zod_1.z.string(),
    status: exports.notificationStatusSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceProviderNotificationsId: zod_1.z.string().optional().nullable(),
    providerProviderNotificationsId: zod_1.z.string().optional().nullable(),
});
exports.modelNotificationStatusInputSchema = zod_1.z.object({
    eq: exports.notificationStatusSchema.optional().nullable(),
    ne: exports.notificationStatusSchema.optional().nullable(),
});
exports.modelProviderNotificationConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    content: exports.modelStringInputSchema.optional().nullable(),
    dateSent: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelNotificationStatusInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderNotificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderNotificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderNotificationConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceProviderNotificationsId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderNotificationsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateProviderNotificationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    content: zod_1.z.string().optional().nullable(),
    dateSent: zod_1.z.string().optional().nullable(),
    status: exports.notificationStatusSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceProviderNotificationsId: zod_1.z.string().optional().nullable(),
    providerProviderNotificationsId: zod_1.z.string().optional().nullable(),
});
exports.deleteProviderNotificationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createUserNotificationInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    content: zod_1.z.string(),
    dateSent: zod_1.z.string(),
    status: exports.notificationStatusSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceUserNotificationsId: zod_1.z.string().optional().nullable(),
    userUserNotificationsId: zod_1.z.string().optional().nullable(),
});
exports.modelUserNotificationConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    content: exports.modelStringInputSchema.optional().nullable(),
    dateSent: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelNotificationStatusInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelUserNotificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserNotificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserNotificationConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceUserNotificationsId: exports.modelIDInputSchema.optional().nullable(),
    userUserNotificationsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateUserNotificationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    content: zod_1.z.string().optional().nullable(),
    dateSent: zod_1.z.string().optional().nullable(),
    status: exports.notificationStatusSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceUserNotificationsId: zod_1.z.string().optional().nullable(),
    userUserNotificationsId: zod_1.z.string().optional().nullable(),
});
exports.deleteUserNotificationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createServiceDiscountInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    discountPercentage: zod_1.z.number(),
    startDate: zod_1.z.string(),
    endDate: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceServiceDiscountsId: zod_1.z.string().optional().nullable(),
});
exports.modelServiceDiscountConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    discountPercentage: exports.modelFloatInputSchema.optional().nullable(),
    startDate: exports.modelStringInputSchema.optional().nullable(),
    endDate: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServiceDiscountConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceDiscountConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceDiscountConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceServiceDiscountsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateServiceDiscountInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    discountPercentage: zod_1.z.number().optional().nullable(),
    startDate: zod_1.z.string().optional().nullable(),
    endDate: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceServiceDiscountsId: zod_1.z.string().optional().nullable(),
});
exports.deleteServiceDiscountInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createProviderAvailabilityInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    startDate: zod_1.z.string(),
    endDate: zod_1.z.string(),
    isScheduled: zod_1.z.boolean().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceProviderAvailabilitiesId: zod_1.z.string().optional().nullable(),
    providerProviderAvailabilityId: zod_1.z.string().optional().nullable(),
});
exports.modelProviderAvailabilityConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    startDate: exports.modelStringInputSchema.optional().nullable(),
    endDate: exports.modelStringInputSchema.optional().nullable(),
    isScheduled: exports.modelBooleanInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderAvailabilityConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderAvailabilityConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderAvailabilityConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceProviderAvailabilitiesId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderAvailabilityId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateProviderAvailabilityInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    startDate: zod_1.z.string().optional().nullable(),
    endDate: zod_1.z.string().optional().nullable(),
    isScheduled: zod_1.z.boolean().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceProviderAvailabilitiesId: zod_1.z.string().optional().nullable(),
    providerProviderAvailabilityId: zod_1.z.string().optional().nullable(),
});
exports.deleteProviderAvailabilityInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createUserPreferenceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    preferenceType: zod_1.z.string(),
    preferenceValue: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceUserPreferencesId: zod_1.z.string().optional().nullable(),
    userUserPreferenceId: zod_1.z.string().optional().nullable(),
});
exports.modelUserPreferenceConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    preferenceType: exports.modelStringInputSchema.optional().nullable(),
    preferenceValue: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelUserPreferenceConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserPreferenceConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserPreferenceConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceUserPreferencesId: exports.modelIDInputSchema.optional().nullable(),
    userUserPreferenceId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateUserPreferenceInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    preferenceType: zod_1.z.string().optional().nullable(),
    preferenceValue: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceUserPreferencesId: zod_1.z.string().optional().nullable(),
    userUserPreferenceId: zod_1.z.string().optional().nullable(),
});
exports.deleteUserPreferenceInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createProviderCertificationInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    certificationName: zod_1.z.string(),
    issuedBy: zod_1.z.string(),
    validFrom: zod_1.z.string(),
    validUntil: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceProviderCertificationsId: zod_1.z.string().optional().nullable(),
    providerProviderCertificationId: zod_1.z.string().optional().nullable(),
});
exports.modelProviderCertificationConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    certificationName: exports.modelStringInputSchema.optional().nullable(),
    issuedBy: exports.modelStringInputSchema.optional().nullable(),
    validFrom: exports.modelStringInputSchema.optional().nullable(),
    validUntil: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderCertificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderCertificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderCertificationConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceProviderCertificationsId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderCertificationId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateProviderCertificationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    certificationName: zod_1.z.string().optional().nullable(),
    issuedBy: zod_1.z.string().optional().nullable(),
    validFrom: zod_1.z.string().optional().nullable(),
    validUntil: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceProviderCertificationsId: zod_1.z.string().optional().nullable(),
    providerProviderCertificationId: zod_1.z.string().optional().nullable(),
});
exports.deleteProviderCertificationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createServiceVideoInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    videoURL: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceServiceVideosId: zod_1.z.string().optional().nullable(),
});
exports.modelServiceVideoConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    videoURL: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServiceVideoConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceVideoConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceVideoConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceServiceVideosId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateServiceVideoInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    videoURL: zod_1.z.string().optional().nullable(),
    description: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceServiceVideosId: zod_1.z.string().optional().nullable(),
});
exports.deleteServiceVideoInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createServiceImageInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    imageURL: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceServiceImagesId: zod_1.z.string().optional().nullable(),
});
exports.modelServiceImageConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    imageURL: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServiceImageConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceImageConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceImageConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceServiceImagesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateServiceImageInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    imageURL: zod_1.z.string().optional().nullable(),
    description: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceServiceImagesId: zod_1.z.string().optional().nullable(),
});
exports.deleteServiceImageInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createServiceReviewInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    rating: zod_1.z.number(),
    comment: zod_1.z.string(),
    date: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceServiceReviewsId: zod_1.z.string().optional().nullable(),
    userServiceReviewsId: zod_1.z.string().optional().nullable(),
});
exports.modelIntInputSchema = zod_1.z.object({
    ne: zod_1.z.number().optional().nullable(),
    eq: zod_1.z.number().optional().nullable(),
    le: zod_1.z.number().optional().nullable(),
    lt: zod_1.z.number().optional().nullable(),
    ge: zod_1.z.number().optional().nullable(),
    gt: zod_1.z.number().optional().nullable(),
    between: zod_1.z.array(zod_1.z.number().nullable()).optional().nullable(),
    attributeExists: zod_1.z.boolean().optional().nullable(),
    attributeType: exports.modelAttributeTypesSchema.optional().nullable(),
});
exports.modelServiceReviewConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    rating: exports.modelIntInputSchema.optional().nullable(),
    comment: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServiceReviewConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceReviewConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceReviewConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceServiceReviewsId: exports.modelIDInputSchema.optional().nullable(),
    userServiceReviewsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateServiceReviewInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    rating: zod_1.z.number().optional().nullable(),
    comment: zod_1.z.string().optional().nullable(),
    date: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceServiceReviewsId: zod_1.z.string().optional().nullable(),
    userServiceReviewsId: zod_1.z.string().optional().nullable(),
});
exports.deleteServiceReviewInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createAIDiagnosticsInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    diagnosticData: zod_1.z.string(),
    date: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    aIChatBotDiagnosticsId: zod_1.z.string().optional().nullable(),
    serviceAiDiagnosticsId: zod_1.z.string().optional().nullable(),
});
exports.modelAIDiagnosticsConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    diagnosticData: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelAIDiagnosticsConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelAIDiagnosticsConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelAIDiagnosticsConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    aIChatBotDiagnosticsId: exports.modelIDInputSchema.optional().nullable(),
    serviceAiDiagnosticsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateAIDiagnosticsInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    diagnosticData: zod_1.z.string().optional().nullable(),
    date: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    aIChatBotDiagnosticsId: zod_1.z.string().optional().nullable(),
    serviceAiDiagnosticsId: zod_1.z.string().optional().nullable(),
});
exports.deleteAIDiagnosticsInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createCustomizationInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    customizationType: zod_1.z.string(),
    customizationValue: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceCustomizationsId: zod_1.z.string().optional().nullable(),
    userCustomizationsId: zod_1.z.string().optional().nullable(),
});
exports.modelCustomizationConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    customizationType: exports.modelStringInputSchema.optional().nullable(),
    customizationValue: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelCustomizationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelCustomizationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelCustomizationConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceCustomizationsId: exports.modelIDInputSchema.optional().nullable(),
    userCustomizationsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateCustomizationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    customizationType: zod_1.z.string().optional().nullable(),
    customizationValue: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceCustomizationsId: zod_1.z.string().optional().nullable(),
    userCustomizationsId: zod_1.z.string().optional().nullable(),
});
exports.deleteCustomizationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createExpenseInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    amount: zod_1.z.number(),
    description: zod_1.z.string(),
    date: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceExpensesId: zod_1.z.string().optional().nullable(),
    providerExpensesId: zod_1.z.string().optional().nullable(),
    userExpensesId: zod_1.z.string().optional().nullable(),
});
exports.modelExpenseConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    amount: exports.modelFloatInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelExpenseConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelExpenseConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelExpenseConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceExpensesId: exports.modelIDInputSchema.optional().nullable(),
    providerExpensesId: exports.modelIDInputSchema.optional().nullable(),
    userExpensesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateExpenseInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    amount: zod_1.z.number().optional().nullable(),
    description: zod_1.z.string().optional().nullable(),
    date: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceExpensesId: zod_1.z.string().optional().nullable(),
    providerExpensesId: zod_1.z.string().optional().nullable(),
    userExpensesId: zod_1.z.string().optional().nullable(),
});
exports.deleteExpenseInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createFavoriteProviderInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    dateAdded: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceFavoriteProvidersId: zod_1.z.string().optional().nullable(),
    providerFavoriteProvidersId: zod_1.z.string().optional().nullable(),
    userFavoriteProvidersId: zod_1.z.string().optional().nullable(),
});
exports.modelFavoriteProviderConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    dateAdded: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelFavoriteProviderConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelFavoriteProviderConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelFavoriteProviderConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceFavoriteProvidersId: exports.modelIDInputSchema.optional().nullable(),
    providerFavoriteProvidersId: exports.modelIDInputSchema.optional().nullable(),
    userFavoriteProvidersId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateFavoriteProviderInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    dateAdded: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceFavoriteProvidersId: zod_1.z.string().optional().nullable(),
    providerFavoriteProvidersId: zod_1.z.string().optional().nullable(),
    userFavoriteProvidersId: zod_1.z.string().optional().nullable(),
});
exports.deleteFavoriteProviderInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createUserHistoryInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    action: zod_1.z.string(),
    date: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceUserHistoriesId: zod_1.z.string().optional().nullable(),
    userUserHistoriesId: zod_1.z.string().optional().nullable(),
});
exports.modelUserHistoryConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    action: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelUserHistoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserHistoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserHistoryConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceUserHistoriesId: exports.modelIDInputSchema.optional().nullable(),
    userUserHistoriesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateUserHistoryInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    action: zod_1.z.string().optional().nullable(),
    date: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceUserHistoriesId: zod_1.z.string().optional().nullable(),
    userUserHistoriesId: zod_1.z.string().optional().nullable(),
});
exports.deleteUserHistoryInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createProviderAwardInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    awardName: zod_1.z.string(),
    awardedBy: zod_1.z.string(),
    dateAwarded: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceProviderAwardsId: zod_1.z.string().optional().nullable(),
    providerProviderAwardsId: zod_1.z.string().optional().nullable(),
});
exports.modelProviderAwardConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    awardName: exports.modelStringInputSchema.optional().nullable(),
    awardedBy: exports.modelStringInputSchema.optional().nullable(),
    dateAwarded: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderAwardConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderAwardConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderAwardConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceProviderAwardsId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderAwardsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateProviderAwardInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    awardName: zod_1.z.string().optional().nullable(),
    awardedBy: zod_1.z.string().optional().nullable(),
    dateAwarded: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceProviderAwardsId: zod_1.z.string().optional().nullable(),
    providerProviderAwardsId: zod_1.z.string().optional().nullable(),
});
exports.deleteProviderAwardInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createReferralInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    dateReferred: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    rewardReferralsId: zod_1.z.string().optional().nullable(),
    serviceReferralsId: zod_1.z.string().optional().nullable(),
    providerProviderReferralsId: zod_1.z.string().optional().nullable(),
    userReferralsId: zod_1.z.string().optional().nullable(),
});
exports.modelReferralConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    dateReferred: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelReferralConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelReferralConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelReferralConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    rewardReferralsId: exports.modelIDInputSchema.optional().nullable(),
    serviceReferralsId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderReferralsId: exports.modelIDInputSchema.optional().nullable(),
    userReferralsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateReferralInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    dateReferred: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    rewardReferralsId: zod_1.z.string().optional().nullable(),
    serviceReferralsId: zod_1.z.string().optional().nullable(),
    providerProviderReferralsId: zod_1.z.string().optional().nullable(),
    userReferralsId: zod_1.z.string().optional().nullable(),
});
exports.deleteReferralInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createTipInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    amount: zod_1.z.number(),
    date: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    providerProviderTipsId: zod_1.z.string().optional().nullable(),
    userTipsId: zod_1.z.string().optional().nullable(),
});
exports.modelTipConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    amount: exports.modelFloatInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelTipConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelTipConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelTipConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    providerProviderTipsId: exports.modelIDInputSchema.optional().nullable(),
    userTipsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateTipInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    amount: zod_1.z.number().optional().nullable(),
    date: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerProviderTipsId: zod_1.z.string().optional().nullable(),
    userTipsId: zod_1.z.string().optional().nullable(),
});
exports.deleteTipInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createPaymentMethodInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    cardNumber: zod_1.z.string(),
    expiryDate: zod_1.z.string(),
    cardType: exports.cardTypeSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    userPaymentMethodsId: zod_1.z.string().optional().nullable(),
});
exports.modelCardTypeInputSchema = zod_1.z.object({
    eq: exports.cardTypeSchema.optional().nullable(),
    ne: exports.cardTypeSchema.optional().nullable(),
});
exports.modelPaymentMethodConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    cardNumber: exports.modelStringInputSchema.optional().nullable(),
    expiryDate: exports.modelStringInputSchema.optional().nullable(),
    cardType: exports.modelCardTypeInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelPaymentMethodConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelPaymentMethodConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelPaymentMethodConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    userPaymentMethodsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updatePaymentMethodInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    cardNumber: zod_1.z.string().optional().nullable(),
    expiryDate: zod_1.z.string().optional().nullable(),
    cardType: exports.cardTypeSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    userPaymentMethodsId: zod_1.z.string().optional().nullable(),
});
exports.deletePaymentMethodInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createInvoiceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    amount: zod_1.z.number(),
    dateIssued: zod_1.z.string(),
    dueDate: zod_1.z.string(),
    status: exports.invoiceStatusSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerProviderInvoicesId: zod_1.z.string().optional().nullable(),
    userInvoicesId: zod_1.z.string().optional().nullable(),
});
exports.modelInvoiceConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    amount: exports.modelFloatInputSchema.optional().nullable(),
    dateIssued: exports.modelStringInputSchema.optional().nullable(),
    dueDate: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelInvoiceStatusInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelInvoiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelInvoiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelInvoiceConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    providerProviderInvoicesId: exports.modelIDInputSchema.optional().nullable(),
    userInvoicesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateInvoiceInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    amount: zod_1.z.number().optional().nullable(),
    dateIssued: zod_1.z.string().optional().nullable(),
    dueDate: zod_1.z.string().optional().nullable(),
    status: exports.invoiceStatusSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerProviderInvoicesId: zod_1.z.string().optional().nullable(),
    userInvoicesId: zod_1.z.string().optional().nullable(),
});
exports.deleteInvoiceInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createContractInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    startDate: zod_1.z.string(),
    endDate: zod_1.z.string(),
    terms: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceContractsId: zod_1.z.string().optional().nullable(),
    providerProviderContractsId: zod_1.z.string().optional().nullable(),
    userContractsId: zod_1.z.string().optional().nullable(),
});
exports.modelContractConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    startDate: exports.modelStringInputSchema.optional().nullable(),
    endDate: exports.modelStringInputSchema.optional().nullable(),
    terms: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelContractConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelContractConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelContractConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceContractsId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderContractsId: exports.modelIDInputSchema.optional().nullable(),
    userContractsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateContractInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    startDate: zod_1.z.string().optional().nullable(),
    endDate: zod_1.z.string().optional().nullable(),
    terms: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceContractsId: zod_1.z.string().optional().nullable(),
    providerProviderContractsId: zod_1.z.string().optional().nullable(),
    userContractsId: zod_1.z.string().optional().nullable(),
});
exports.deleteContractInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createNicheServiceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    serviceName: zod_1.z.string(),
    description: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelNicheServiceConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    serviceName: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelNicheServiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelNicheServiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelNicheServiceConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.updateNicheServiceInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    serviceName: zod_1.z.string().optional().nullable(),
    description: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deleteNicheServiceInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createServicePackageInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    packageName: zod_1.z.string(),
    discount: zod_1.z.number(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelServicePackageConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    packageName: exports.modelStringInputSchema.optional().nullable(),
    discount: exports.modelFloatInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServicePackageConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServicePackageConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServicePackageConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.updateServicePackageInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    packageName: zod_1.z.string().optional().nullable(),
    discount: zod_1.z.number().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deleteServicePackageInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createRewardInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    rewardName: zod_1.z.string(),
    description: zod_1.z.string(),
    value: zod_1.z.number(),
    _version: zod_1.z.number().optional().nullable(),
    loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
    userRewardsId: zod_1.z.string().optional().nullable(),
});
exports.modelRewardConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    rewardName: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    value: exports.modelFloatInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelRewardConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelRewardConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelRewardConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    loyaltyProgramRewardsId: exports.modelIDInputSchema.optional().nullable(),
    userRewardsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateRewardInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    rewardName: zod_1.z.string().optional().nullable(),
    description: zod_1.z.string().optional().nullable(),
    value: zod_1.z.number().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
    userRewardsId: zod_1.z.string().optional().nullable(),
});
exports.deleteRewardInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createLoyaltyProgramInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    points: zod_1.z.number(),
    _version: zod_1.z.number().optional().nullable(),
    userLoyaltyProgramsId: zod_1.z.string().optional().nullable(),
});
exports.modelLoyaltyProgramConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    points: exports.modelIntInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelLoyaltyProgramConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelLoyaltyProgramConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelLoyaltyProgramConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    userLoyaltyProgramsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateLoyaltyProgramInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    points: zod_1.z.number().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    userLoyaltyProgramsId: zod_1.z.string().optional().nullable(),
});
exports.deleteLoyaltyProgramInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createVerificationInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    verificationCode: zod_1.z.string(),
    dateSent: zod_1.z.string(),
    status: exports.verificationStatusSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    userVerificationsId: zod_1.z.string().optional().nullable(),
});
exports.modelVerificationStatusInputSchema = zod_1.z.object({
    eq: exports.verificationStatusSchema.optional().nullable(),
    ne: exports.verificationStatusSchema.optional().nullable(),
});
exports.modelVerificationConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    verificationCode: exports.modelStringInputSchema.optional().nullable(),
    dateSent: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelVerificationStatusInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelVerificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelVerificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelVerificationConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    userVerificationsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateVerificationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    verificationCode: zod_1.z.string().optional().nullable(),
    dateSent: zod_1.z.string().optional().nullable(),
    status: exports.verificationStatusSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    userVerificationsId: zod_1.z.string().optional().nullable(),
});
exports.deleteVerificationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createAnalyticsInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    userCount: zod_1.z.number(),
    providerCount: zod_1.z.number(),
    serviceCount: zod_1.z.number(),
    date: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelAnalyticsConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    userCount: exports.modelIntInputSchema.optional().nullable(),
    providerCount: exports.modelIntInputSchema.optional().nullable(),
    serviceCount: exports.modelIntInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelAnalyticsConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelAnalyticsConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelAnalyticsConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.analyticsSchema = zod_1.z.object({
    __typename: zod_1.z.literal("Analytics"),
    id: zod_1.z.string(),
    userCount: zod_1.z.number(),
    providerCount: zod_1.z.number(),
    serviceCount: zod_1.z.number(),
    date: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
});
exports.updateAnalyticsInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    userCount: zod_1.z.number().optional().nullable(),
    providerCount: zod_1.z.number().optional().nullable(),
    serviceCount: zod_1.z.number().optional().nullable(),
    date: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deleteAnalyticsInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createPromoCodeInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    code: zod_1.z.string(),
    discount: zod_1.z.number(),
    validFrom: zod_1.z.string(),
    validUntil: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelPromoCodeConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    code: exports.modelStringInputSchema.optional().nullable(),
    discount: exports.modelFloatInputSchema.optional().nullable(),
    validFrom: exports.modelStringInputSchema.optional().nullable(),
    validUntil: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelPromoCodeConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelPromoCodeConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelPromoCodeConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.promoCodeSchema = zod_1.z.object({
    __typename: zod_1.z.literal("PromoCode"),
    id: zod_1.z.string(),
    code: zod_1.z.string(),
    discount: zod_1.z.number(),
    validFrom: zod_1.z.string(),
    validUntil: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
});
exports.updatePromoCodeInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    code: zod_1.z.string().optional().nullable(),
    discount: zod_1.z.number().optional().nullable(),
    validFrom: zod_1.z.string().optional().nullable(),
    validUntil: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deletePromoCodeInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createReportInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    reportedEntity: zod_1.z.string(),
    description: zod_1.z.string(),
    dateReported: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    userReportsId: zod_1.z.string().optional().nullable(),
});
exports.modelReportConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    reportedEntity: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    dateReported: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelReportConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelReportConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelReportConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    userReportsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateReportInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    reportedEntity: zod_1.z.string().optional().nullable(),
    description: zod_1.z.string().optional().nullable(),
    dateReported: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    userReportsId: zod_1.z.string().optional().nullable(),
});
exports.deleteReportInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createJobTrackingInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    status: exports.jobStatusSchema.optional().nullable(),
    startDate: zod_1.z.string(),
    endDate: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceJobTrackingsId: zod_1.z.string().optional().nullable(),
    providerJobTrackingId: zod_1.z.string().optional().nullable(),
    userJobTrackingsId: zod_1.z.string().optional().nullable(),
});
exports.modelJobStatusInputSchema = zod_1.z.object({
    eq: exports.jobStatusSchema.optional().nullable(),
    ne: exports.jobStatusSchema.optional().nullable(),
});
exports.modelJobTrackingConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    status: exports.modelJobStatusInputSchema.optional().nullable(),
    startDate: exports.modelStringInputSchema.optional().nullable(),
    endDate: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelJobTrackingConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelJobTrackingConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelJobTrackingConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceJobTrackingsId: exports.modelIDInputSchema.optional().nullable(),
    providerJobTrackingId: exports.modelIDInputSchema.optional().nullable(),
    userJobTrackingsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateJobTrackingInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    status: exports.jobStatusSchema.optional().nullable(),
    startDate: zod_1.z.string().optional().nullable(),
    endDate: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceJobTrackingsId: zod_1.z.string().optional().nullable(),
    providerJobTrackingId: zod_1.z.string().optional().nullable(),
    userJobTrackingsId: zod_1.z.string().optional().nullable(),
});
exports.deleteJobTrackingInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createAIChatLogInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    message: zod_1.z.string(),
    response: zod_1.z.string(),
    date: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    aIChatBotChatLogsId: zod_1.z.string().optional().nullable(),
    userAiChatLogsId: zod_1.z.string().optional().nullable(),
});
exports.modelAIChatLogConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    message: exports.modelStringInputSchema.optional().nullable(),
    response: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelAIChatLogConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelAIChatLogConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelAIChatLogConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    aIChatBotChatLogsId: exports.modelIDInputSchema.optional().nullable(),
    userAiChatLogsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateAIChatLogInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    message: zod_1.z.string().optional().nullable(),
    response: zod_1.z.string().optional().nullable(),
    date: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    aIChatBotChatLogsId: zod_1.z.string().optional().nullable(),
    userAiChatLogsId: zod_1.z.string().optional().nullable(),
});
exports.deleteAIChatLogInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createAIChatBotInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    name: zod_1.z.string(),
    version: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    userAiChatBotsId: zod_1.z.string().optional().nullable(),
});
exports.modelAIChatBotConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    name: exports.modelStringInputSchema.optional().nullable(),
    version: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelAIChatBotConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelAIChatBotConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelAIChatBotConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    userAiChatBotsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateAIChatBotInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string().optional().nullable(),
    version: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    userAiChatBotsId: zod_1.z.string().optional().nullable(),
});
exports.deleteAIChatBotInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createMainCategoryInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    name: zod_1.z.string(),
    descrption: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelMainCategoryConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    name: exports.modelStringInputSchema.optional().nullable(),
    descrption: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelMainCategoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelMainCategoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelMainCategoryConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.updateMainCategoryInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string().optional().nullable(),
    descrption: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deleteMainCategoryInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createSubCategoryInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    name: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
});
exports.modelSubCategoryConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    name: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubCategoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubCategoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelSubCategoryConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    mainCategorySubCategoriesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateSubCategoryInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string().optional().nullable(),
    description: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
});
exports.deleteSubCategoryInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createPLMBRSubscriptionInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    userSubscriptionsId: zod_1.z.string().optional().nullable(),
});
exports.modelPLMBRSubscriptionConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    and: zod_1.z
        .array(exports.modelPLMBRSubscriptionConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelPLMBRSubscriptionConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelPLMBRSubscriptionConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    userSubscriptionsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updatePLMBRSubscriptionInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    userSubscriptionsId: zod_1.z.string().optional().nullable(),
});
exports.deletePLMBRSubscriptionInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createUserSettingsInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelUserSettingsConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    and: zod_1.z
        .array(exports.modelUserSettingsConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserSettingsConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserSettingsConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.userSettingsSchema = zod_1.z.object({
    __typename: zod_1.z.literal("UserSettings"),
    id: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
});
exports.updateUserSettingsInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deleteUserSettingsInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createProviderSettingsInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelProviderSettingsConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    and: zod_1.z
        .array(exports.modelProviderSettingsConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderSettingsConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderSettingsConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.providerSettingsSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ProviderSettings"),
    id: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
});
exports.updateProviderSettingsInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deleteProviderSettingsInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createPortfolioInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelPortfolioConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    and: zod_1.z
        .array(exports.modelPortfolioConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelPortfolioConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelPortfolioConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.portfolioSchema = zod_1.z.object({
    __typename: zod_1.z.literal("Portfolio"),
    id: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
});
exports.updatePortfolioInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deletePortfolioInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createServiceVariantInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelServiceVariantConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    and: zod_1.z
        .array(exports.modelServiceVariantConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceVariantConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceVariantConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.serviceVariantSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ServiceVariant"),
    id: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
});
exports.updateServiceVariantInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deleteServiceVariantInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createServiceHighlightInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelServiceHighlightConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    and: zod_1.z
        .array(exports.modelServiceHighlightConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceHighlightConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceHighlightConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.serviceHighlightSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ServiceHighlight"),
    id: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
});
exports.updateServiceHighlightInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deleteServiceHighlightInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createServiceTagInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelServiceTagConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    and: zod_1.z
        .array(exports.modelServiceTagConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceTagConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceTagConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.serviceTagSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ServiceTag"),
    id: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
});
exports.updateServiceTagInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deleteServiceTagInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createServiceFAQInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelServiceFAQConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    and: zod_1.z
        .array(exports.modelServiceFAQConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceFAQConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceFAQConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.serviceFAQSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ServiceFAQ"),
    id: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
});
exports.updateServiceFAQInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deleteServiceFAQInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createFeedbackInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    userFeedbacksId: zod_1.z.string().optional().nullable(),
});
exports.modelFeedbackConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    and: zod_1.z
        .array(exports.modelFeedbackConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelFeedbackConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelFeedbackConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    userFeedbacksId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateFeedbackInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    userFeedbacksId: zod_1.z.string().optional().nullable(),
});
exports.deleteFeedbackInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.equipmentCategorySchema = zod_1.z.nativeEnum(API_1.EquipmentCategory);
exports.equipmentAvailabilityStatusSchema = zod_1.z.nativeEnum(API_1.EquipmentAvailabilityStatus);
exports.modelEquipmentCategoryInputSchema = zod_1.z.object({
    eq: exports.equipmentCategorySchema.optional().nullable(),
    ne: exports.equipmentCategorySchema.optional().nullable(),
});
exports.modelEquipmentAvailabilityStatusInputSchema = zod_1.z.object({
    eq: exports.equipmentAvailabilityStatusSchema.optional().nullable(),
    ne: exports.equipmentAvailabilityStatusSchema.optional().nullable(),
});
exports.modelEquipmentConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    providerID: exports.modelIDInputSchema.optional().nullable(),
    name: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    category: exports.modelEquipmentCategoryInputSchema.optional().nullable(),
    availabilityStatus: exports.modelEquipmentAvailabilityStatusInputSchema
        .optional()
        .nullable(),
    purchaseDate: exports.modelStringInputSchema.optional().nullable(),
    maintenanceDate: exports.modelStringInputSchema.optional().nullable(),
    image: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelEquipmentConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelEquipmentConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelEquipmentConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.equipmentSchema = zod_1.z.object({
    __typename: zod_1.z.literal("Equipment"),
    id: zod_1.z.string(),
    providerID: zod_1.z.string(),
    name: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    category: exports.equipmentCategorySchema.optional().nullable(),
    availabilityStatus: exports.equipmentAvailabilityStatusSchema.optional().nullable(),
    purchaseDate: zod_1.z.string().optional().nullable(),
    maintenanceDate: zod_1.z.string().optional().nullable(),
    image: zod_1.z.string().optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
});
exports.updateEquipmentInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    providerID: zod_1.z.string().optional().nullable(),
    name: zod_1.z.string().optional().nullable(),
    description: zod_1.z.string().optional().nullable(),
    category: exports.equipmentCategorySchema.optional().nullable(),
    availabilityStatus: exports.equipmentAvailabilityStatusSchema.optional().nullable(),
    purchaseDate: zod_1.z.string().optional().nullable(),
    maintenanceDate: zod_1.z.string().optional().nullable(),
    image: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deleteEquipmentInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createWalletInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    ownerID: zod_1.z.string(),
    balance: zod_1.z.number(),
    currency: zod_1.z.string(),
    lastUpdated: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelWalletConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    ownerID: exports.modelIDInputSchema.optional().nullable(),
    balance: exports.modelFloatInputSchema.optional().nullable(),
    currency: exports.modelStringInputSchema.optional().nullable(),
    lastUpdated: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelWalletConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelWalletConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelWalletConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.updateWalletInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    ownerID: zod_1.z.string().optional().nullable(),
    balance: zod_1.z.number().optional().nullable(),
    currency: zod_1.z.string().optional().nullable(),
    lastUpdated: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deleteWalletInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createTransactionInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    amount: zod_1.z.number(),
    type: exports.transactionTypeSchema.optional().nullable(),
    description: zod_1.z.string().optional().nullable(),
    date: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    walletTransactionsId: zod_1.z.string().optional().nullable(),
    userTransactionsId: zod_1.z.string().optional().nullable(),
});
exports.modelTransactionTypeInputSchema = zod_1.z.object({
    eq: exports.transactionTypeSchema.optional().nullable(),
    ne: exports.transactionTypeSchema.optional().nullable(),
});
exports.modelTransactionConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    amount: exports.modelFloatInputSchema.optional().nullable(),
    type: exports.modelTransactionTypeInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelTransactionConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelTransactionConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelTransactionConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    walletTransactionsId: exports.modelIDInputSchema.optional().nullable(),
    userTransactionsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateTransactionInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    amount: zod_1.z.number().optional().nullable(),
    type: exports.transactionTypeSchema.optional().nullable(),
    description: zod_1.z.string().optional().nullable(),
    date: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    walletTransactionsId: zod_1.z.string().optional().nullable(),
    userTransactionsId: zod_1.z.string().optional().nullable(),
});
exports.deleteTransactionInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createReviewInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    rating: zod_1.z.number(),
    comment: zod_1.z.string().optional().nullable(),
    date: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    serviceReviewsId: zod_1.z.string().optional().nullable(),
    providerReviewsId: zod_1.z.string().optional().nullable(),
    userReviewsId: zod_1.z.string().optional().nullable(),
    reviewResponseId: zod_1.z.string().optional().nullable(),
});
exports.modelReviewConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    rating: exports.modelIntInputSchema.optional().nullable(),
    comment: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelReviewConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelReviewConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelReviewConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceReviewsId: exports.modelIDInputSchema.optional().nullable(),
    providerReviewsId: exports.modelIDInputSchema.optional().nullable(),
    userReviewsId: exports.modelIDInputSchema.optional().nullable(),
    reviewResponseId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateReviewInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    rating: zod_1.z.number().optional().nullable(),
    comment: zod_1.z.string().optional().nullable(),
    date: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceReviewsId: zod_1.z.string().optional().nullable(),
    providerReviewsId: zod_1.z.string().optional().nullable(),
    userReviewsId: zod_1.z.string().optional().nullable(),
    reviewResponseId: zod_1.z.string().optional().nullable(),
});
exports.deleteReviewInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createReviewResponseInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    responseText: zod_1.z.string(),
    responseDate: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    reviewResponseReviewId: zod_1.z.string().optional().nullable(),
});
exports.modelReviewResponseConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    responseText: exports.modelStringInputSchema.optional().nullable(),
    responseDate: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelReviewResponseConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelReviewResponseConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelReviewResponseConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    reviewResponseReviewId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateReviewResponseInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    responseText: zod_1.z.string().optional().nullable(),
    responseDate: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    reviewResponseReviewId: zod_1.z.string().optional().nullable(),
});
exports.deleteReviewResponseInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createMessageThreadInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    lastMessageDate: zod_1.z.string().optional().nullable(),
    lastMessageContent: zod_1.z.string().optional().nullable(),
    status: exports.messageStatusSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerProviderMessagesId: zod_1.z.string().optional().nullable(),
    userMessagesId: zod_1.z.string().optional().nullable(),
});
exports.modelMessageStatusInputSchema = zod_1.z.object({
    eq: exports.messageStatusSchema.optional().nullable(),
    ne: exports.messageStatusSchema.optional().nullable(),
});
exports.modelMessageThreadConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    lastMessageDate: exports.modelStringInputSchema.optional().nullable(),
    lastMessageContent: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelMessageStatusInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelMessageThreadConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelMessageThreadConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelMessageThreadConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    providerProviderMessagesId: exports.modelIDInputSchema.optional().nullable(),
    userMessagesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateMessageThreadInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    lastMessageDate: zod_1.z.string().optional().nullable(),
    lastMessageContent: zod_1.z.string().optional().nullable(),
    status: exports.messageStatusSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerProviderMessagesId: zod_1.z.string().optional().nullable(),
    userMessagesId: zod_1.z.string().optional().nullable(),
});
exports.deleteMessageThreadInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createMessageContentInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    sender: zod_1.z.string().optional().nullable(),
    content: zod_1.z.string(),
    timestamp: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    messageThreadMessagesId: zod_1.z.string().optional().nullable(),
});
exports.modelMessageContentConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    sender: exports.modelStringInputSchema.optional().nullable(),
    content: exports.modelStringInputSchema.optional().nullable(),
    timestamp: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelMessageContentConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelMessageContentConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelMessageContentConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    messageThreadMessagesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateMessageContentInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    sender: zod_1.z.string().optional().nullable(),
    content: zod_1.z.string().optional().nullable(),
    timestamp: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    messageThreadMessagesId: zod_1.z.string().optional().nullable(),
});
exports.deleteMessageContentInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createBookingInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    date: zod_1.z.string(),
    startTime: zod_1.z.string(),
    endTime: zod_1.z.string(),
    status: exports.bookingStatusSchema.optional().nullable(),
    location: zod_1.z.string().optional().nullable(),
    notes: zod_1.z.string().optional().nullable(),
    price: zod_1.z.number(),
    isInstantBooking: zod_1.z.boolean().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceBookingsId: zod_1.z.string().optional().nullable(),
    providerProviderBookingsId: zod_1.z.string().optional().nullable(),
    userBookingsId: zod_1.z.string().optional().nullable(),
});
exports.modelBookingStatusInputSchema = zod_1.z.object({
    eq: exports.bookingStatusSchema.optional().nullable(),
    ne: exports.bookingStatusSchema.optional().nullable(),
});
exports.modelBookingConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    date: exports.modelStringInputSchema.optional().nullable(),
    startTime: exports.modelStringInputSchema.optional().nullable(),
    endTime: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelBookingStatusInputSchema.optional().nullable(),
    location: exports.modelStringInputSchema.optional().nullable(),
    notes: exports.modelStringInputSchema.optional().nullable(),
    price: exports.modelFloatInputSchema.optional().nullable(),
    isInstantBooking: exports.modelBooleanInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelBookingConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelBookingConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelBookingConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceBookingsId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderBookingsId: exports.modelIDInputSchema.optional().nullable(),
    userBookingsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateBookingInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    date: zod_1.z.string().optional().nullable(),
    startTime: zod_1.z.string().optional().nullable(),
    endTime: zod_1.z.string().optional().nullable(),
    status: exports.bookingStatusSchema.optional().nullable(),
    location: zod_1.z.string().optional().nullable(),
    notes: zod_1.z.string().optional().nullable(),
    price: zod_1.z.number().optional().nullable(),
    isInstantBooking: zod_1.z.boolean().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    serviceBookingsId: zod_1.z.string().optional().nullable(),
    providerProviderBookingsId: zod_1.z.string().optional().nullable(),
    userBookingsId: zod_1.z.string().optional().nullable(),
});
exports.deleteBookingInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createTeamMemberInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    name: zod_1.z.string(),
    role: zod_1.z.string().optional().nullable(),
    jobSiteDuration: zod_1.z.string().optional().nullable(),
    providerID: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    providerTeamMembersId: zod_1.z.string().optional().nullable(),
    teamMemberCurrentLocationId: zod_1.z.string().optional().nullable(),
});
exports.modelTeamMemberConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    name: exports.modelStringInputSchema.optional().nullable(),
    role: exports.modelStringInputSchema.optional().nullable(),
    jobSiteDuration: exports.modelStringInputSchema.optional().nullable(),
    providerID: exports.modelIDInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelTeamMemberConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelTeamMemberConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelTeamMemberConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    providerTeamMembersId: exports.modelIDInputSchema.optional().nullable(),
    teamMemberCurrentLocationId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateTeamMemberInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string().optional().nullable(),
    role: zod_1.z.string().optional().nullable(),
    jobSiteDuration: zod_1.z.string().optional().nullable(),
    providerID: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerTeamMembersId: zod_1.z.string().optional().nullable(),
    teamMemberCurrentLocationId: zod_1.z.string().optional().nullable(),
});
exports.deleteTeamMemberInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createLocationInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    latitude: zod_1.z.number(),
    longitude: zod_1.z.number(),
    timestamp: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelLocationConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    latitude: exports.modelFloatInputSchema.optional().nullable(),
    longitude: exports.modelFloatInputSchema.optional().nullable(),
    timestamp: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelLocationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelLocationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelLocationConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.updateLocationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    latitude: zod_1.z.number().optional().nullable(),
    longitude: zod_1.z.number().optional().nullable(),
    timestamp: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deleteLocationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createMessageInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    sender: zod_1.z.string(),
    content: zod_1.z.string(),
    timestamp: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    teamMemberCommunicationLogId: zod_1.z.string().optional().nullable(),
});
exports.modelMessageConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    sender: exports.modelStringInputSchema.optional().nullable(),
    content: exports.modelStringInputSchema.optional().nullable(),
    timestamp: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelMessageConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelMessageConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelMessageConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    teamMemberCommunicationLogId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateMessageInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    sender: zod_1.z.string().optional().nullable(),
    content: zod_1.z.string().optional().nullable(),
    timestamp: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    teamMemberCommunicationLogId: zod_1.z.string().optional().nullable(),
});
exports.deleteMessageInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createJobInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    description: zod_1.z.string(),
    location: zod_1.z.string(),
    startTime: zod_1.z.string().optional().nullable(),
    endTime: zod_1.z.string().optional().nullable(),
    status: exports.jobStatusSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    teamMemberAssignedJobsId: zod_1.z.string().optional().nullable(),
});
exports.modelJobConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    description: exports.modelStringInputSchema.optional().nullable(),
    location: exports.modelStringInputSchema.optional().nullable(),
    startTime: exports.modelStringInputSchema.optional().nullable(),
    endTime: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelJobStatusInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelJobConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelJobConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelJobConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    teamMemberAssignedJobsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateJobInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    location: zod_1.z.string().optional().nullable(),
    startTime: zod_1.z.string().optional().nullable(),
    endTime: zod_1.z.string().optional().nullable(),
    status: exports.jobStatusSchema.optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    teamMemberAssignedJobsId: zod_1.z.string().optional().nullable(),
});
exports.deleteJobInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createServiceInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    name: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    price_min: zod_1.z.number(),
    duration: zod_1.z.string().optional().nullable(),
    Materials: zod_1.z.string().optional().nullable(),
    MaterialCosts: zod_1.z.number().optional().nullable(),
    BookingRequirements: zod_1.z.string().optional().nullable(),
    price_max: zod_1.z.number(),
    _version: zod_1.z.number().optional().nullable(),
    invoiceServicesId: zod_1.z.string().optional().nullable(),
    servicePackageServicesId: zod_1.z.string().optional().nullable(),
    subCategoryServicesId: zod_1.z.string().optional().nullable(),
    providerServicesOfferedId: zod_1.z.string().optional().nullable(),
});
exports.modelServiceConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    name: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    price_min: exports.modelFloatInputSchema.optional().nullable(),
    duration: exports.modelStringInputSchema.optional().nullable(),
    Materials: exports.modelStringInputSchema.optional().nullable(),
    MaterialCosts: exports.modelFloatInputSchema.optional().nullable(),
    BookingRequirements: exports.modelStringInputSchema.optional().nullable(),
    price_max: exports.modelFloatInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    invoiceServicesId: exports.modelIDInputSchema.optional().nullable(),
    servicePackageServicesId: exports.modelIDInputSchema.optional().nullable(),
    subCategoryServicesId: exports.modelIDInputSchema.optional().nullable(),
    providerServicesOfferedId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateServiceInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string().optional().nullable(),
    description: zod_1.z.string().optional().nullable(),
    price_min: zod_1.z.number().optional().nullable(),
    duration: zod_1.z.string().optional().nullable(),
    Materials: zod_1.z.string().optional().nullable(),
    MaterialCosts: zod_1.z.number().optional().nullable(),
    BookingRequirements: zod_1.z.string().optional().nullable(),
    price_max: zod_1.z.number().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    invoiceServicesId: zod_1.z.string().optional().nullable(),
    servicePackageServicesId: zod_1.z.string().optional().nullable(),
    subCategoryServicesId: zod_1.z.string().optional().nullable(),
    providerServicesOfferedId: zod_1.z.string().optional().nullable(),
});
exports.deleteServiceInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createProviderInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    email: zod_1.z.string(),
    password: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    dob: zod_1.z.string().optional().nullable(),
    gender: exports.genderSchema.optional().nullable(),
    phone: zod_1.z.string().optional().nullable(),
    address: zod_1.z.string().optional().nullable(),
    city: zod_1.z.string().optional().nullable(),
    state: zod_1.z.string().optional().nullable(),
    country: zod_1.z.string().optional().nullable(),
    zipCode: zod_1.z.string().optional().nullable(),
    profileImage: zod_1.z.string().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    lastLogin: zod_1.z.string().optional().nullable(),
    accountType: exports.accountTypeSchema.optional().nullable(),
    notificationPreference: exports.notificationPreferenceSchema.optional().nullable(),
    languagePreference: zod_1.z.string().optional().nullable(),
    currencyPreference: zod_1.z.string().optional().nullable(),
    timezone: zod_1.z.string().optional().nullable(),
    chatbotRequests: zod_1.z.number().optional().nullable(),
    isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
    providerCurrentLocationId: zod_1.z.string().optional().nullable(),
});
exports.modelGenderInputSchema = zod_1.z.object({
    eq: exports.genderSchema.optional().nullable(),
    ne: exports.genderSchema.optional().nullable(),
});
exports.modelAccountTypeInputSchema = zod_1.z.object({
    eq: exports.accountTypeSchema.optional().nullable(),
    ne: exports.accountTypeSchema.optional().nullable(),
});
exports.modelNotificationPreferenceInputSchema = zod_1.z.object({
    eq: exports.notificationPreferenceSchema.optional().nullable(),
    ne: exports.notificationPreferenceSchema.optional().nullable(),
});
exports.modelProviderConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    email: exports.modelStringInputSchema.optional().nullable(),
    password: exports.modelStringInputSchema.optional().nullable(),
    firstName: exports.modelStringInputSchema.optional().nullable(),
    lastName: exports.modelStringInputSchema.optional().nullable(),
    dob: exports.modelStringInputSchema.optional().nullable(),
    gender: exports.modelGenderInputSchema.optional().nullable(),
    phone: exports.modelStringInputSchema.optional().nullable(),
    address: exports.modelStringInputSchema.optional().nullable(),
    city: exports.modelStringInputSchema.optional().nullable(),
    state: exports.modelStringInputSchema.optional().nullable(),
    country: exports.modelStringInputSchema.optional().nullable(),
    zipCode: exports.modelStringInputSchema.optional().nullable(),
    profileImage: exports.modelStringInputSchema.optional().nullable(),
    isActive: exports.modelBooleanInputSchema.optional().nullable(),
    isVerified: exports.modelBooleanInputSchema.optional().nullable(),
    lastLogin: exports.modelStringInputSchema.optional().nullable(),
    accountType: exports.modelAccountTypeInputSchema.optional().nullable(),
    notificationPreference: exports.modelNotificationPreferenceInputSchema
        .optional()
        .nullable(),
    languagePreference: exports.modelStringInputSchema.optional().nullable(),
    currencyPreference: exports.modelStringInputSchema.optional().nullable(),
    timezone: exports.modelStringInputSchema.optional().nullable(),
    chatbotRequests: exports.modelIntInputSchema.optional().nullable(),
    isInstantBookingAvailable: exports.modelBooleanInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    nicheServiceProvidersId: exports.modelIDInputSchema.optional().nullable(),
    providerCurrentLocationId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateProviderInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    email: zod_1.z.string().optional().nullable(),
    password: zod_1.z.string().optional().nullable(),
    firstName: zod_1.z.string().optional().nullable(),
    lastName: zod_1.z.string().optional().nullable(),
    dob: zod_1.z.string().optional().nullable(),
    gender: exports.genderSchema.optional().nullable(),
    phone: zod_1.z.string().optional().nullable(),
    address: zod_1.z.string().optional().nullable(),
    city: zod_1.z.string().optional().nullable(),
    state: zod_1.z.string().optional().nullable(),
    country: zod_1.z.string().optional().nullable(),
    zipCode: zod_1.z.string().optional().nullable(),
    profileImage: zod_1.z.string().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    lastLogin: zod_1.z.string().optional().nullable(),
    accountType: exports.accountTypeSchema.optional().nullable(),
    notificationPreference: exports.notificationPreferenceSchema.optional().nullable(),
    languagePreference: zod_1.z.string().optional().nullable(),
    currencyPreference: zod_1.z.string().optional().nullable(),
    timezone: zod_1.z.string().optional().nullable(),
    chatbotRequests: zod_1.z.number().optional().nullable(),
    isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
    providerCurrentLocationId: zod_1.z.string().optional().nullable(),
});
exports.deleteProviderInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createAvailabilityInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    startTime: zod_1.z.string(),
    endTime: zod_1.z.string(),
    avalabilityDate: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
    providerAvailabilityId: zod_1.z.string().optional().nullable(),
});
exports.modelAvailabilityConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    startTime: exports.modelStringInputSchema.optional().nullable(),
    endTime: exports.modelStringInputSchema.optional().nullable(),
    avalabilityDate: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelAvailabilityConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelAvailabilityConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelAvailabilityConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    providerAvailabilityId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateAvailabilityInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    startTime: zod_1.z.string().optional().nullable(),
    endTime: zod_1.z.string().optional().nullable(),
    avalabilityDate: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerAvailabilityId: zod_1.z.string().optional().nullable(),
});
exports.deleteAvailabilityInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createProviderReviewInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    providerID: zod_1.z.string(),
    userID: zod_1.z.string(),
    rating: zod_1.z.number(),
    comment: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelProviderReviewConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    providerID: exports.modelIDInputSchema.optional().nullable(),
    userID: exports.modelIDInputSchema.optional().nullable(),
    rating: exports.modelIntInputSchema.optional().nullable(),
    comment: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderReviewConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderReviewConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderReviewConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
}));
exports.providerReviewSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ProviderReview"),
    id: zod_1.z.string(),
    providerID: zod_1.z.string(),
    userID: zod_1.z.string(),
    rating: zod_1.z.number(),
    comment: zod_1.z.string().optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
});
exports.updateProviderReviewInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    providerID: zod_1.z.string().optional().nullable(),
    userID: zod_1.z.string().optional().nullable(),
    rating: zod_1.z.number().optional().nullable(),
    comment: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.deleteProviderReviewInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createCertificationInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    certificationName: zod_1.z.string(),
    issuedBy: zod_1.z.string().optional().nullable(),
    validFrom: zod_1.z.string().optional().nullable(),
    validUntil: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerCertificationsId: zod_1.z.string().optional().nullable(),
});
exports.modelCertificationConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    certificationName: exports.modelStringInputSchema.optional().nullable(),
    issuedBy: exports.modelStringInputSchema.optional().nullable(),
    validFrom: exports.modelStringInputSchema.optional().nullable(),
    validUntil: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelCertificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelCertificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelCertificationConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    providerCertificationsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateCertificationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    certificationName: zod_1.z.string().optional().nullable(),
    issuedBy: zod_1.z.string().optional().nullable(),
    validFrom: zod_1.z.string().optional().nullable(),
    validUntil: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerCertificationsId: zod_1.z.string().optional().nullable(),
});
exports.deleteCertificationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createQualificationInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    qualificationName: zod_1.z.string(),
    institution: zod_1.z.string().optional().nullable(),
    yearObtained: zod_1.z.number().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerQualificationsId: zod_1.z.string().optional().nullable(),
});
exports.modelQualificationConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    qualificationName: exports.modelStringInputSchema.optional().nullable(),
    institution: exports.modelStringInputSchema.optional().nullable(),
    yearObtained: exports.modelIntInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelQualificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelQualificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelQualificationConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    providerQualificationsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateQualificationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    qualificationName: zod_1.z.string().optional().nullable(),
    institution: zod_1.z.string().optional().nullable(),
    yearObtained: zod_1.z.number().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerQualificationsId: zod_1.z.string().optional().nullable(),
});
exports.deleteQualificationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createSpecializationInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    specializationName: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerSpecializationsId: zod_1.z.string().optional().nullable(),
});
exports.modelSpecializationConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    specializationName: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSpecializationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSpecializationConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelSpecializationConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    providerSpecializationsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateSpecializationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    specializationName: zod_1.z.string().optional().nullable(),
    description: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerSpecializationsId: zod_1.z.string().optional().nullable(),
});
exports.deleteSpecializationInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createProviderHistoryInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    providerID: zod_1.z.string(),
    event: zod_1.z.string(),
    date: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerProviderHistoriesId: zod_1.z.string().optional().nullable(),
});
exports.modelProviderHistoryConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    providerID: exports.modelIDInputSchema.optional().nullable(),
    event: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderHistoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderHistoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderHistoryConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    providerProviderHistoriesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateProviderHistoryInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    providerID: zod_1.z.string().optional().nullable(),
    event: zod_1.z.string().optional().nullable(),
    date: zod_1.z.string().optional().nullable(),
    description: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    providerProviderHistoriesId: zod_1.z.string().optional().nullable(),
});
exports.deleteProviderHistoryInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createUserInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    email: zod_1.z.string(),
    password: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    dob: zod_1.z.string().optional().nullable(),
    gender: exports.genderSchema.optional().nullable(),
    phone: zod_1.z.string().optional().nullable(),
    address: zod_1.z.string().optional().nullable(),
    city: zod_1.z.string().optional().nullable(),
    state: zod_1.z.string().optional().nullable(),
    country: zod_1.z.string().optional().nullable(),
    zipCode: zod_1.z.string().optional().nullable(),
    profileImage: zod_1.z.string().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    lastLogin: zod_1.z.string().optional().nullable(),
    accountType: exports.accountTypeSchema.optional().nullable(),
    notificationPreference: exports.notificationPreferenceSchema.optional().nullable(),
    languagePreference: zod_1.z.string().optional().nullable(),
    currencyPreference: zod_1.z.string().optional().nullable(),
    timezone: zod_1.z.string().optional().nullable(),
    chatbotRequests: zod_1.z.number().optional().nullable(),
    preferredContactTime: zod_1.z.string().optional().nullable(),
    serviceInterestedIn: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    userWalletId: zod_1.z.string().optional().nullable(),
    userCurentLocationId: zod_1.z.string().optional().nullable(),
});
exports.modelUserConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    email: exports.modelStringInputSchema.optional().nullable(),
    password: exports.modelStringInputSchema.optional().nullable(),
    firstName: exports.modelStringInputSchema.optional().nullable(),
    lastName: exports.modelStringInputSchema.optional().nullable(),
    dob: exports.modelStringInputSchema.optional().nullable(),
    gender: exports.modelGenderInputSchema.optional().nullable(),
    phone: exports.modelStringInputSchema.optional().nullable(),
    address: exports.modelStringInputSchema.optional().nullable(),
    city: exports.modelStringInputSchema.optional().nullable(),
    state: exports.modelStringInputSchema.optional().nullable(),
    country: exports.modelStringInputSchema.optional().nullable(),
    zipCode: exports.modelStringInputSchema.optional().nullable(),
    profileImage: exports.modelStringInputSchema.optional().nullable(),
    isActive: exports.modelBooleanInputSchema.optional().nullable(),
    isVerified: exports.modelBooleanInputSchema.optional().nullable(),
    lastLogin: exports.modelStringInputSchema.optional().nullable(),
    accountType: exports.modelAccountTypeInputSchema.optional().nullable(),
    notificationPreference: exports.modelNotificationPreferenceInputSchema
        .optional()
        .nullable(),
    languagePreference: exports.modelStringInputSchema.optional().nullable(),
    currencyPreference: exports.modelStringInputSchema.optional().nullable(),
    timezone: exports.modelStringInputSchema.optional().nullable(),
    chatbotRequests: exports.modelIntInputSchema.optional().nullable(),
    preferredContactTime: exports.modelStringInputSchema.optional().nullable(),
    serviceInterestedIn: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelUserConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    userWalletId: exports.modelIDInputSchema.optional().nullable(),
    userCurentLocationId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.updateUserInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    email: zod_1.z.string().optional().nullable(),
    password: zod_1.z.string().optional().nullable(),
    firstName: zod_1.z.string().optional().nullable(),
    lastName: zod_1.z.string().optional().nullable(),
    dob: zod_1.z.string().optional().nullable(),
    gender: exports.genderSchema.optional().nullable(),
    phone: zod_1.z.string().optional().nullable(),
    address: zod_1.z.string().optional().nullable(),
    city: zod_1.z.string().optional().nullable(),
    state: zod_1.z.string().optional().nullable(),
    country: zod_1.z.string().optional().nullable(),
    zipCode: zod_1.z.string().optional().nullable(),
    profileImage: zod_1.z.string().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    lastLogin: zod_1.z.string().optional().nullable(),
    accountType: exports.accountTypeSchema.optional().nullable(),
    notificationPreference: exports.notificationPreferenceSchema.optional().nullable(),
    languagePreference: zod_1.z.string().optional().nullable(),
    currencyPreference: zod_1.z.string().optional().nullable(),
    timezone: zod_1.z.string().optional().nullable(),
    chatbotRequests: zod_1.z.number().optional().nullable(),
    preferredContactTime: zod_1.z.string().optional().nullable(),
    serviceInterestedIn: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
    userWalletId: zod_1.z.string().optional().nullable(),
    userCurentLocationId: zod_1.z.string().optional().nullable(),
});
exports.deleteUserInputSchema = zod_1.z.object({
    id: zod_1.z.string(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.modelServicePromotionFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    startDate: exports.modelStringInputSchema.optional().nullable(),
    endDate: exports.modelStringInputSchema.optional().nullable(),
    discountPercentage: exports.modelFloatInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServicePromotionFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServicePromotionFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServicePromotionFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceServicePromotionsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelProviderReportFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    dateReported: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderReportFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceProviderReportsId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderReportsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelUserReportFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    dateReported: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelUserReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserReportFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceUserReportsId: exports.modelIDInputSchema.optional().nullable(),
    userUserReportsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelUserInvoiceFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    amount: exports.modelFloatInputSchema.optional().nullable(),
    dateIssued: exports.modelStringInputSchema.optional().nullable(),
    dueDate: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelInvoiceStatusInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelUserInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserInvoiceFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceUserInvoicesId: exports.modelIDInputSchema.optional().nullable(),
    userUserInvoicesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelProviderBookmarkFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    dateBookmarked: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderBookmarkFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceProviderBookmarksId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderBookmarksId: exports.modelIDInputSchema.optional().nullable(),
    userProviderBookmarksId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelUserBookmarkFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    dateBookmarked: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelUserBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserBookmarkFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceUserBookmarksId: exports.modelIDInputSchema.optional().nullable(),
    userUserBookmarksId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelProviderNotificationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    content: exports.modelStringInputSchema.optional().nullable(),
    dateSent: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelNotificationStatusInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderNotificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderNotificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderNotificationFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceProviderNotificationsId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderNotificationsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelUserNotificationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    content: exports.modelStringInputSchema.optional().nullable(),
    dateSent: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelNotificationStatusInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelUserNotificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserNotificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserNotificationFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceUserNotificationsId: exports.modelIDInputSchema.optional().nullable(),
    userUserNotificationsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelServiceDiscountFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    discountPercentage: exports.modelFloatInputSchema.optional().nullable(),
    startDate: exports.modelStringInputSchema.optional().nullable(),
    endDate: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServiceDiscountFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceDiscountFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceDiscountFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceServiceDiscountsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelProviderAvailabilityFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    startDate: exports.modelStringInputSchema.optional().nullable(),
    endDate: exports.modelStringInputSchema.optional().nullable(),
    isScheduled: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderAvailabilityFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderAvailabilityFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderAvailabilityFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceProviderAvailabilitiesId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderAvailabilityId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelUserPreferenceFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    preferenceType: exports.modelStringInputSchema.optional().nullable(),
    preferenceValue: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelUserPreferenceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserPreferenceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserPreferenceFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceUserPreferencesId: exports.modelIDInputSchema.optional().nullable(),
    userUserPreferenceId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelProviderCertificationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    certificationName: exports.modelStringInputSchema.optional().nullable(),
    issuedBy: exports.modelStringInputSchema.optional().nullable(),
    validFrom: exports.modelStringInputSchema.optional().nullable(),
    validUntil: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderCertificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderCertificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderCertificationFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceProviderCertificationsId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderCertificationId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelServiceVideoFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    videoURL: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServiceVideoFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceVideoFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceVideoFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceServiceVideosId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelServiceImageFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    imageURL: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServiceImageFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceImageFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceImageFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceServiceImagesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelServiceReviewFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    rating: exports.modelIntInputSchema.optional().nullable(),
    comment: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServiceReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceReviewFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceServiceReviewsId: exports.modelIDInputSchema.optional().nullable(),
    userServiceReviewsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelAIDiagnosticsFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    diagnosticData: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelAIDiagnosticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelAIDiagnosticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelAIDiagnosticsFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    aIChatBotDiagnosticsId: exports.modelIDInputSchema.optional().nullable(),
    serviceAiDiagnosticsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelCustomizationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    customizationType: exports.modelStringInputSchema.optional().nullable(),
    customizationValue: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelCustomizationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelCustomizationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelCustomizationFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceCustomizationsId: exports.modelIDInputSchema.optional().nullable(),
    userCustomizationsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelExpenseFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    amount: exports.modelFloatInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelExpenseFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelExpenseFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelExpenseFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceExpensesId: exports.modelIDInputSchema.optional().nullable(),
    providerExpensesId: exports.modelIDInputSchema.optional().nullable(),
    userExpensesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelFavoriteProviderFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    dateAdded: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelFavoriteProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelFavoriteProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelFavoriteProviderFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceFavoriteProvidersId: exports.modelIDInputSchema.optional().nullable(),
    providerFavoriteProvidersId: exports.modelIDInputSchema.optional().nullable(),
    userFavoriteProvidersId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelUserHistoryFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    action: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelUserHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserHistoryFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceUserHistoriesId: exports.modelIDInputSchema.optional().nullable(),
    userUserHistoriesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelProviderAwardFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    awardName: exports.modelStringInputSchema.optional().nullable(),
    awardedBy: exports.modelStringInputSchema.optional().nullable(),
    dateAwarded: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderAwardFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderAwardFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderAwardFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceProviderAwardsId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderAwardsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelReferralFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    dateReferred: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelReferralFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelReferralFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelReferralFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    rewardReferralsId: exports.modelIDInputSchema.optional().nullable(),
    serviceReferralsId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderReferralsId: exports.modelIDInputSchema.optional().nullable(),
    userReferralsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelTipFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    amount: exports.modelFloatInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z.array(exports.modelTipFilterInputSchema.nullable()).optional().nullable(),
    or: zod_1.z.array(exports.modelTipFilterInputSchema.nullable()).optional().nullable(),
    not: exports.modelTipFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    providerProviderTipsId: exports.modelIDInputSchema.optional().nullable(),
    userTipsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelPaymentMethodFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    cardNumber: exports.modelStringInputSchema.optional().nullable(),
    expiryDate: exports.modelStringInputSchema.optional().nullable(),
    cardType: exports.modelCardTypeInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelPaymentMethodFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelPaymentMethodFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelPaymentMethodFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    userPaymentMethodsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelInvoiceFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    amount: exports.modelFloatInputSchema.optional().nullable(),
    dateIssued: exports.modelStringInputSchema.optional().nullable(),
    dueDate: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelInvoiceStatusInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelInvoiceFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    providerProviderInvoicesId: exports.modelIDInputSchema.optional().nullable(),
    userInvoicesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelContractFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    startDate: exports.modelStringInputSchema.optional().nullable(),
    endDate: exports.modelStringInputSchema.optional().nullable(),
    terms: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelContractFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelContractFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelContractFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceContractsId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderContractsId: exports.modelIDInputSchema.optional().nullable(),
    userContractsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelNicheServiceFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    serviceName: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelNicheServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelNicheServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelNicheServiceFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelServicePackageFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    packageName: exports.modelStringInputSchema.optional().nullable(),
    discount: exports.modelFloatInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServicePackageFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServicePackageFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServicePackageFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelRewardFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    rewardName: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    value: exports.modelFloatInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelRewardFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelRewardFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelRewardFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    loyaltyProgramRewardsId: exports.modelIDInputSchema.optional().nullable(),
    userRewardsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelLoyaltyProgramFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    points: exports.modelIntInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelLoyaltyProgramFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelLoyaltyProgramFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelLoyaltyProgramFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    userLoyaltyProgramsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelVerificationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    verificationCode: exports.modelStringInputSchema.optional().nullable(),
    dateSent: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelVerificationStatusInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelVerificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelVerificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelVerificationFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    userVerificationsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelAnalyticsFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    userCount: exports.modelIntInputSchema.optional().nullable(),
    providerCount: exports.modelIntInputSchema.optional().nullable(),
    serviceCount: exports.modelIntInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelAnalyticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelAnalyticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelAnalyticsFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelAnalyticsConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelAnalyticsConnection"),
    items: zod_1.z.array(exports.analyticsSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.modelPromoCodeFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    code: exports.modelStringInputSchema.optional().nullable(),
    discount: exports.modelFloatInputSchema.optional().nullable(),
    validFrom: exports.modelStringInputSchema.optional().nullable(),
    validUntil: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelPromoCodeFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelPromoCodeFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelPromoCodeFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelPromoCodeConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelPromoCodeConnection"),
    items: zod_1.z.array(exports.promoCodeSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.modelReportFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    reportedEntity: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    dateReported: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelReportFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    userReportsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelJobTrackingFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    status: exports.modelJobStatusInputSchema.optional().nullable(),
    startDate: exports.modelStringInputSchema.optional().nullable(),
    endDate: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelJobTrackingFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelJobTrackingFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelJobTrackingFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceJobTrackingsId: exports.modelIDInputSchema.optional().nullable(),
    providerJobTrackingId: exports.modelIDInputSchema.optional().nullable(),
    userJobTrackingsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelAIChatLogFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    message: exports.modelStringInputSchema.optional().nullable(),
    response: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelAIChatLogFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelAIChatLogFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelAIChatLogFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    aIChatBotChatLogsId: exports.modelIDInputSchema.optional().nullable(),
    userAiChatLogsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelAIChatBotFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    name: exports.modelStringInputSchema.optional().nullable(),
    version: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelAIChatBotFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelAIChatBotFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelAIChatBotFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    userAiChatBotsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelMainCategoryFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    name: exports.modelStringInputSchema.optional().nullable(),
    descrption: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelMainCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelMainCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelMainCategoryFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubCategoryFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    name: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelSubCategoryFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    mainCategorySubCategoriesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelPLMBRSubscriptionFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelPLMBRSubscriptionFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelPLMBRSubscriptionFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelPLMBRSubscriptionFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    userSubscriptionsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelUserSettingsFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelUserSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelUserSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelUserSettingsFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelUserSettingsConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelUserSettingsConnection"),
    items: zod_1.z.array(exports.userSettingsSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.modelProviderSettingsFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderSettingsFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelProviderSettingsConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelProviderSettingsConnection"),
    items: zod_1.z.array(exports.providerSettingsSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.modelPortfolioFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelPortfolioFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelPortfolioFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelPortfolioFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelPortfolioConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelPortfolioConnection"),
    items: zod_1.z.array(exports.portfolioSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.modelServiceVariantFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServiceVariantFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceVariantFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceVariantFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelServiceVariantConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelServiceVariantConnection"),
    items: zod_1.z.array(exports.serviceVariantSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.modelServiceHighlightFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServiceHighlightFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceHighlightFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceHighlightFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelServiceHighlightConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelServiceHighlightConnection"),
    items: zod_1.z.array(exports.serviceHighlightSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.modelServiceTagFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServiceTagFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceTagFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceTagFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelServiceTagConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelServiceTagConnection"),
    items: zod_1.z.array(exports.serviceTagSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.modelServiceFAQFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServiceFAQFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceFAQFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceFAQFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelServiceFAQConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelServiceFAQConnection"),
    items: zod_1.z.array(exports.serviceFAQSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.modelFeedbackFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelFeedbackFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelFeedbackFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelFeedbackFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    userFeedbacksId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelEquipmentFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    providerID: exports.modelIDInputSchema.optional().nullable(),
    name: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    category: exports.modelEquipmentCategoryInputSchema.optional().nullable(),
    availabilityStatus: exports.modelEquipmentAvailabilityStatusInputSchema
        .optional()
        .nullable(),
    purchaseDate: exports.modelStringInputSchema.optional().nullable(),
    maintenanceDate: exports.modelStringInputSchema.optional().nullable(),
    image: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelEquipmentFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelEquipmentFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelEquipmentFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelEquipmentConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelEquipmentConnection"),
    items: zod_1.z.array(exports.equipmentSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.modelWalletFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    ownerID: exports.modelIDInputSchema.optional().nullable(),
    balance: exports.modelFloatInputSchema.optional().nullable(),
    currency: exports.modelStringInputSchema.optional().nullable(),
    lastUpdated: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelWalletFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelWalletFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelWalletFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelTransactionFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    amount: exports.modelFloatInputSchema.optional().nullable(),
    type: exports.modelTransactionTypeInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelTransactionFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelTransactionFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelTransactionFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    walletTransactionsId: exports.modelIDInputSchema.optional().nullable(),
    userTransactionsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelReviewFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    rating: exports.modelIntInputSchema.optional().nullable(),
    comment: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelReviewFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceReviewsId: exports.modelIDInputSchema.optional().nullable(),
    providerReviewsId: exports.modelIDInputSchema.optional().nullable(),
    userReviewsId: exports.modelIDInputSchema.optional().nullable(),
    reviewResponseId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelReviewResponseFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    responseText: exports.modelStringInputSchema.optional().nullable(),
    responseDate: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelReviewResponseFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelReviewResponseFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelReviewResponseFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    reviewResponseReviewId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelMessageThreadFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    lastMessageDate: exports.modelStringInputSchema.optional().nullable(),
    lastMessageContent: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelMessageStatusInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelMessageThreadFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelMessageThreadFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelMessageThreadFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    providerProviderMessagesId: exports.modelIDInputSchema.optional().nullable(),
    userMessagesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelMessageContentFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    sender: exports.modelStringInputSchema.optional().nullable(),
    content: exports.modelStringInputSchema.optional().nullable(),
    timestamp: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelMessageContentFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelMessageContentFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelMessageContentFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    messageThreadMessagesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelBookingFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    startTime: exports.modelStringInputSchema.optional().nullable(),
    endTime: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelBookingStatusInputSchema.optional().nullable(),
    location: exports.modelStringInputSchema.optional().nullable(),
    notes: exports.modelStringInputSchema.optional().nullable(),
    price: exports.modelFloatInputSchema.optional().nullable(),
    isInstantBooking: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelBookingFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelBookingFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelBookingFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceBookingsId: exports.modelIDInputSchema.optional().nullable(),
    providerProviderBookingsId: exports.modelIDInputSchema.optional().nullable(),
    userBookingsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelTeamMemberFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    name: exports.modelStringInputSchema.optional().nullable(),
    role: exports.modelStringInputSchema.optional().nullable(),
    jobSiteDuration: exports.modelStringInputSchema.optional().nullable(),
    providerID: exports.modelIDInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelTeamMemberFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelTeamMemberFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelTeamMemberFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    providerTeamMembersId: exports.modelIDInputSchema.optional().nullable(),
    teamMemberCurrentLocationId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelLocationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    latitude: exports.modelFloatInputSchema.optional().nullable(),
    longitude: exports.modelFloatInputSchema.optional().nullable(),
    timestamp: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelLocationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelLocationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelLocationFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelLocationConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelLocationConnection"),
    items: zod_1.z.array(exports.locationSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.modelMessageFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    sender: exports.modelStringInputSchema.optional().nullable(),
    content: exports.modelStringInputSchema.optional().nullable(),
    timestamp: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelMessageFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelMessageFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelMessageFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    teamMemberCommunicationLogId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelJobFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    location: exports.modelStringInputSchema.optional().nullable(),
    startTime: exports.modelStringInputSchema.optional().nullable(),
    endTime: exports.modelStringInputSchema.optional().nullable(),
    status: exports.modelJobStatusInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z.array(exports.modelJobFilterInputSchema.nullable()).optional().nullable(),
    or: zod_1.z.array(exports.modelJobFilterInputSchema.nullable()).optional().nullable(),
    not: exports.modelJobFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    teamMemberAssignedJobsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelServiceFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    name: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    price_min: exports.modelFloatInputSchema.optional().nullable(),
    duration: exports.modelStringInputSchema.optional().nullable(),
    Materials: exports.modelStringInputSchema.optional().nullable(),
    MaterialCosts: exports.modelFloatInputSchema.optional().nullable(),
    BookingRequirements: exports.modelStringInputSchema.optional().nullable(),
    price_max: exports.modelFloatInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServiceFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    invoiceServicesId: exports.modelIDInputSchema.optional().nullable(),
    servicePackageServicesId: exports.modelIDInputSchema.optional().nullable(),
    subCategoryServicesId: exports.modelIDInputSchema.optional().nullable(),
    providerServicesOfferedId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelProviderFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    email: exports.modelStringInputSchema.optional().nullable(),
    password: exports.modelStringInputSchema.optional().nullable(),
    firstName: exports.modelStringInputSchema.optional().nullable(),
    lastName: exports.modelStringInputSchema.optional().nullable(),
    dob: exports.modelStringInputSchema.optional().nullable(),
    gender: exports.modelGenderInputSchema.optional().nullable(),
    phone: exports.modelStringInputSchema.optional().nullable(),
    address: exports.modelStringInputSchema.optional().nullable(),
    city: exports.modelStringInputSchema.optional().nullable(),
    state: exports.modelStringInputSchema.optional().nullable(),
    country: exports.modelStringInputSchema.optional().nullable(),
    zipCode: exports.modelStringInputSchema.optional().nullable(),
    profileImage: exports.modelStringInputSchema.optional().nullable(),
    isActive: exports.modelBooleanInputSchema.optional().nullable(),
    isVerified: exports.modelBooleanInputSchema.optional().nullable(),
    lastLogin: exports.modelStringInputSchema.optional().nullable(),
    accountType: exports.modelAccountTypeInputSchema.optional().nullable(),
    notificationPreference: exports.modelNotificationPreferenceInputSchema
        .optional()
        .nullable(),
    languagePreference: exports.modelStringInputSchema.optional().nullable(),
    currencyPreference: exports.modelStringInputSchema.optional().nullable(),
    timezone: exports.modelStringInputSchema.optional().nullable(),
    chatbotRequests: exports.modelIntInputSchema.optional().nullable(),
    isInstantBookingAvailable: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    nicheServiceProvidersId: exports.modelIDInputSchema.optional().nullable(),
    providerCurrentLocationId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelAvailabilityFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    startTime: exports.modelStringInputSchema.optional().nullable(),
    endTime: exports.modelStringInputSchema.optional().nullable(),
    avalabilityDate: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelAvailabilityFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelAvailabilityFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelAvailabilityFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    providerAvailabilityId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelProviderReviewFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    providerID: exports.modelIDInputSchema.optional().nullable(),
    userID: exports.modelIDInputSchema.optional().nullable(),
    rating: exports.modelIntInputSchema.optional().nullable(),
    comment: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderReviewFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelProviderReviewConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelProviderReviewConnection"),
    items: zod_1.z.array(exports.providerReviewSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.modelCertificationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    certificationName: exports.modelStringInputSchema.optional().nullable(),
    issuedBy: exports.modelStringInputSchema.optional().nullable(),
    validFrom: exports.modelStringInputSchema.optional().nullable(),
    validUntil: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelCertificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelCertificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelCertificationFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    providerCertificationsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelQualificationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    qualificationName: exports.modelStringInputSchema.optional().nullable(),
    institution: exports.modelStringInputSchema.optional().nullable(),
    yearObtained: exports.modelIntInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelQualificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelQualificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelQualificationFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    providerQualificationsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelSpecializationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    specializationName: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSpecializationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSpecializationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelSpecializationFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    providerSpecializationsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelProviderHistoryFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    providerID: exports.modelIDInputSchema.optional().nullable(),
    event: exports.modelStringInputSchema.optional().nullable(),
    date: exports.modelStringInputSchema.optional().nullable(),
    description: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelProviderHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelProviderHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelProviderHistoryFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    providerProviderHistoriesId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelUserFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelIDInputSchema.optional().nullable(),
    email: exports.modelStringInputSchema.optional().nullable(),
    password: exports.modelStringInputSchema.optional().nullable(),
    firstName: exports.modelStringInputSchema.optional().nullable(),
    lastName: exports.modelStringInputSchema.optional().nullable(),
    dob: exports.modelStringInputSchema.optional().nullable(),
    gender: exports.modelGenderInputSchema.optional().nullable(),
    phone: exports.modelStringInputSchema.optional().nullable(),
    address: exports.modelStringInputSchema.optional().nullable(),
    city: exports.modelStringInputSchema.optional().nullable(),
    state: exports.modelStringInputSchema.optional().nullable(),
    country: exports.modelStringInputSchema.optional().nullable(),
    zipCode: exports.modelStringInputSchema.optional().nullable(),
    profileImage: exports.modelStringInputSchema.optional().nullable(),
    isActive: exports.modelBooleanInputSchema.optional().nullable(),
    isVerified: exports.modelBooleanInputSchema.optional().nullable(),
    lastLogin: exports.modelStringInputSchema.optional().nullable(),
    accountType: exports.modelAccountTypeInputSchema.optional().nullable(),
    notificationPreference: exports.modelNotificationPreferenceInputSchema
        .optional()
        .nullable(),
    languagePreference: exports.modelStringInputSchema.optional().nullable(),
    currencyPreference: exports.modelStringInputSchema.optional().nullable(),
    timezone: exports.modelStringInputSchema.optional().nullable(),
    chatbotRequests: exports.modelIntInputSchema.optional().nullable(),
    preferredContactTime: exports.modelStringInputSchema.optional().nullable(),
    serviceInterestedIn: exports.modelStringInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    and: zod_1.z.array(exports.modelUserFilterInputSchema.nullable()).optional().nullable(),
    or: zod_1.z.array(exports.modelUserFilterInputSchema.nullable()).optional().nullable(),
    not: exports.modelUserFilterInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    userWalletId: exports.modelIDInputSchema.optional().nullable(),
    userCurentLocationId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.modelSubscriptionIDInputSchema = zod_1.z.object({
    ne: zod_1.z.string().optional().nullable(),
    eq: zod_1.z.string().optional().nullable(),
    le: zod_1.z.string().optional().nullable(),
    lt: zod_1.z.string().optional().nullable(),
    ge: zod_1.z.string().optional().nullable(),
    gt: zod_1.z.string().optional().nullable(),
    contains: zod_1.z.string().optional().nullable(),
    notContains: zod_1.z.string().optional().nullable(),
    between: zod_1.z.array(zod_1.z.string().nullable()).optional().nullable(),
    beginsWith: zod_1.z.string().optional().nullable(),
    in: zod_1.z.array(zod_1.z.string().nullable()).optional().nullable(),
    notIn: zod_1.z.array(zod_1.z.string().nullable()).optional().nullable(),
});
exports.modelSubscriptionStringInputSchema = zod_1.z.object({
    ne: zod_1.z.string().optional().nullable(),
    eq: zod_1.z.string().optional().nullable(),
    le: zod_1.z.string().optional().nullable(),
    lt: zod_1.z.string().optional().nullable(),
    ge: zod_1.z.string().optional().nullable(),
    gt: zod_1.z.string().optional().nullable(),
    contains: zod_1.z.string().optional().nullable(),
    notContains: zod_1.z.string().optional().nullable(),
    between: zod_1.z.array(zod_1.z.string().nullable()).optional().nullable(),
    beginsWith: zod_1.z.string().optional().nullable(),
    in: zod_1.z.array(zod_1.z.string().nullable()).optional().nullable(),
    notIn: zod_1.z.array(zod_1.z.string().nullable()).optional().nullable(),
});
exports.modelSubscriptionFloatInputSchema = zod_1.z.object({
    ne: zod_1.z.number().optional().nullable(),
    eq: zod_1.z.number().optional().nullable(),
    le: zod_1.z.number().optional().nullable(),
    lt: zod_1.z.number().optional().nullable(),
    ge: zod_1.z.number().optional().nullable(),
    gt: zod_1.z.number().optional().nullable(),
    between: zod_1.z.array(zod_1.z.number().nullable()).optional().nullable(),
    in: zod_1.z.array(zod_1.z.number().nullable()).optional().nullable(),
    notIn: zod_1.z.array(zod_1.z.number().nullable()).optional().nullable(),
});
exports.modelSubscriptionServicePromotionFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    startDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    endDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    discountPercentage: exports.modelSubscriptionFloatInputSchema
        .optional()
        .nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionServicePromotionFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionServicePromotionFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionProviderReportFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    dateReported: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionProviderReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionProviderReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionUserReportFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    dateReported: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionUserReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionUserReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionUserInvoiceFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    amount: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    dateIssued: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    dueDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    status: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionUserInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionUserInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionProviderBookmarkFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    dateBookmarked: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionProviderBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionProviderBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionUserBookmarkFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    dateBookmarked: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionUserBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionUserBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionProviderNotificationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    content: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    dateSent: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    status: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionProviderNotificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionProviderNotificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionUserNotificationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    content: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    dateSent: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    status: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionUserNotificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionUserNotificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionServiceDiscountFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    discountPercentage: exports.modelSubscriptionFloatInputSchema
        .optional()
        .nullable(),
    startDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    endDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionServiceDiscountFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionServiceDiscountFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionBooleanInputSchema = zod_1.z.object({
    ne: zod_1.z.boolean().optional().nullable(),
    eq: zod_1.z.boolean().optional().nullable(),
});
exports.modelSubscriptionProviderAvailabilityFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    startDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    endDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    isScheduled: exports.modelSubscriptionBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionProviderAvailabilityFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionProviderAvailabilityFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionUserPreferenceFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    preferenceType: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    preferenceValue: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionUserPreferenceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionUserPreferenceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionProviderCertificationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    certificationName: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    issuedBy: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    validFrom: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    validUntil: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionProviderCertificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionProviderCertificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionServiceVideoFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    videoURL: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionServiceVideoFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionServiceVideoFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionServiceImageFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    imageURL: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionServiceImageFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionServiceImageFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionIntInputSchema = zod_1.z.object({
    ne: zod_1.z.number().optional().nullable(),
    eq: zod_1.z.number().optional().nullable(),
    le: zod_1.z.number().optional().nullable(),
    lt: zod_1.z.number().optional().nullable(),
    ge: zod_1.z.number().optional().nullable(),
    gt: zod_1.z.number().optional().nullable(),
    between: zod_1.z.array(zod_1.z.number().nullable()).optional().nullable(),
    in: zod_1.z.array(zod_1.z.number().nullable()).optional().nullable(),
    notIn: zod_1.z.array(zod_1.z.number().nullable()).optional().nullable(),
});
exports.modelSubscriptionServiceReviewFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    rating: exports.modelSubscriptionIntInputSchema.optional().nullable(),
    comment: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    date: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionServiceReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionServiceReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionAIDiagnosticsFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    diagnosticData: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    date: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionAIDiagnosticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionAIDiagnosticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionCustomizationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    customizationType: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    customizationValue: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionCustomizationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionCustomizationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionExpenseFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    amount: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    date: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionExpenseFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionExpenseFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionFavoriteProviderFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    dateAdded: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionFavoriteProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionFavoriteProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionUserHistoryFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    action: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    date: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionUserHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionUserHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionProviderAwardFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    awardName: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    awardedBy: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    dateAwarded: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionProviderAwardFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionProviderAwardFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionReferralFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    dateReferred: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionReferralFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionReferralFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionTipFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    amount: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    date: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionTipFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionTipFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionPaymentMethodFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    cardNumber: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    expiryDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    cardType: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionPaymentMethodFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionPaymentMethodFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionInvoiceFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    amount: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    dateIssued: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    dueDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    status: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    invoiceServicesId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
}));
exports.modelSubscriptionContractFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    startDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    endDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    terms: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionContractFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionContractFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionNicheServiceFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    serviceName: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionNicheServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionNicheServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    nicheServiceProvidersId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
}));
exports.modelSubscriptionServicePackageFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    packageName: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    discount: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionServicePackageFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionServicePackageFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    servicePackageServicesId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
}));
exports.modelSubscriptionRewardFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    rewardName: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    value: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionRewardFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionRewardFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    rewardReferralsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
}));
exports.modelSubscriptionLoyaltyProgramFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    points: exports.modelSubscriptionIntInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionLoyaltyProgramFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionLoyaltyProgramFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    loyaltyProgramRewardsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
}));
exports.modelSubscriptionVerificationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    verificationCode: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    dateSent: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    status: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionVerificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionVerificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionAnalyticsFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userCount: exports.modelSubscriptionIntInputSchema.optional().nullable(),
    providerCount: exports.modelSubscriptionIntInputSchema.optional().nullable(),
    serviceCount: exports.modelSubscriptionIntInputSchema.optional().nullable(),
    date: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionAnalyticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionAnalyticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionPromoCodeFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    code: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    discount: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    validFrom: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    validUntil: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionPromoCodeFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionPromoCodeFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionReportFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    reportedEntity: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    dateReported: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionJobTrackingFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    status: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    startDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    endDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionJobTrackingFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionJobTrackingFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionAIChatLogFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    message: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    response: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    date: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionAIChatLogFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionAIChatLogFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionAIChatBotFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    name: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    version: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionAIChatBotFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionAIChatBotFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    aIChatBotDiagnosticsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    aIChatBotChatLogsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
}));
exports.modelSubscriptionMainCategoryFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    name: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    descrption: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionMainCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionMainCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    mainCategorySubCategoriesId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
}));
exports.modelSubscriptionSubCategoryFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    name: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionSubCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionSubCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    subCategoryServicesId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
}));
exports.modelSubscriptionPLMBRSubscriptionFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionPLMBRSubscriptionFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionPLMBRSubscriptionFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionUserSettingsFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionUserSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionUserSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionProviderSettingsFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionProviderSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionProviderSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionPortfolioFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionPortfolioFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionPortfolioFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionServiceVariantFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionServiceVariantFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionServiceVariantFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionServiceHighlightFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionServiceHighlightFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionServiceHighlightFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionServiceTagFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionServiceTagFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionServiceTagFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionServiceFAQFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionServiceFAQFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionServiceFAQFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionFeedbackFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionFeedbackFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionFeedbackFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionEquipmentFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    providerID: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    name: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    category: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    availabilityStatus: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    purchaseDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    maintenanceDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    image: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionEquipmentFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionEquipmentFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionWalletFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    ownerID: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    balance: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    currency: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    lastUpdated: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionWalletFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionWalletFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    walletTransactionsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
}));
exports.modelSubscriptionTransactionFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    amount: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    type: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    date: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionTransactionFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionTransactionFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionReviewFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    rating: exports.modelSubscriptionIntInputSchema.optional().nullable(),
    comment: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    date: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    reviewResponseId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
}));
exports.modelSubscriptionReviewResponseFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    responseText: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    responseDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionReviewResponseFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionReviewResponseFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    reviewResponseReviewId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
}));
exports.modelSubscriptionMessageThreadFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    lastMessageDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    lastMessageContent: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    status: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionMessageThreadFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionMessageThreadFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    messageThreadMessagesId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
}));
exports.modelSubscriptionMessageContentFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    sender: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    content: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    timestamp: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionMessageContentFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionMessageContentFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionBookingFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    date: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    startTime: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    endTime: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    status: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    location: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    notes: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    price: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    isInstantBooking: exports.modelSubscriptionBooleanInputSchema
        .optional()
        .nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionBookingFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionBookingFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionTeamMemberFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    name: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    role: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    jobSiteDuration: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    providerID: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionTeamMemberFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionTeamMemberFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    teamMemberCommunicationLogId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    teamMemberAssignedJobsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    teamMemberCurrentLocationId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
}));
exports.modelSubscriptionLocationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    latitude: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    longitude: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    timestamp: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionLocationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionLocationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionMessageFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    sender: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    content: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    timestamp: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionMessageFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionMessageFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionJobFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    location: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    startTime: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    endTime: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    status: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionJobFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionJobFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionServiceFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    name: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    price_min: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    duration: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    Materials: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    MaterialCosts: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    BookingRequirements: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    price_max: exports.modelSubscriptionFloatInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    serviceReviewsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    serviceBookingsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    serviceServicePromotionsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceProviderReportsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceUserReportsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceUserInvoicesId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceProviderBookmarksId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceUserBookmarksId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceProviderNotificationsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceUserNotificationsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceServiceDiscountsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceProviderAvailabilitiesId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceUserPreferencesId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceProviderCertificationsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceServiceVideosId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceServiceImagesId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceServiceReviewsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceAiDiagnosticsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceCustomizationsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceExpensesId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    serviceFavoriteProvidersId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceUserHistoriesId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceProviderAwardsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    serviceReferralsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    serviceContractsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    serviceJobTrackingsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
}));
exports.modelSubscriptionProviderFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    email: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    password: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    firstName: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    lastName: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    dob: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    gender: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    phone: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    address: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    city: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    state: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    country: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    zipCode: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    profileImage: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    isActive: exports.modelSubscriptionBooleanInputSchema.optional().nullable(),
    isVerified: exports.modelSubscriptionBooleanInputSchema.optional().nullable(),
    lastLogin: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    accountType: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    notificationPreference: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    languagePreference: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    currencyPreference: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    timezone: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    chatbotRequests: exports.modelSubscriptionIntInputSchema.optional().nullable(),
    isInstantBookingAvailable: exports.modelSubscriptionBooleanInputSchema
        .optional()
        .nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    providerServicesOfferedId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerTeamMembersId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerAvailabilityId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerReviewsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    providerCertificationsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerQualificationsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerSpecializationsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerProviderBookingsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerProviderMessagesId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerProviderContractsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerProviderInvoicesId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerProviderTipsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerProviderReferralsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerProviderHistoriesId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerProviderNotificationsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerProviderBookmarksId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerProviderReportsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerProviderAvailabilityId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerProviderCertificationId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerFavoriteProvidersId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerProviderAwardsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerJobTrackingId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    providerExpensesId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    providerCurrentLocationId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
}));
exports.modelSubscriptionAvailabilityFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    startTime: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    endTime: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    avalabilityDate: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionAvailabilityFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionAvailabilityFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionProviderReviewFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    providerID: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userID: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    rating: exports.modelSubscriptionIntInputSchema.optional().nullable(),
    comment: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionProviderReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionProviderReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionCertificationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    certificationName: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    issuedBy: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    validFrom: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    validUntil: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionCertificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionCertificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionQualificationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    qualificationName: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    institution: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    yearObtained: exports.modelSubscriptionIntInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionQualificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionQualificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionSpecializationFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    specializationName: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionSpecializationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionSpecializationFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionProviderHistoryFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    providerID: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    event: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    date: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    description: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionProviderHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionProviderHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
}));
exports.modelSubscriptionUserFilterInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    id: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    email: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    password: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    firstName: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    lastName: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    dob: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    gender: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    phone: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    address: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    city: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    state: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    country: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    zipCode: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    profileImage: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    isActive: exports.modelSubscriptionBooleanInputSchema.optional().nullable(),
    isVerified: exports.modelSubscriptionBooleanInputSchema.optional().nullable(),
    lastLogin: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    accountType: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    notificationPreference: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    languagePreference: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    currencyPreference: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    timezone: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    chatbotRequests: exports.modelSubscriptionIntInputSchema.optional().nullable(),
    preferredContactTime: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    serviceInterestedIn: exports.modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
    createdAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    updatedAt: exports.modelSubscriptionStringInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelSubscriptionUserFilterInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelSubscriptionUserFilterInputSchema.nullable())
        .optional()
        .nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    userBookingsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userMessagesId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userReviewsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userTransactionsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userFeedbacksId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userSubscriptionsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userAiChatBotsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userAiChatLogsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userJobTrackingsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userReportsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userLoyaltyProgramsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    userRewardsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userContractsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userInvoicesId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userPaymentMethodsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    userTipsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userReferralsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userUserHistoriesId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userFavoriteProvidersId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    userExpensesId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userCustomizationsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    userServiceReviewsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    userUserNotificationsId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    userUserBookmarksId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userUserInvoicesId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userUserReportsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userProviderBookmarksId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    userUserPreferenceId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    userVerificationsId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userWalletId: exports.modelSubscriptionIDInputSchema.optional().nullable(),
    userCurentLocationId: exports.modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
}));
exports.modelServicePromotionConditionInputSchema = zod_1.z.lazy(() => zod_1.z.object({
    description: exports.modelStringInputSchema.optional().nullable(),
    startDate: exports.modelStringInputSchema.optional().nullable(),
    endDate: exports.modelStringInputSchema.optional().nullable(),
    discountPercentage: exports.modelFloatInputSchema.optional().nullable(),
    and: zod_1.z
        .array(exports.modelServicePromotionConditionInputSchema.nullable())
        .optional()
        .nullable(),
    or: zod_1.z
        .array(exports.modelServicePromotionConditionInputSchema.nullable())
        .optional()
        .nullable(),
    not: exports.modelServicePromotionConditionInputSchema.optional().nullable(),
    _deleted: exports.modelBooleanInputSchema.optional().nullable(),
    createdAt: exports.modelStringInputSchema.optional().nullable(),
    updatedAt: exports.modelStringInputSchema.optional().nullable(),
    serviceServicePromotionsId: exports.modelIDInputSchema.optional().nullable(),
}));
exports.createServicePromotionMutationSchema = zod_1.z.object({
    createServicePromotion: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServicePromotion"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        discountPercentage: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServicePromotionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateServicePromotionMutationVariablesSchema = zod_1.z.object({
    input: exports.updateServicePromotionInputSchema,
    condition: exports.modelServicePromotionConditionInputSchema.optional().nullable(),
});
exports.updateServicePromotionMutationSchema = zod_1.z.object({
    updateServicePromotion: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServicePromotion"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        discountPercentage: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServicePromotionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteServicePromotionMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteServicePromotionInputSchema,
    condition: exports.modelServicePromotionConditionInputSchema.optional().nullable(),
});
exports.deleteServicePromotionMutationSchema = zod_1.z.object({
    deleteServicePromotion: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServicePromotion"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        discountPercentage: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServicePromotionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createProviderReportMutationVariablesSchema = zod_1.z.object({
    input: exports.createProviderReportInputSchema,
    condition: exports.modelProviderReportConditionInputSchema.optional().nullable(),
});
exports.createProviderReportMutationSchema = zod_1.z.object({
    createProviderReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderReport"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderReportsId: zod_1.z.string().optional().nullable(),
        providerProviderReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateProviderReportMutationVariablesSchema = zod_1.z.object({
    input: exports.updateProviderReportInputSchema,
    condition: exports.modelProviderReportConditionInputSchema.optional().nullable(),
});
exports.updateProviderReportMutationSchema = zod_1.z.object({
    updateProviderReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderReport"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderReportsId: zod_1.z.string().optional().nullable(),
        providerProviderReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteProviderReportMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteProviderReportInputSchema,
    condition: exports.modelProviderReportConditionInputSchema.optional().nullable(),
});
exports.deleteProviderReportMutationSchema = zod_1.z.object({
    deleteProviderReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderReport"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderReportsId: zod_1.z.string().optional().nullable(),
        providerProviderReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createUserReportMutationVariablesSchema = zod_1.z.object({
    input: exports.createUserReportInputSchema,
    condition: exports.modelUserReportConditionInputSchema.optional().nullable(),
});
exports.createUserReportMutationSchema = zod_1.z.object({
    createUserReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserReport"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserReportsId: zod_1.z.string().optional().nullable(),
        userUserReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateUserReportMutationVariablesSchema = zod_1.z.object({
    input: exports.updateUserReportInputSchema,
    condition: exports.modelUserReportConditionInputSchema.optional().nullable(),
});
exports.updateUserReportMutationSchema = zod_1.z.object({
    updateUserReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserReport"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserReportsId: zod_1.z.string().optional().nullable(),
        userUserReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteUserReportMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteUserReportInputSchema,
    condition: exports.modelUserReportConditionInputSchema.optional().nullable(),
});
exports.deleteUserReportMutationSchema = zod_1.z.object({
    deleteUserReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserReport"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserReportsId: zod_1.z.string().optional().nullable(),
        userUserReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createUserInvoiceMutationVariablesSchema = zod_1.z.object({
    input: exports.createUserInvoiceInputSchema,
    condition: exports.modelUserInvoiceConditionInputSchema.optional().nullable(),
});
exports.createUserInvoiceMutationSchema = zod_1.z.object({
    createUserInvoice: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserInvoice"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        dateIssued: zod_1.z.string(),
        dueDate: zod_1.z.string(),
        status: exports.invoiceStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserInvoicesId: zod_1.z.string().optional().nullable(),
        userUserInvoicesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateUserInvoiceMutationVariablesSchema = zod_1.z.object({
    input: exports.updateUserInvoiceInputSchema,
    condition: exports.modelUserInvoiceConditionInputSchema.optional().nullable(),
});
exports.updateUserInvoiceMutationSchema = zod_1.z.object({
    updateUserInvoice: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserInvoice"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        dateIssued: zod_1.z.string(),
        dueDate: zod_1.z.string(),
        status: exports.invoiceStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserInvoicesId: zod_1.z.string().optional().nullable(),
        userUserInvoicesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteUserInvoiceMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteUserInvoiceInputSchema,
    condition: exports.modelUserInvoiceConditionInputSchema.optional().nullable(),
});
exports.deleteUserInvoiceMutationSchema = zod_1.z.object({
    deleteUserInvoice: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserInvoice"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        dateIssued: zod_1.z.string(),
        dueDate: zod_1.z.string(),
        status: exports.invoiceStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserInvoicesId: zod_1.z.string().optional().nullable(),
        userUserInvoicesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createProviderBookmarkMutationVariablesSchema = zod_1.z.object({
    input: exports.createProviderBookmarkInputSchema,
    condition: exports.modelProviderBookmarkConditionInputSchema.optional().nullable(),
});
exports.createProviderBookmarkMutationSchema = zod_1.z.object({
    createProviderBookmark: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderBookmark"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateBookmarked: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderBookmarksId: zod_1.z.string().optional().nullable(),
        providerProviderBookmarksId: zod_1.z.string().optional().nullable(),
        userProviderBookmarksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateProviderBookmarkMutationVariablesSchema = zod_1.z.object({
    input: exports.updateProviderBookmarkInputSchema,
    condition: exports.modelProviderBookmarkConditionInputSchema.optional().nullable(),
});
exports.updateProviderBookmarkMutationSchema = zod_1.z.object({
    updateProviderBookmark: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderBookmark"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateBookmarked: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderBookmarksId: zod_1.z.string().optional().nullable(),
        providerProviderBookmarksId: zod_1.z.string().optional().nullable(),
        userProviderBookmarksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteProviderBookmarkMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteProviderBookmarkInputSchema,
    condition: exports.modelProviderBookmarkConditionInputSchema.optional().nullable(),
});
exports.deleteProviderBookmarkMutationSchema = zod_1.z.object({
    deleteProviderBookmark: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderBookmark"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateBookmarked: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderBookmarksId: zod_1.z.string().optional().nullable(),
        providerProviderBookmarksId: zod_1.z.string().optional().nullable(),
        userProviderBookmarksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createUserBookmarkMutationVariablesSchema = zod_1.z.object({
    input: exports.createUserBookmarkInputSchema,
    condition: exports.modelUserBookmarkConditionInputSchema.optional().nullable(),
});
exports.createUserBookmarkMutationSchema = zod_1.z.object({
    createUserBookmark: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserBookmark"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateBookmarked: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserBookmarksId: zod_1.z.string().optional().nullable(),
        userUserBookmarksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateUserBookmarkMutationVariablesSchema = zod_1.z.object({
    input: exports.updateUserBookmarkInputSchema,
    condition: exports.modelUserBookmarkConditionInputSchema.optional().nullable(),
});
exports.updateUserBookmarkMutationSchema = zod_1.z.object({
    updateUserBookmark: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserBookmark"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateBookmarked: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserBookmarksId: zod_1.z.string().optional().nullable(),
        userUserBookmarksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteUserBookmarkMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteUserBookmarkInputSchema,
    condition: exports.modelUserBookmarkConditionInputSchema.optional().nullable(),
});
exports.deleteUserBookmarkMutationSchema = zod_1.z.object({
    deleteUserBookmark: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserBookmark"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateBookmarked: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserBookmarksId: zod_1.z.string().optional().nullable(),
        userUserBookmarksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createProviderNotificationMutationVariablesSchema = zod_1.z.object({
    input: exports.createProviderNotificationInputSchema,
    condition: exports.modelProviderNotificationConditionInputSchema
        .optional()
        .nullable(),
});
exports.createProviderNotificationMutationSchema = zod_1.z.object({
    createProviderNotification: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderNotification"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        content: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.notificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderNotificationsId: zod_1.z.string().optional().nullable(),
        providerProviderNotificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateProviderNotificationMutationVariablesSchema = zod_1.z.object({
    input: exports.updateProviderNotificationInputSchema,
    condition: exports.modelProviderNotificationConditionInputSchema
        .optional()
        .nullable(),
});
exports.updateProviderNotificationMutationSchema = zod_1.z.object({
    updateProviderNotification: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderNotification"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        content: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.notificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderNotificationsId: zod_1.z.string().optional().nullable(),
        providerProviderNotificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteProviderNotificationMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteProviderNotificationInputSchema,
    condition: exports.modelProviderNotificationConditionInputSchema
        .optional()
        .nullable(),
});
exports.deleteProviderNotificationMutationSchema = zod_1.z.object({
    deleteProviderNotification: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderNotification"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        content: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.notificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderNotificationsId: zod_1.z.string().optional().nullable(),
        providerProviderNotificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createUserNotificationMutationVariablesSchema = zod_1.z.object({
    input: exports.createUserNotificationInputSchema,
    condition: exports.modelUserNotificationConditionInputSchema.optional().nullable(),
});
exports.createUserNotificationMutationSchema = zod_1.z.object({
    createUserNotification: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserNotification"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        content: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.notificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserNotificationsId: zod_1.z.string().optional().nullable(),
        userUserNotificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateUserNotificationMutationVariablesSchema = zod_1.z.object({
    input: exports.updateUserNotificationInputSchema,
    condition: exports.modelUserNotificationConditionInputSchema.optional().nullable(),
});
exports.updateUserNotificationMutationSchema = zod_1.z.object({
    updateUserNotification: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserNotification"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        content: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.notificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserNotificationsId: zod_1.z.string().optional().nullable(),
        userUserNotificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteUserNotificationMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteUserNotificationInputSchema,
    condition: exports.modelUserNotificationConditionInputSchema.optional().nullable(),
});
exports.deleteUserNotificationMutationSchema = zod_1.z.object({
    deleteUserNotification: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserNotification"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        content: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.notificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserNotificationsId: zod_1.z.string().optional().nullable(),
        userUserNotificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createServiceDiscountMutationVariablesSchema = zod_1.z.object({
    input: exports.createServiceDiscountInputSchema,
    condition: exports.modelServiceDiscountConditionInputSchema.optional().nullable(),
});
exports.createServiceDiscountMutationSchema = zod_1.z.object({
    createServiceDiscount: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceDiscount"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        discountPercentage: zod_1.z.number(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceDiscountsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateServiceDiscountMutationVariablesSchema = zod_1.z.object({
    input: exports.updateServiceDiscountInputSchema,
    condition: exports.modelServiceDiscountConditionInputSchema.optional().nullable(),
});
exports.updateServiceDiscountMutationSchema = zod_1.z.object({
    updateServiceDiscount: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceDiscount"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        discountPercentage: zod_1.z.number(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceDiscountsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteServiceDiscountMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteServiceDiscountInputSchema,
    condition: exports.modelServiceDiscountConditionInputSchema.optional().nullable(),
});
exports.deleteServiceDiscountMutationSchema = zod_1.z.object({
    deleteServiceDiscount: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceDiscount"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        discountPercentage: zod_1.z.number(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceDiscountsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createProviderAvailabilityMutationVariablesSchema = zod_1.z.object({
    input: exports.createProviderAvailabilityInputSchema,
    condition: exports.modelProviderAvailabilityConditionInputSchema
        .optional()
        .nullable(),
});
exports.createProviderAvailabilityMutationSchema = zod_1.z.object({
    createProviderAvailability: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderAvailability"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        isScheduled: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderAvailabilitiesId: zod_1.z.string().optional().nullable(),
        providerProviderAvailabilityId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateProviderAvailabilityMutationVariablesSchema = zod_1.z.object({
    input: exports.updateProviderAvailabilityInputSchema,
    condition: exports.modelProviderAvailabilityConditionInputSchema
        .optional()
        .nullable(),
});
exports.updateProviderAvailabilityMutationSchema = zod_1.z.object({
    updateProviderAvailability: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderAvailability"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        isScheduled: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderAvailabilitiesId: zod_1.z.string().optional().nullable(),
        providerProviderAvailabilityId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteProviderAvailabilityMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteProviderAvailabilityInputSchema,
    condition: exports.modelProviderAvailabilityConditionInputSchema
        .optional()
        .nullable(),
});
exports.deleteProviderAvailabilityMutationSchema = zod_1.z.object({
    deleteProviderAvailability: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderAvailability"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        isScheduled: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderAvailabilitiesId: zod_1.z.string().optional().nullable(),
        providerProviderAvailabilityId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createUserPreferenceMutationVariablesSchema = zod_1.z.object({
    input: exports.createUserPreferenceInputSchema,
    condition: exports.modelUserPreferenceConditionInputSchema.optional().nullable(),
});
exports.createUserPreferenceMutationSchema = zod_1.z.object({
    createUserPreference: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserPreference"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        preferenceType: zod_1.z.string(),
        preferenceValue: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserPreferencesId: zod_1.z.string().optional().nullable(),
        userUserPreferenceId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateUserPreferenceMutationVariablesSchema = zod_1.z.object({
    input: exports.updateUserPreferenceInputSchema,
    condition: exports.modelUserPreferenceConditionInputSchema.optional().nullable(),
});
exports.updateUserPreferenceMutationSchema = zod_1.z.object({
    updateUserPreference: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserPreference"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        preferenceType: zod_1.z.string(),
        preferenceValue: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserPreferencesId: zod_1.z.string().optional().nullable(),
        userUserPreferenceId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteUserPreferenceMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteUserPreferenceInputSchema,
    condition: exports.modelUserPreferenceConditionInputSchema.optional().nullable(),
});
exports.deleteUserPreferenceMutationSchema = zod_1.z.object({
    deleteUserPreference: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserPreference"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        preferenceType: zod_1.z.string(),
        preferenceValue: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserPreferencesId: zod_1.z.string().optional().nullable(),
        userUserPreferenceId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createProviderCertificationMutationVariablesSchema = zod_1.z.object({
    input: exports.createProviderCertificationInputSchema,
    condition: exports.modelProviderCertificationConditionInputSchema
        .optional()
        .nullable(),
});
exports.createProviderCertificationMutationSchema = zod_1.z.object({
    createProviderCertification: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderCertification"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        certificationName: zod_1.z.string(),
        issuedBy: zod_1.z.string(),
        validFrom: zod_1.z.string(),
        validUntil: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderCertificationsId: zod_1.z.string().optional().nullable(),
        providerProviderCertificationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateProviderCertificationMutationVariablesSchema = zod_1.z.object({
    input: exports.updateProviderCertificationInputSchema,
    condition: exports.modelProviderCertificationConditionInputSchema
        .optional()
        .nullable(),
});
exports.updateProviderCertificationMutationSchema = zod_1.z.object({
    updateProviderCertification: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderCertification"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        certificationName: zod_1.z.string(),
        issuedBy: zod_1.z.string(),
        validFrom: zod_1.z.string(),
        validUntil: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderCertificationsId: zod_1.z.string().optional().nullable(),
        providerProviderCertificationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteProviderCertificationMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteProviderCertificationInputSchema,
    condition: exports.modelProviderCertificationConditionInputSchema
        .optional()
        .nullable(),
});
exports.deleteProviderCertificationMutationSchema = zod_1.z.object({
    deleteProviderCertification: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderCertification"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        certificationName: zod_1.z.string(),
        issuedBy: zod_1.z.string(),
        validFrom: zod_1.z.string(),
        validUntil: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderCertificationsId: zod_1.z.string().optional().nullable(),
        providerProviderCertificationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createServiceVideoMutationVariablesSchema = zod_1.z.object({
    input: exports.createServiceVideoInputSchema,
    condition: exports.modelServiceVideoConditionInputSchema.optional().nullable(),
});
exports.createServiceVideoMutationSchema = zod_1.z.object({
    createServiceVideo: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceVideo"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        videoURL: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceVideosId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateServiceVideoMutationVariablesSchema = zod_1.z.object({
    input: exports.updateServiceVideoInputSchema,
    condition: exports.modelServiceVideoConditionInputSchema.optional().nullable(),
});
exports.updateServiceVideoMutationSchema = zod_1.z.object({
    updateServiceVideo: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceVideo"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        videoURL: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceVideosId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteServiceVideoMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteServiceVideoInputSchema,
    condition: exports.modelServiceVideoConditionInputSchema.optional().nullable(),
});
exports.deleteServiceVideoMutationSchema = zod_1.z.object({
    deleteServiceVideo: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceVideo"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        videoURL: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceVideosId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createServiceImageMutationVariablesSchema = zod_1.z.object({
    input: exports.createServiceImageInputSchema,
    condition: exports.modelServiceImageConditionInputSchema.optional().nullable(),
});
exports.createServiceImageMutationSchema = zod_1.z.object({
    createServiceImage: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceImage"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        imageURL: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceImagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateServiceImageMutationVariablesSchema = zod_1.z.object({
    input: exports.updateServiceImageInputSchema,
    condition: exports.modelServiceImageConditionInputSchema.optional().nullable(),
});
exports.updateServiceImageMutationSchema = zod_1.z.object({
    updateServiceImage: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceImage"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        imageURL: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceImagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteServiceImageMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteServiceImageInputSchema,
    condition: exports.modelServiceImageConditionInputSchema.optional().nullable(),
});
exports.deleteServiceImageMutationSchema = zod_1.z.object({
    deleteServiceImage: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceImage"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        imageURL: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceImagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createServiceReviewMutationVariablesSchema = zod_1.z.object({
    input: exports.createServiceReviewInputSchema,
    condition: exports.modelServiceReviewConditionInputSchema.optional().nullable(),
});
exports.createServiceReviewMutationSchema = zod_1.z.object({
    createServiceReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceReview"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceReviewsId: zod_1.z.string().optional().nullable(),
        userServiceReviewsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateServiceReviewMutationVariablesSchema = zod_1.z.object({
    input: exports.updateServiceReviewInputSchema,
    condition: exports.modelServiceReviewConditionInputSchema.optional().nullable(),
});
exports.updateServiceReviewMutationSchema = zod_1.z.object({
    updateServiceReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceReview"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceReviewsId: zod_1.z.string().optional().nullable(),
        userServiceReviewsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteServiceReviewMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteServiceReviewInputSchema,
    condition: exports.modelServiceReviewConditionInputSchema.optional().nullable(),
});
exports.deleteServiceReviewMutationSchema = zod_1.z.object({
    deleteServiceReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceReview"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceReviewsId: zod_1.z.string().optional().nullable(),
        userServiceReviewsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createAIDiagnosticsMutationVariablesSchema = zod_1.z.object({
    input: exports.createAIDiagnosticsInputSchema,
    condition: exports.modelAIDiagnosticsConditionInputSchema.optional().nullable(),
});
exports.createAIDiagnosticsMutationSchema = zod_1.z.object({
    createAIDiagnostics: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIDiagnostics"),
        id: zod_1.z.string(),
        aiChatBot: zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        diagnosticData: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        aIChatBotDiagnosticsId: zod_1.z.string().optional().nullable(),
        serviceAiDiagnosticsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateAIDiagnosticsMutationVariablesSchema = zod_1.z.object({
    input: exports.updateAIDiagnosticsInputSchema,
    condition: exports.modelAIDiagnosticsConditionInputSchema.optional().nullable(),
});
exports.updateAIDiagnosticsMutationSchema = zod_1.z.object({
    updateAIDiagnostics: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIDiagnostics"),
        id: zod_1.z.string(),
        aiChatBot: zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        diagnosticData: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        aIChatBotDiagnosticsId: zod_1.z.string().optional().nullable(),
        serviceAiDiagnosticsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteAIDiagnosticsMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteAIDiagnosticsInputSchema,
    condition: exports.modelAIDiagnosticsConditionInputSchema.optional().nullable(),
});
exports.deleteAIDiagnosticsMutationSchema = zod_1.z.object({
    deleteAIDiagnostics: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIDiagnostics"),
        id: zod_1.z.string(),
        aiChatBot: zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        diagnosticData: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        aIChatBotDiagnosticsId: zod_1.z.string().optional().nullable(),
        serviceAiDiagnosticsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createCustomizationMutationVariablesSchema = zod_1.z.object({
    input: exports.createCustomizationInputSchema,
    condition: exports.modelCustomizationConditionInputSchema.optional().nullable(),
});
exports.createCustomizationMutationSchema = zod_1.z.object({
    createCustomization: zod_1.z
        .object({
        __typename: zod_1.z.literal("Customization"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizationType: zod_1.z.string(),
        customizationValue: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceCustomizationsId: zod_1.z.string().optional().nullable(),
        userCustomizationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateCustomizationMutationVariablesSchema = zod_1.z.object({
    input: exports.updateCustomizationInputSchema,
    condition: exports.modelCustomizationConditionInputSchema.optional().nullable(),
});
exports.updateCustomizationMutationSchema = zod_1.z.object({
    updateCustomization: zod_1.z
        .object({
        __typename: zod_1.z.literal("Customization"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizationType: zod_1.z.string(),
        customizationValue: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceCustomizationsId: zod_1.z.string().optional().nullable(),
        userCustomizationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteCustomizationMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteCustomizationInputSchema,
    condition: exports.modelCustomizationConditionInputSchema.optional().nullable(),
});
exports.deleteCustomizationMutationSchema = zod_1.z.object({
    deleteCustomization: zod_1.z
        .object({
        __typename: zod_1.z.literal("Customization"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizationType: zod_1.z.string(),
        customizationValue: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceCustomizationsId: zod_1.z.string().optional().nullable(),
        userCustomizationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createExpenseMutationVariablesSchema = zod_1.z.object({
    input: exports.createExpenseInputSchema,
    condition: exports.modelExpenseConditionInputSchema.optional().nullable(),
});
exports.createExpenseMutationSchema = zod_1.z.object({
    createExpense: zod_1.z
        .object({
        __typename: zod_1.z.literal("Expense"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        description: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceExpensesId: zod_1.z.string().optional().nullable(),
        providerExpensesId: zod_1.z.string().optional().nullable(),
        userExpensesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateExpenseMutationVariablesSchema = zod_1.z.object({
    input: exports.updateExpenseInputSchema,
    condition: exports.modelExpenseConditionInputSchema.optional().nullable(),
});
exports.updateExpenseMutationSchema = zod_1.z.object({
    updateExpense: zod_1.z
        .object({
        __typename: zod_1.z.literal("Expense"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        description: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceExpensesId: zod_1.z.string().optional().nullable(),
        providerExpensesId: zod_1.z.string().optional().nullable(),
        userExpensesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteExpenseMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteExpenseInputSchema,
    condition: exports.modelExpenseConditionInputSchema.optional().nullable(),
});
exports.deleteExpenseMutationSchema = zod_1.z.object({
    deleteExpense: zod_1.z
        .object({
        __typename: zod_1.z.literal("Expense"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        description: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceExpensesId: zod_1.z.string().optional().nullable(),
        providerExpensesId: zod_1.z.string().optional().nullable(),
        userExpensesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createFavoriteProviderMutationVariablesSchema = zod_1.z.object({
    input: exports.createFavoriteProviderInputSchema,
    condition: exports.modelFavoriteProviderConditionInputSchema.optional().nullable(),
});
exports.createFavoriteProviderMutationSchema = zod_1.z.object({
    createFavoriteProvider: zod_1.z
        .object({
        __typename: zod_1.z.literal("FavoriteProvider"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateAdded: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        providerFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        userFavoriteProvidersId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateFavoriteProviderMutationVariablesSchema = zod_1.z.object({
    input: exports.updateFavoriteProviderInputSchema,
    condition: exports.modelFavoriteProviderConditionInputSchema.optional().nullable(),
});
exports.updateFavoriteProviderMutationSchema = zod_1.z.object({
    updateFavoriteProvider: zod_1.z
        .object({
        __typename: zod_1.z.literal("FavoriteProvider"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateAdded: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        providerFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        userFavoriteProvidersId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteFavoriteProviderMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteFavoriteProviderInputSchema,
    condition: exports.modelFavoriteProviderConditionInputSchema.optional().nullable(),
});
exports.deleteFavoriteProviderMutationSchema = zod_1.z.object({
    deleteFavoriteProvider: zod_1.z
        .object({
        __typename: zod_1.z.literal("FavoriteProvider"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateAdded: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        providerFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        userFavoriteProvidersId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createUserHistoryMutationVariablesSchema = zod_1.z.object({
    input: exports.createUserHistoryInputSchema,
    condition: exports.modelUserHistoryConditionInputSchema.optional().nullable(),
});
exports.createUserHistoryMutationSchema = zod_1.z.object({
    createUserHistory: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserHistory"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        action: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserHistoriesId: zod_1.z.string().optional().nullable(),
        userUserHistoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateUserHistoryMutationVariablesSchema = zod_1.z.object({
    input: exports.updateUserHistoryInputSchema,
    condition: exports.modelUserHistoryConditionInputSchema.optional().nullable(),
});
exports.updateUserHistoryMutationSchema = zod_1.z.object({
    updateUserHistory: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserHistory"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        action: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserHistoriesId: zod_1.z.string().optional().nullable(),
        userUserHistoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteUserHistoryMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteUserHistoryInputSchema,
    condition: exports.modelUserHistoryConditionInputSchema.optional().nullable(),
});
exports.deleteUserHistoryMutationSchema = zod_1.z.object({
    deleteUserHistory: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserHistory"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        action: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserHistoriesId: zod_1.z.string().optional().nullable(),
        userUserHistoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createProviderAwardMutationVariablesSchema = zod_1.z.object({
    input: exports.createProviderAwardInputSchema,
    condition: exports.modelProviderAwardConditionInputSchema.optional().nullable(),
});
exports.createProviderAwardMutationSchema = zod_1.z.object({
    createProviderAward: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderAward"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        awardName: zod_1.z.string(),
        awardedBy: zod_1.z.string(),
        dateAwarded: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderAwardsId: zod_1.z.string().optional().nullable(),
        providerProviderAwardsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateProviderAwardMutationVariablesSchema = zod_1.z.object({
    input: exports.updateProviderAwardInputSchema,
    condition: exports.modelProviderAwardConditionInputSchema.optional().nullable(),
});
exports.updateProviderAwardMutationSchema = zod_1.z.object({
    updateProviderAward: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderAward"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        awardName: zod_1.z.string(),
        awardedBy: zod_1.z.string(),
        dateAwarded: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderAwardsId: zod_1.z.string().optional().nullable(),
        providerProviderAwardsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteProviderAwardMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteProviderAwardInputSchema,
    condition: exports.modelProviderAwardConditionInputSchema.optional().nullable(),
});
exports.deleteProviderAwardMutationSchema = zod_1.z.object({
    deleteProviderAward: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderAward"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        awardName: zod_1.z.string(),
        awardedBy: zod_1.z.string(),
        dateAwarded: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderAwardsId: zod_1.z.string().optional().nullable(),
        providerProviderAwardsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createReferralMutationVariablesSchema = zod_1.z.object({
    input: exports.createReferralInputSchema,
    condition: exports.modelReferralConditionInputSchema.optional().nullable(),
});
exports.createReferralMutationSchema = zod_1.z.object({
    createReferral: zod_1.z
        .object({
        __typename: zod_1.z.literal("Referral"),
        id: zod_1.z.string(),
        referrer: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        referred: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateReferred: zod_1.z.string(),
        reward: zod_1.z
            .object({
            __typename: zod_1.z.literal("Reward"),
            id: zod_1.z.string(),
            rewardName: zod_1.z.string(),
            description: zod_1.z.string(),
            value: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
            userRewardsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        rewardReferralsId: zod_1.z.string().optional().nullable(),
        serviceReferralsId: zod_1.z.string().optional().nullable(),
        providerProviderReferralsId: zod_1.z.string().optional().nullable(),
        userReferralsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateReferralMutationVariablesSchema = zod_1.z.object({
    input: exports.updateReferralInputSchema,
    condition: exports.modelReferralConditionInputSchema.optional().nullable(),
});
exports.updateReferralMutationSchema = zod_1.z.object({
    updateReferral: zod_1.z
        .object({
        __typename: zod_1.z.literal("Referral"),
        id: zod_1.z.string(),
        referrer: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        referred: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateReferred: zod_1.z.string(),
        reward: zod_1.z
            .object({
            __typename: zod_1.z.literal("Reward"),
            id: zod_1.z.string(),
            rewardName: zod_1.z.string(),
            description: zod_1.z.string(),
            value: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
            userRewardsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        rewardReferralsId: zod_1.z.string().optional().nullable(),
        serviceReferralsId: zod_1.z.string().optional().nullable(),
        providerProviderReferralsId: zod_1.z.string().optional().nullable(),
        userReferralsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteReferralMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteReferralInputSchema,
    condition: exports.modelReferralConditionInputSchema.optional().nullable(),
});
exports.deleteReferralMutationSchema = zod_1.z.object({
    deleteReferral: zod_1.z
        .object({
        __typename: zod_1.z.literal("Referral"),
        id: zod_1.z.string(),
        referrer: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        referred: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateReferred: zod_1.z.string(),
        reward: zod_1.z
            .object({
            __typename: zod_1.z.literal("Reward"),
            id: zod_1.z.string(),
            rewardName: zod_1.z.string(),
            description: zod_1.z.string(),
            value: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
            userRewardsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        rewardReferralsId: zod_1.z.string().optional().nullable(),
        serviceReferralsId: zod_1.z.string().optional().nullable(),
        providerProviderReferralsId: zod_1.z.string().optional().nullable(),
        userReferralsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createTipMutationVariablesSchema = zod_1.z.object({
    input: exports.createTipInputSchema,
    condition: exports.modelTipConditionInputSchema.optional().nullable(),
});
exports.createTipMutationSchema = zod_1.z.object({
    createTip: zod_1.z
        .object({
        __typename: zod_1.z.literal("Tip"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderTipsId: zod_1.z.string().optional().nullable(),
        userTipsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateTipMutationVariablesSchema = zod_1.z.object({
    input: exports.updateTipInputSchema,
    condition: exports.modelTipConditionInputSchema.optional().nullable(),
});
exports.updateTipMutationSchema = zod_1.z.object({
    updateTip: zod_1.z
        .object({
        __typename: zod_1.z.literal("Tip"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderTipsId: zod_1.z.string().optional().nullable(),
        userTipsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteTipMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteTipInputSchema,
    condition: exports.modelTipConditionInputSchema.optional().nullable(),
});
exports.deleteTipMutationSchema = zod_1.z.object({
    deleteTip: zod_1.z
        .object({
        __typename: zod_1.z.literal("Tip"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderTipsId: zod_1.z.string().optional().nullable(),
        userTipsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createPaymentMethodMutationVariablesSchema = zod_1.z.object({
    input: exports.createPaymentMethodInputSchema,
    condition: exports.modelPaymentMethodConditionInputSchema.optional().nullable(),
});
exports.createPaymentMethodMutationSchema = zod_1.z.object({
    createPaymentMethod: zod_1.z
        .object({
        __typename: zod_1.z.literal("PaymentMethod"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        cardNumber: zod_1.z.string(),
        expiryDate: zod_1.z.string(),
        cardType: exports.cardTypeSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userPaymentMethodsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updatePaymentMethodMutationVariablesSchema = zod_1.z.object({
    input: exports.updatePaymentMethodInputSchema,
    condition: exports.modelPaymentMethodConditionInputSchema.optional().nullable(),
});
exports.updatePaymentMethodMutationSchema = zod_1.z.object({
    updatePaymentMethod: zod_1.z
        .object({
        __typename: zod_1.z.literal("PaymentMethod"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        cardNumber: zod_1.z.string(),
        expiryDate: zod_1.z.string(),
        cardType: exports.cardTypeSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userPaymentMethodsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deletePaymentMethodMutationVariablesSchema = zod_1.z.object({
    input: exports.deletePaymentMethodInputSchema,
    condition: exports.modelPaymentMethodConditionInputSchema.optional().nullable(),
});
exports.deletePaymentMethodMutationSchema = zod_1.z.object({
    deletePaymentMethod: zod_1.z
        .object({
        __typename: zod_1.z.literal("PaymentMethod"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        cardNumber: zod_1.z.string(),
        expiryDate: zod_1.z.string(),
        cardType: exports.cardTypeSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userPaymentMethodsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createInvoiceMutationVariablesSchema = zod_1.z.object({
    input: exports.createInvoiceInputSchema,
    condition: exports.modelInvoiceConditionInputSchema.optional().nullable(),
});
exports.createInvoiceMutationSchema = zod_1.z.object({
    createInvoice: zod_1.z
        .object({
        __typename: zod_1.z.literal("Invoice"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        dateIssued: zod_1.z.string(),
        dueDate: zod_1.z.string(),
        status: exports.invoiceStatusSchema.optional().nullable(),
        services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderInvoicesId: zod_1.z.string().optional().nullable(),
        userInvoicesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateInvoiceMutationVariablesSchema = zod_1.z.object({
    input: exports.updateInvoiceInputSchema,
    condition: exports.modelInvoiceConditionInputSchema.optional().nullable(),
});
exports.updateInvoiceMutationSchema = zod_1.z.object({
    updateInvoice: zod_1.z
        .object({
        __typename: zod_1.z.literal("Invoice"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        dateIssued: zod_1.z.string(),
        dueDate: zod_1.z.string(),
        status: exports.invoiceStatusSchema.optional().nullable(),
        services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderInvoicesId: zod_1.z.string().optional().nullable(),
        userInvoicesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteInvoiceMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteInvoiceInputSchema,
    condition: exports.modelInvoiceConditionInputSchema.optional().nullable(),
});
exports.deleteInvoiceMutationSchema = zod_1.z.object({
    deleteInvoice: zod_1.z
        .object({
        __typename: zod_1.z.literal("Invoice"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        dateIssued: zod_1.z.string(),
        dueDate: zod_1.z.string(),
        status: exports.invoiceStatusSchema.optional().nullable(),
        services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderInvoicesId: zod_1.z.string().optional().nullable(),
        userInvoicesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createContractMutationVariablesSchema = zod_1.z.object({
    input: exports.createContractInputSchema,
    condition: exports.modelContractConditionInputSchema.optional().nullable(),
});
exports.createContractMutationSchema = zod_1.z.object({
    createContract: zod_1.z
        .object({
        __typename: zod_1.z.literal("Contract"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        terms: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceContractsId: zod_1.z.string().optional().nullable(),
        providerProviderContractsId: zod_1.z.string().optional().nullable(),
        userContractsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateContractMutationVariablesSchema = zod_1.z.object({
    input: exports.updateContractInputSchema,
    condition: exports.modelContractConditionInputSchema.optional().nullable(),
});
exports.updateContractMutationSchema = zod_1.z.object({
    updateContract: zod_1.z
        .object({
        __typename: zod_1.z.literal("Contract"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        terms: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceContractsId: zod_1.z.string().optional().nullable(),
        providerProviderContractsId: zod_1.z.string().optional().nullable(),
        userContractsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteContractMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteContractInputSchema,
    condition: exports.modelContractConditionInputSchema.optional().nullable(),
});
exports.deleteContractMutationSchema = zod_1.z.object({
    deleteContract: zod_1.z
        .object({
        __typename: zod_1.z.literal("Contract"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        terms: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceContractsId: zod_1.z.string().optional().nullable(),
        providerProviderContractsId: zod_1.z.string().optional().nullable(),
        userContractsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createNicheServiceMutationVariablesSchema = zod_1.z.object({
    input: exports.createNicheServiceInputSchema,
    condition: exports.modelNicheServiceConditionInputSchema.optional().nullable(),
});
exports.createNicheServiceMutationSchema = zod_1.z.object({
    createNicheService: zod_1.z
        .object({
        __typename: zod_1.z.literal("NicheService"),
        id: zod_1.z.string(),
        serviceName: zod_1.z.string(),
        description: zod_1.z.string(),
        providers: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updateNicheServiceMutationVariablesSchema = zod_1.z.object({
    input: exports.updateNicheServiceInputSchema,
    condition: exports.modelNicheServiceConditionInputSchema.optional().nullable(),
});
exports.updateNicheServiceMutationSchema = zod_1.z.object({
    updateNicheService: zod_1.z
        .object({
        __typename: zod_1.z.literal("NicheService"),
        id: zod_1.z.string(),
        serviceName: zod_1.z.string(),
        description: zod_1.z.string(),
        providers: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deleteNicheServiceMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteNicheServiceInputSchema,
    condition: exports.modelNicheServiceConditionInputSchema.optional().nullable(),
});
exports.deleteNicheServiceMutationSchema = zod_1.z.object({
    deleteNicheService: zod_1.z
        .object({
        __typename: zod_1.z.literal("NicheService"),
        id: zod_1.z.string(),
        serviceName: zod_1.z.string(),
        description: zod_1.z.string(),
        providers: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createServicePackageMutationVariablesSchema = zod_1.z.object({
    input: exports.createServicePackageInputSchema,
    condition: exports.modelServicePackageConditionInputSchema.optional().nullable(),
});
exports.createServicePackageMutationSchema = zod_1.z.object({
    createServicePackage: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServicePackage"),
        id: zod_1.z.string(),
        packageName: zod_1.z.string(),
        services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        discount: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updateServicePackageMutationVariablesSchema = zod_1.z.object({
    input: exports.updateServicePackageInputSchema,
    condition: exports.modelServicePackageConditionInputSchema.optional().nullable(),
});
exports.updateServicePackageMutationSchema = zod_1.z.object({
    updateServicePackage: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServicePackage"),
        id: zod_1.z.string(),
        packageName: zod_1.z.string(),
        services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        discount: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deleteServicePackageMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteServicePackageInputSchema,
    condition: exports.modelServicePackageConditionInputSchema.optional().nullable(),
});
exports.deleteServicePackageMutationSchema = zod_1.z.object({
    deleteServicePackage: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServicePackage"),
        id: zod_1.z.string(),
        packageName: zod_1.z.string(),
        services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        discount: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createRewardMutationVariablesSchema = zod_1.z.object({
    input: exports.createRewardInputSchema,
    condition: exports.modelRewardConditionInputSchema.optional().nullable(),
});
exports.createRewardMutationSchema = zod_1.z.object({
    createReward: zod_1.z
        .object({
        __typename: zod_1.z.literal("Reward"),
        id: zod_1.z.string(),
        rewardName: zod_1.z.string(),
        description: zod_1.z.string(),
        value: zod_1.z.number(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
        userRewardsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateRewardMutationVariablesSchema = zod_1.z.object({
    input: exports.updateRewardInputSchema,
    condition: exports.modelRewardConditionInputSchema.optional().nullable(),
});
exports.updateRewardMutationSchema = zod_1.z.object({
    updateReward: zod_1.z
        .object({
        __typename: zod_1.z.literal("Reward"),
        id: zod_1.z.string(),
        rewardName: zod_1.z.string(),
        description: zod_1.z.string(),
        value: zod_1.z.number(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
        userRewardsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteRewardMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteRewardInputSchema,
    condition: exports.modelRewardConditionInputSchema.optional().nullable(),
});
exports.deleteRewardMutationSchema = zod_1.z.object({
    deleteReward: zod_1.z
        .object({
        __typename: zod_1.z.literal("Reward"),
        id: zod_1.z.string(),
        rewardName: zod_1.z.string(),
        description: zod_1.z.string(),
        value: zod_1.z.number(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
        userRewardsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createLoyaltyProgramMutationVariablesSchema = zod_1.z.object({
    input: exports.createLoyaltyProgramInputSchema,
    condition: exports.modelLoyaltyProgramConditionInputSchema.optional().nullable(),
});
exports.createLoyaltyProgramMutationSchema = zod_1.z.object({
    createLoyaltyProgram: zod_1.z
        .object({
        __typename: zod_1.z.literal("LoyaltyProgram"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        points: zod_1.z.number(),
        rewards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelRewardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userLoyaltyProgramsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateLoyaltyProgramMutationVariablesSchema = zod_1.z.object({
    input: exports.updateLoyaltyProgramInputSchema,
    condition: exports.modelLoyaltyProgramConditionInputSchema.optional().nullable(),
});
exports.updateLoyaltyProgramMutationSchema = zod_1.z.object({
    updateLoyaltyProgram: zod_1.z
        .object({
        __typename: zod_1.z.literal("LoyaltyProgram"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        points: zod_1.z.number(),
        rewards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelRewardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userLoyaltyProgramsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteLoyaltyProgramMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteLoyaltyProgramInputSchema,
    condition: exports.modelLoyaltyProgramConditionInputSchema.optional().nullable(),
});
exports.deleteLoyaltyProgramMutationSchema = zod_1.z.object({
    deleteLoyaltyProgram: zod_1.z
        .object({
        __typename: zod_1.z.literal("LoyaltyProgram"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        points: zod_1.z.number(),
        rewards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelRewardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userLoyaltyProgramsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createVerificationMutationVariablesSchema = zod_1.z.object({
    input: exports.createVerificationInputSchema,
    condition: exports.modelVerificationConditionInputSchema.optional().nullable(),
});
exports.createVerificationMutationSchema = zod_1.z.object({
    createVerification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Verification"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        verificationCode: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.verificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userVerificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateVerificationMutationVariablesSchema = zod_1.z.object({
    input: exports.updateVerificationInputSchema,
    condition: exports.modelVerificationConditionInputSchema.optional().nullable(),
});
exports.updateVerificationMutationSchema = zod_1.z.object({
    updateVerification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Verification"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        verificationCode: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.verificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userVerificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteVerificationMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteVerificationInputSchema,
    condition: exports.modelVerificationConditionInputSchema.optional().nullable(),
});
exports.deleteVerificationMutationSchema = zod_1.z.object({
    deleteVerification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Verification"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        verificationCode: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.verificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userVerificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createAnalyticsMutationVariablesSchema = zod_1.z.object({
    input: exports.createAnalyticsInputSchema,
    condition: exports.modelAnalyticsConditionInputSchema.optional().nullable(),
});
exports.createAnalyticsMutationSchema = zod_1.z.object({
    createAnalytics: zod_1.z
        .object({
        __typename: zod_1.z.literal("Analytics"),
        id: zod_1.z.string(),
        userCount: zod_1.z.number(),
        providerCount: zod_1.z.number(),
        serviceCount: zod_1.z.number(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updateAnalyticsMutationVariablesSchema = zod_1.z.object({
    input: exports.updateAnalyticsInputSchema,
    condition: exports.modelAnalyticsConditionInputSchema.optional().nullable(),
});
exports.updateAnalyticsMutationSchema = zod_1.z.object({
    updateAnalytics: zod_1.z
        .object({
        __typename: zod_1.z.literal("Analytics"),
        id: zod_1.z.string(),
        userCount: zod_1.z.number(),
        providerCount: zod_1.z.number(),
        serviceCount: zod_1.z.number(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deleteAnalyticsMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteAnalyticsInputSchema,
    condition: exports.modelAnalyticsConditionInputSchema.optional().nullable(),
});
exports.deleteAnalyticsMutationSchema = zod_1.z.object({
    deleteAnalytics: zod_1.z
        .object({
        __typename: zod_1.z.literal("Analytics"),
        id: zod_1.z.string(),
        userCount: zod_1.z.number(),
        providerCount: zod_1.z.number(),
        serviceCount: zod_1.z.number(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createPromoCodeMutationVariablesSchema = zod_1.z.object({
    input: exports.createPromoCodeInputSchema,
    condition: exports.modelPromoCodeConditionInputSchema.optional().nullable(),
});
exports.createPromoCodeMutationSchema = zod_1.z.object({
    createPromoCode: zod_1.z
        .object({
        __typename: zod_1.z.literal("PromoCode"),
        id: zod_1.z.string(),
        code: zod_1.z.string(),
        discount: zod_1.z.number(),
        validFrom: zod_1.z.string(),
        validUntil: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updatePromoCodeMutationVariablesSchema = zod_1.z.object({
    input: exports.updatePromoCodeInputSchema,
    condition: exports.modelPromoCodeConditionInputSchema.optional().nullable(),
});
exports.updatePromoCodeMutationSchema = zod_1.z.object({
    updatePromoCode: zod_1.z
        .object({
        __typename: zod_1.z.literal("PromoCode"),
        id: zod_1.z.string(),
        code: zod_1.z.string(),
        discount: zod_1.z.number(),
        validFrom: zod_1.z.string(),
        validUntil: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deletePromoCodeMutationVariablesSchema = zod_1.z.object({
    input: exports.deletePromoCodeInputSchema,
    condition: exports.modelPromoCodeConditionInputSchema.optional().nullable(),
});
exports.deletePromoCodeMutationSchema = zod_1.z.object({
    deletePromoCode: zod_1.z
        .object({
        __typename: zod_1.z.literal("PromoCode"),
        id: zod_1.z.string(),
        code: zod_1.z.string(),
        discount: zod_1.z.number(),
        validFrom: zod_1.z.string(),
        validUntil: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createReportMutationVariablesSchema = zod_1.z.object({
    input: exports.createReportInputSchema,
    condition: exports.modelReportConditionInputSchema.optional().nullable(),
});
exports.createReportMutationSchema = zod_1.z.object({
    createReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("Report"),
        id: zod_1.z.string(),
        reporter: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        reportedEntity: zod_1.z.string(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateReportMutationVariablesSchema = zod_1.z.object({
    input: exports.updateReportInputSchema,
    condition: exports.modelReportConditionInputSchema.optional().nullable(),
});
exports.updateReportMutationSchema = zod_1.z.object({
    updateReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("Report"),
        id: zod_1.z.string(),
        reporter: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        reportedEntity: zod_1.z.string(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteReportMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteReportInputSchema,
    condition: exports.modelReportConditionInputSchema.optional().nullable(),
});
exports.deleteReportMutationSchema = zod_1.z.object({
    deleteReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("Report"),
        id: zod_1.z.string(),
        reporter: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        reportedEntity: zod_1.z.string(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createJobTrackingMutationVariablesSchema = zod_1.z.object({
    input: exports.createJobTrackingInputSchema,
    condition: exports.modelJobTrackingConditionInputSchema.optional().nullable(),
});
exports.createJobTrackingMutationSchema = zod_1.z.object({
    createJobTracking: zod_1.z
        .object({
        __typename: zod_1.z.literal("JobTracking"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        status: exports.jobStatusSchema.optional().nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceJobTrackingsId: zod_1.z.string().optional().nullable(),
        providerJobTrackingId: zod_1.z.string().optional().nullable(),
        userJobTrackingsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateJobTrackingMutationVariablesSchema = zod_1.z.object({
    input: exports.updateJobTrackingInputSchema,
    condition: exports.modelJobTrackingConditionInputSchema.optional().nullable(),
});
exports.updateJobTrackingMutationSchema = zod_1.z.object({
    updateJobTracking: zod_1.z
        .object({
        __typename: zod_1.z.literal("JobTracking"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        status: exports.jobStatusSchema.optional().nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceJobTrackingsId: zod_1.z.string().optional().nullable(),
        providerJobTrackingId: zod_1.z.string().optional().nullable(),
        userJobTrackingsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteJobTrackingMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteJobTrackingInputSchema,
    condition: exports.modelJobTrackingConditionInputSchema.optional().nullable(),
});
exports.deleteJobTrackingMutationSchema = zod_1.z.object({
    deleteJobTracking: zod_1.z
        .object({
        __typename: zod_1.z.literal("JobTracking"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        status: exports.jobStatusSchema.optional().nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceJobTrackingsId: zod_1.z.string().optional().nullable(),
        providerJobTrackingId: zod_1.z.string().optional().nullable(),
        userJobTrackingsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createAIChatLogMutationVariablesSchema = zod_1.z.object({
    input: exports.createAIChatLogInputSchema,
    condition: exports.modelAIChatLogConditionInputSchema.optional().nullable(),
});
exports.createAIChatLogMutationSchema = zod_1.z.object({
    createAIChatLog: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIChatLog"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatBot: zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        message: zod_1.z.string(),
        response: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        aIChatBotChatLogsId: zod_1.z.string().optional().nullable(),
        userAiChatLogsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateAIChatLogMutationVariablesSchema = zod_1.z.object({
    input: exports.updateAIChatLogInputSchema,
    condition: exports.modelAIChatLogConditionInputSchema.optional().nullable(),
});
exports.updateAIChatLogMutationSchema = zod_1.z.object({
    updateAIChatLog: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIChatLog"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatBot: zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        message: zod_1.z.string(),
        response: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        aIChatBotChatLogsId: zod_1.z.string().optional().nullable(),
        userAiChatLogsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteAIChatLogMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteAIChatLogInputSchema,
    condition: exports.modelAIChatLogConditionInputSchema.optional().nullable(),
});
exports.deleteAIChatLogMutationSchema = zod_1.z.object({
    deleteAIChatLog: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIChatLog"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatBot: zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        message: zod_1.z.string(),
        response: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        aIChatBotChatLogsId: zod_1.z.string().optional().nullable(),
        userAiChatLogsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createAIChatBotMutationVariablesSchema = zod_1.z.object({
    input: exports.createAIChatBotInputSchema,
    condition: exports.modelAIChatBotConditionInputSchema.optional().nullable(),
});
exports.createAIChatBotMutationSchema = zod_1.z.object({
    createAIChatBot: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIChatBot"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        version: zod_1.z.string(),
        diagnostics: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        chatLogs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatLogConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userAiChatBotsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateAIChatBotMutationVariablesSchema = zod_1.z.object({
    input: exports.updateAIChatBotInputSchema,
    condition: exports.modelAIChatBotConditionInputSchema.optional().nullable(),
});
exports.updateAIChatBotMutationSchema = zod_1.z.object({
    updateAIChatBot: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIChatBot"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        version: zod_1.z.string(),
        diagnostics: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        chatLogs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatLogConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userAiChatBotsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteAIChatBotMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteAIChatBotInputSchema,
    condition: exports.modelAIChatBotConditionInputSchema.optional().nullable(),
});
exports.deleteAIChatBotMutationSchema = zod_1.z.object({
    deleteAIChatBot: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIChatBot"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        version: zod_1.z.string(),
        diagnostics: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        chatLogs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatLogConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userAiChatBotsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createMainCategoryMutationVariablesSchema = zod_1.z.object({
    input: exports.createMainCategoryInputSchema,
    condition: exports.modelMainCategoryConditionInputSchema.optional().nullable(),
});
exports.createMainCategoryMutationSchema = zod_1.z.object({
    createMainCategory: zod_1.z
        .object({
        __typename: zod_1.z.literal("MainCategory"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        descrption: zod_1.z.string().optional().nullable(),
        SubCategories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelSubCategoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updateMainCategoryMutationVariablesSchema = zod_1.z.object({
    input: exports.updateMainCategoryInputSchema,
    condition: exports.modelMainCategoryConditionInputSchema.optional().nullable(),
});
exports.updateMainCategoryMutationSchema = zod_1.z.object({
    updateMainCategory: zod_1.z
        .object({
        __typename: zod_1.z.literal("MainCategory"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        descrption: zod_1.z.string().optional().nullable(),
        SubCategories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelSubCategoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deleteMainCategoryMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteMainCategoryInputSchema,
    condition: exports.modelMainCategoryConditionInputSchema.optional().nullable(),
});
exports.deleteMainCategoryMutationSchema = zod_1.z.object({
    deleteMainCategory: zod_1.z
        .object({
        __typename: zod_1.z.literal("MainCategory"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        descrption: zod_1.z.string().optional().nullable(),
        SubCategories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelSubCategoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createSubCategoryMutationVariablesSchema = zod_1.z.object({
    input: exports.createSubCategoryInputSchema,
    condition: exports.modelSubCategoryConditionInputSchema.optional().nullable(),
});
exports.createSubCategoryMutationSchema = zod_1.z.object({
    createSubCategory: zod_1.z
        .object({
        __typename: zod_1.z.literal("SubCategory"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        MainCategory: zod_1.z
            .object({
            __typename: zod_1.z.literal("MainCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            descrption: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        Services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateSubCategoryMutationVariablesSchema = zod_1.z.object({
    input: exports.updateSubCategoryInputSchema,
    condition: exports.modelSubCategoryConditionInputSchema.optional().nullable(),
});
exports.updateSubCategoryMutationSchema = zod_1.z.object({
    updateSubCategory: zod_1.z
        .object({
        __typename: zod_1.z.literal("SubCategory"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        MainCategory: zod_1.z
            .object({
            __typename: zod_1.z.literal("MainCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            descrption: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        Services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteSubCategoryMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteSubCategoryInputSchema,
    condition: exports.modelSubCategoryConditionInputSchema.optional().nullable(),
});
exports.deleteSubCategoryMutationSchema = zod_1.z.object({
    deleteSubCategory: zod_1.z
        .object({
        __typename: zod_1.z.literal("SubCategory"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        MainCategory: zod_1.z
            .object({
            __typename: zod_1.z.literal("MainCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            descrption: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        Services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createPLMBRSubscriptionMutationVariablesSchema = zod_1.z.object({
    input: exports.createPLMBRSubscriptionInputSchema,
    condition: exports.modelPLMBRSubscriptionConditionInputSchema.optional().nullable(),
});
exports.createPLMBRSubscriptionMutationSchema = zod_1.z.object({
    createPLMBRSubscription: zod_1.z
        .object({
        __typename: zod_1.z.literal("PLMBRSubscription"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userSubscriptionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updatePLMBRSubscriptionMutationVariablesSchema = zod_1.z.object({
    input: exports.updatePLMBRSubscriptionInputSchema,
    condition: exports.modelPLMBRSubscriptionConditionInputSchema.optional().nullable(),
});
exports.updatePLMBRSubscriptionMutationSchema = zod_1.z.object({
    updatePLMBRSubscription: zod_1.z
        .object({
        __typename: zod_1.z.literal("PLMBRSubscription"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userSubscriptionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deletePLMBRSubscriptionMutationVariablesSchema = zod_1.z.object({
    input: exports.deletePLMBRSubscriptionInputSchema,
    condition: exports.modelPLMBRSubscriptionConditionInputSchema.optional().nullable(),
});
exports.deletePLMBRSubscriptionMutationSchema = zod_1.z.object({
    deletePLMBRSubscription: zod_1.z
        .object({
        __typename: zod_1.z.literal("PLMBRSubscription"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userSubscriptionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createUserSettingsMutationVariablesSchema = zod_1.z.object({
    input: exports.createUserSettingsInputSchema,
    condition: exports.modelUserSettingsConditionInputSchema.optional().nullable(),
});
exports.createUserSettingsMutationSchema = zod_1.z.object({
    createUserSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserSettings"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updateUserSettingsMutationVariablesSchema = zod_1.z.object({
    input: exports.updateUserSettingsInputSchema,
    condition: exports.modelUserSettingsConditionInputSchema.optional().nullable(),
});
exports.updateUserSettingsMutationSchema = zod_1.z.object({
    updateUserSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserSettings"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deleteUserSettingsMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteUserSettingsInputSchema,
    condition: exports.modelUserSettingsConditionInputSchema.optional().nullable(),
});
exports.deleteUserSettingsMutationSchema = zod_1.z.object({
    deleteUserSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserSettings"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createProviderSettingsMutationVariablesSchema = zod_1.z.object({
    input: exports.createProviderSettingsInputSchema,
    condition: exports.modelProviderSettingsConditionInputSchema.optional().nullable(),
});
exports.createProviderSettingsMutationSchema = zod_1.z.object({
    createProviderSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderSettings"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updateProviderSettingsMutationVariablesSchema = zod_1.z.object({
    input: exports.updateProviderSettingsInputSchema,
    condition: exports.modelProviderSettingsConditionInputSchema.optional().nullable(),
});
exports.updateProviderSettingsMutationSchema = zod_1.z.object({
    updateProviderSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderSettings"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deleteProviderSettingsMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteProviderSettingsInputSchema,
    condition: exports.modelProviderSettingsConditionInputSchema.optional().nullable(),
});
exports.deleteProviderSettingsMutationSchema = zod_1.z.object({
    deleteProviderSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderSettings"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createPortfolioMutationVariablesSchema = zod_1.z.object({
    input: exports.createPortfolioInputSchema,
    condition: exports.modelPortfolioConditionInputSchema.optional().nullable(),
});
exports.createPortfolioMutationSchema = zod_1.z.object({
    createPortfolio: zod_1.z
        .object({
        __typename: zod_1.z.literal("Portfolio"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updatePortfolioMutationVariablesSchema = zod_1.z.object({
    input: exports.updatePortfolioInputSchema,
    condition: exports.modelPortfolioConditionInputSchema.optional().nullable(),
});
exports.updatePortfolioMutationSchema = zod_1.z.object({
    updatePortfolio: zod_1.z
        .object({
        __typename: zod_1.z.literal("Portfolio"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deletePortfolioMutationVariablesSchema = zod_1.z.object({
    input: exports.deletePortfolioInputSchema,
    condition: exports.modelPortfolioConditionInputSchema.optional().nullable(),
});
exports.deletePortfolioMutationSchema = zod_1.z.object({
    deletePortfolio: zod_1.z
        .object({
        __typename: zod_1.z.literal("Portfolio"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createServiceVariantMutationVariablesSchema = zod_1.z.object({
    input: exports.createServiceVariantInputSchema,
    condition: exports.modelServiceVariantConditionInputSchema.optional().nullable(),
});
exports.createServiceVariantMutationSchema = zod_1.z.object({
    createServiceVariant: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceVariant"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updateServiceVariantMutationVariablesSchema = zod_1.z.object({
    input: exports.updateServiceVariantInputSchema,
    condition: exports.modelServiceVariantConditionInputSchema.optional().nullable(),
});
exports.updateServiceVariantMutationSchema = zod_1.z.object({
    updateServiceVariant: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceVariant"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deleteServiceVariantMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteServiceVariantInputSchema,
    condition: exports.modelServiceVariantConditionInputSchema.optional().nullable(),
});
exports.deleteServiceVariantMutationSchema = zod_1.z.object({
    deleteServiceVariant: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceVariant"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createServiceHighlightMutationVariablesSchema = zod_1.z.object({
    input: exports.createServiceHighlightInputSchema,
    condition: exports.modelServiceHighlightConditionInputSchema.optional().nullable(),
});
exports.createServiceHighlightMutationSchema = zod_1.z.object({
    createServiceHighlight: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceHighlight"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updateServiceHighlightMutationVariablesSchema = zod_1.z.object({
    input: exports.updateServiceHighlightInputSchema,
    condition: exports.modelServiceHighlightConditionInputSchema.optional().nullable(),
});
exports.updateServiceHighlightMutationSchema = zod_1.z.object({
    updateServiceHighlight: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceHighlight"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deleteServiceHighlightMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteServiceHighlightInputSchema,
    condition: exports.modelServiceHighlightConditionInputSchema.optional().nullable(),
});
exports.deleteServiceHighlightMutationSchema = zod_1.z.object({
    deleteServiceHighlight: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceHighlight"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createServiceTagMutationVariablesSchema = zod_1.z.object({
    input: exports.createServiceTagInputSchema,
    condition: exports.modelServiceTagConditionInputSchema.optional().nullable(),
});
exports.createServiceTagMutationSchema = zod_1.z.object({
    createServiceTag: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceTag"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updateServiceTagMutationVariablesSchema = zod_1.z.object({
    input: exports.updateServiceTagInputSchema,
    condition: exports.modelServiceTagConditionInputSchema.optional().nullable(),
});
exports.updateServiceTagMutationSchema = zod_1.z.object({
    updateServiceTag: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceTag"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deleteServiceTagMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteServiceTagInputSchema,
    condition: exports.modelServiceTagConditionInputSchema.optional().nullable(),
});
exports.deleteServiceTagMutationSchema = zod_1.z.object({
    deleteServiceTag: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceTag"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createServiceFAQMutationVariablesSchema = zod_1.z.object({
    input: exports.createServiceFAQInputSchema,
    condition: exports.modelServiceFAQConditionInputSchema.optional().nullable(),
});
exports.createServiceFAQMutationSchema = zod_1.z.object({
    createServiceFAQ: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceFAQ"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updateServiceFAQMutationVariablesSchema = zod_1.z.object({
    input: exports.updateServiceFAQInputSchema,
    condition: exports.modelServiceFAQConditionInputSchema.optional().nullable(),
});
exports.updateServiceFAQMutationSchema = zod_1.z.object({
    updateServiceFAQ: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceFAQ"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deleteServiceFAQMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteServiceFAQInputSchema,
    condition: exports.modelServiceFAQConditionInputSchema.optional().nullable(),
});
exports.deleteServiceFAQMutationSchema = zod_1.z.object({
    deleteServiceFAQ: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceFAQ"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createFeedbackMutationVariablesSchema = zod_1.z.object({
    input: exports.createFeedbackInputSchema,
    condition: exports.modelFeedbackConditionInputSchema.optional().nullable(),
});
exports.createFeedbackMutationSchema = zod_1.z.object({
    createFeedback: zod_1.z
        .object({
        __typename: zod_1.z.literal("Feedback"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userFeedbacksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateFeedbackMutationVariablesSchema = zod_1.z.object({
    input: exports.updateFeedbackInputSchema,
    condition: exports.modelFeedbackConditionInputSchema.optional().nullable(),
});
exports.updateFeedbackMutationSchema = zod_1.z.object({
    updateFeedback: zod_1.z
        .object({
        __typename: zod_1.z.literal("Feedback"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userFeedbacksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteFeedbackMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteFeedbackInputSchema,
    condition: exports.modelFeedbackConditionInputSchema.optional().nullable(),
});
exports.deleteFeedbackMutationSchema = zod_1.z.object({
    deleteFeedback: zod_1.z
        .object({
        __typename: zod_1.z.literal("Feedback"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userFeedbacksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createEquipmentInputSchema = zod_1.z.object({
    id: zod_1.z.string().optional().nullable(),
    providerID: zod_1.z.string(),
    name: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    category: exports.equipmentCategorySchema.optional().nullable(),
    availabilityStatus: exports.equipmentAvailabilityStatusSchema.optional().nullable(),
    purchaseDate: zod_1.z.string().optional().nullable(),
    maintenanceDate: zod_1.z.string().optional().nullable(),
    image: zod_1.z.string().optional().nullable(),
    _version: zod_1.z.number().optional().nullable(),
});
exports.createEquipmentMutationSchema = zod_1.z.object({
    createEquipment: zod_1.z
        .object({
        __typename: zod_1.z.literal("Equipment"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        category: exports.equipmentCategorySchema.optional().nullable(),
        availabilityStatus: exports.equipmentAvailabilityStatusSchema
            .optional()
            .nullable(),
        purchaseDate: zod_1.z.string().optional().nullable(),
        maintenanceDate: zod_1.z.string().optional().nullable(),
        image: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updateEquipmentMutationVariablesSchema = zod_1.z.object({
    input: exports.updateEquipmentInputSchema,
    condition: exports.modelEquipmentConditionInputSchema.optional().nullable(),
});
exports.updateEquipmentMutationSchema = zod_1.z.object({
    updateEquipment: zod_1.z
        .object({
        __typename: zod_1.z.literal("Equipment"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        category: exports.equipmentCategorySchema.optional().nullable(),
        availabilityStatus: exports.equipmentAvailabilityStatusSchema
            .optional()
            .nullable(),
        purchaseDate: zod_1.z.string().optional().nullable(),
        maintenanceDate: zod_1.z.string().optional().nullable(),
        image: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deleteEquipmentMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteEquipmentInputSchema,
    condition: exports.modelEquipmentConditionInputSchema.optional().nullable(),
});
exports.deleteEquipmentMutationSchema = zod_1.z.object({
    deleteEquipment: zod_1.z
        .object({
        __typename: zod_1.z.literal("Equipment"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        category: exports.equipmentCategorySchema.optional().nullable(),
        availabilityStatus: exports.equipmentAvailabilityStatusSchema
            .optional()
            .nullable(),
        purchaseDate: zod_1.z.string().optional().nullable(),
        maintenanceDate: zod_1.z.string().optional().nullable(),
        image: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createWalletMutationVariablesSchema = zod_1.z.object({
    input: exports.createWalletInputSchema,
    condition: exports.modelWalletConditionInputSchema.optional().nullable(),
});
exports.createWalletMutationSchema = zod_1.z.object({
    createWallet: zod_1.z
        .object({
        __typename: zod_1.z.literal("Wallet"),
        id: zod_1.z.string(),
        ownerID: zod_1.z.string(),
        balance: zod_1.z.number(),
        currency: zod_1.z.string(),
        transactions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTransactionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        lastUpdated: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updateWalletMutationVariablesSchema = zod_1.z.object({
    input: exports.updateWalletInputSchema,
    condition: exports.modelWalletConditionInputSchema.optional().nullable(),
});
exports.updateWalletMutationSchema = zod_1.z.object({
    updateWallet: zod_1.z
        .object({
        __typename: zod_1.z.literal("Wallet"),
        id: zod_1.z.string(),
        ownerID: zod_1.z.string(),
        balance: zod_1.z.number(),
        currency: zod_1.z.string(),
        transactions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTransactionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        lastUpdated: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deleteWalletMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteWalletInputSchema,
    condition: exports.modelWalletConditionInputSchema.optional().nullable(),
});
exports.deleteWalletMutationSchema = zod_1.z.object({
    deleteWallet: zod_1.z
        .object({
        __typename: zod_1.z.literal("Wallet"),
        id: zod_1.z.string(),
        ownerID: zod_1.z.string(),
        balance: zod_1.z.number(),
        currency: zod_1.z.string(),
        transactions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTransactionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        lastUpdated: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createTransactionMutationVariablesSchema = zod_1.z.object({
    input: exports.createTransactionInputSchema,
    condition: exports.modelTransactionConditionInputSchema.optional().nullable(),
});
exports.createTransactionMutationSchema = zod_1.z.object({
    createTransaction: zod_1.z
        .object({
        __typename: zod_1.z.literal("Transaction"),
        id: zod_1.z.string(),
        wallet: zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        type: exports.transactionTypeSchema.optional().nullable(),
        description: zod_1.z.string().optional().nullable(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        walletTransactionsId: zod_1.z.string().optional().nullable(),
        userTransactionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateTransactionMutationVariablesSchema = zod_1.z.object({
    input: exports.updateTransactionInputSchema,
    condition: exports.modelTransactionConditionInputSchema.optional().nullable(),
});
exports.updateTransactionMutationSchema = zod_1.z.object({
    updateTransaction: zod_1.z
        .object({
        __typename: zod_1.z.literal("Transaction"),
        id: zod_1.z.string(),
        wallet: zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        type: exports.transactionTypeSchema.optional().nullable(),
        description: zod_1.z.string().optional().nullable(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        walletTransactionsId: zod_1.z.string().optional().nullable(),
        userTransactionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteTransactionMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteTransactionInputSchema,
    condition: exports.modelTransactionConditionInputSchema.optional().nullable(),
});
exports.deleteTransactionMutationSchema = zod_1.z.object({
    deleteTransaction: zod_1.z
        .object({
        __typename: zod_1.z.literal("Transaction"),
        id: zod_1.z.string(),
        wallet: zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        type: exports.transactionTypeSchema.optional().nullable(),
        description: zod_1.z.string().optional().nullable(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        walletTransactionsId: zod_1.z.string().optional().nullable(),
        userTransactionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createReviewMutationVariablesSchema = zod_1.z.object({
    input: exports.createReviewInputSchema,
    condition: exports.modelReviewConditionInputSchema.optional().nullable(),
});
exports.createReviewMutationSchema = zod_1.z.object({
    createReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("Review"),
        id: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string().optional().nullable(),
        date: zod_1.z.string(),
        response: zod_1.z
            .object({
            __typename: zod_1.z.literal("ReviewResponse"),
            id: zod_1.z.string(),
            responseText: zod_1.z.string(),
            responseDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            reviewResponseReviewId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceReviewsId: zod_1.z.string().optional().nullable(),
        providerReviewsId: zod_1.z.string().optional().nullable(),
        userReviewsId: zod_1.z.string().optional().nullable(),
        reviewResponseId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateReviewMutationVariablesSchema = zod_1.z.object({
    input: exports.updateReviewInputSchema,
    condition: exports.modelReviewConditionInputSchema.optional().nullable(),
});
exports.updateReviewMutationSchema = zod_1.z.object({
    updateReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("Review"),
        id: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string().optional().nullable(),
        date: zod_1.z.string(),
        response: zod_1.z
            .object({
            __typename: zod_1.z.literal("ReviewResponse"),
            id: zod_1.z.string(),
            responseText: zod_1.z.string(),
            responseDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            reviewResponseReviewId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceReviewsId: zod_1.z.string().optional().nullable(),
        providerReviewsId: zod_1.z.string().optional().nullable(),
        userReviewsId: zod_1.z.string().optional().nullable(),
        reviewResponseId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteReviewMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteReviewInputSchema,
    condition: exports.modelReviewConditionInputSchema.optional().nullable(),
});
exports.deleteReviewMutationSchema = zod_1.z.object({
    deleteReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("Review"),
        id: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string().optional().nullable(),
        date: zod_1.z.string(),
        response: zod_1.z
            .object({
            __typename: zod_1.z.literal("ReviewResponse"),
            id: zod_1.z.string(),
            responseText: zod_1.z.string(),
            responseDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            reviewResponseReviewId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceReviewsId: zod_1.z.string().optional().nullable(),
        providerReviewsId: zod_1.z.string().optional().nullable(),
        userReviewsId: zod_1.z.string().optional().nullable(),
        reviewResponseId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createReviewResponseMutationVariablesSchema = zod_1.z.object({
    input: exports.createReviewResponseInputSchema,
    condition: exports.modelReviewResponseConditionInputSchema.optional().nullable(),
});
exports.createReviewResponseMutationSchema = zod_1.z.object({
    createReviewResponse: zod_1.z
        .object({
        __typename: zod_1.z.literal("ReviewResponse"),
        id: zod_1.z.string(),
        review: zod_1.z
            .object({
            __typename: zod_1.z.literal("Review"),
            id: zod_1.z.string(),
            rating: zod_1.z.number(),
            comment: zod_1.z.string().optional().nullable(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceReviewsId: zod_1.z.string().optional().nullable(),
            providerReviewsId: zod_1.z.string().optional().nullable(),
            userReviewsId: zod_1.z.string().optional().nullable(),
            reviewResponseId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        responseText: zod_1.z.string(),
        responseDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        reviewResponseReviewId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateReviewResponseMutationVariablesSchema = zod_1.z.object({
    input: exports.updateReviewResponseInputSchema,
    condition: exports.modelReviewResponseConditionInputSchema.optional().nullable(),
});
exports.updateReviewResponseMutationSchema = zod_1.z.object({
    updateReviewResponse: zod_1.z
        .object({
        __typename: zod_1.z.literal("ReviewResponse"),
        id: zod_1.z.string(),
        review: zod_1.z
            .object({
            __typename: zod_1.z.literal("Review"),
            id: zod_1.z.string(),
            rating: zod_1.z.number(),
            comment: zod_1.z.string().optional().nullable(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceReviewsId: zod_1.z.string().optional().nullable(),
            providerReviewsId: zod_1.z.string().optional().nullable(),
            userReviewsId: zod_1.z.string().optional().nullable(),
            reviewResponseId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        responseText: zod_1.z.string(),
        responseDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        reviewResponseReviewId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteReviewResponseMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteReviewResponseInputSchema,
    condition: exports.modelReviewResponseConditionInputSchema.optional().nullable(),
});
exports.deleteReviewResponseMutationSchema = zod_1.z.object({
    deleteReviewResponse: zod_1.z
        .object({
        __typename: zod_1.z.literal("ReviewResponse"),
        id: zod_1.z.string(),
        review: zod_1.z
            .object({
            __typename: zod_1.z.literal("Review"),
            id: zod_1.z.string(),
            rating: zod_1.z.number(),
            comment: zod_1.z.string().optional().nullable(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceReviewsId: zod_1.z.string().optional().nullable(),
            providerReviewsId: zod_1.z.string().optional().nullable(),
            userReviewsId: zod_1.z.string().optional().nullable(),
            reviewResponseId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        responseText: zod_1.z.string(),
        responseDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        reviewResponseReviewId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createMessageThreadMutationVariablesSchema = zod_1.z.object({
    input: exports.createMessageThreadInputSchema,
    condition: exports.modelMessageThreadConditionInputSchema.optional().nullable(),
});
exports.createMessageThreadMutationSchema = zod_1.z.object({
    createMessageThread: zod_1.z
        .object({
        __typename: zod_1.z.literal("MessageThread"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        messages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageContentConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        lastMessageDate: zod_1.z.string().optional().nullable(),
        lastMessageContent: zod_1.z.string().optional().nullable(),
        status: exports.messageStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderMessagesId: zod_1.z.string().optional().nullable(),
        userMessagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateMessageThreadMutationVariablesSchema = zod_1.z.object({
    input: exports.updateMessageThreadInputSchema,
    condition: exports.modelMessageThreadConditionInputSchema.optional().nullable(),
});
exports.updateMessageThreadMutationSchema = zod_1.z.object({
    updateMessageThread: zod_1.z
        .object({
        __typename: zod_1.z.literal("MessageThread"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        messages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageContentConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        lastMessageDate: zod_1.z.string().optional().nullable(),
        lastMessageContent: zod_1.z.string().optional().nullable(),
        status: exports.messageStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderMessagesId: zod_1.z.string().optional().nullable(),
        userMessagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteMessageThreadMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteMessageThreadInputSchema,
    condition: exports.modelMessageThreadConditionInputSchema.optional().nullable(),
});
exports.deleteMessageThreadMutationSchema = zod_1.z.object({
    deleteMessageThread: zod_1.z
        .object({
        __typename: zod_1.z.literal("MessageThread"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        messages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageContentConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        lastMessageDate: zod_1.z.string().optional().nullable(),
        lastMessageContent: zod_1.z.string().optional().nullable(),
        status: exports.messageStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderMessagesId: zod_1.z.string().optional().nullable(),
        userMessagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createMessageContentMutationVariablesSchema = zod_1.z.object({
    input: exports.createMessageContentInputSchema,
    condition: exports.modelMessageContentConditionInputSchema.optional().nullable(),
});
exports.createMessageContentMutationSchema = zod_1.z.object({
    createMessageContent: zod_1.z
        .object({
        __typename: zod_1.z.literal("MessageContent"),
        id: zod_1.z.string(),
        thread: zod_1.z
            .object({
            __typename: zod_1.z.literal("MessageThread"),
            id: zod_1.z.string(),
            lastMessageDate: zod_1.z.string().optional().nullable(),
            lastMessageContent: zod_1.z.string().optional().nullable(),
            status: exports.messageStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderMessagesId: zod_1.z.string().optional().nullable(),
            userMessagesId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        sender: zod_1.z.string().optional().nullable(),
        content: zod_1.z.string(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        messageThreadMessagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateMessageContentMutationVariablesSchema = zod_1.z.object({
    input: exports.updateMessageContentInputSchema,
    condition: exports.modelMessageContentConditionInputSchema.optional().nullable(),
});
exports.updateMessageContentMutationSchema = zod_1.z.object({
    updateMessageContent: zod_1.z
        .object({
        __typename: zod_1.z.literal("MessageContent"),
        id: zod_1.z.string(),
        thread: zod_1.z
            .object({
            __typename: zod_1.z.literal("MessageThread"),
            id: zod_1.z.string(),
            lastMessageDate: zod_1.z.string().optional().nullable(),
            lastMessageContent: zod_1.z.string().optional().nullable(),
            status: exports.messageStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderMessagesId: zod_1.z.string().optional().nullable(),
            userMessagesId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        sender: zod_1.z.string().optional().nullable(),
        content: zod_1.z.string(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        messageThreadMessagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteMessageContentMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteMessageContentInputSchema,
    condition: exports.modelMessageContentConditionInputSchema.optional().nullable(),
});
exports.deleteMessageContentMutationSchema = zod_1.z.object({
    deleteMessageContent: zod_1.z
        .object({
        __typename: zod_1.z.literal("MessageContent"),
        id: zod_1.z.string(),
        thread: zod_1.z
            .object({
            __typename: zod_1.z.literal("MessageThread"),
            id: zod_1.z.string(),
            lastMessageDate: zod_1.z.string().optional().nullable(),
            lastMessageContent: zod_1.z.string().optional().nullable(),
            status: exports.messageStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderMessagesId: zod_1.z.string().optional().nullable(),
            userMessagesId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        sender: zod_1.z.string().optional().nullable(),
        content: zod_1.z.string(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        messageThreadMessagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createBookingMutationVariablesSchema = zod_1.z.object({
    input: exports.createBookingInputSchema,
    condition: exports.modelBookingConditionInputSchema.optional().nullable(),
});
exports.createBookingMutationSchema = zod_1.z.object({
    createBooking: zod_1.z
        .object({
        __typename: zod_1.z.literal("Booking"),
        id: zod_1.z.string(),
        date: zod_1.z.string(),
        startTime: zod_1.z.string(),
        endTime: zod_1.z.string(),
        status: exports.bookingStatusSchema.optional().nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        location: zod_1.z.string().optional().nullable(),
        notes: zod_1.z.string().optional().nullable(),
        price: zod_1.z.number(),
        isInstantBooking: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceBookingsId: zod_1.z.string().optional().nullable(),
        providerProviderBookingsId: zod_1.z.string().optional().nullable(),
        userBookingsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateBookingMutationVariablesSchema = zod_1.z.object({
    input: exports.updateBookingInputSchema,
    condition: exports.modelBookingConditionInputSchema.optional().nullable(),
});
exports.updateBookingMutationSchema = zod_1.z.object({
    updateBooking: zod_1.z
        .object({
        __typename: zod_1.z.literal("Booking"),
        id: zod_1.z.string(),
        date: zod_1.z.string(),
        startTime: zod_1.z.string(),
        endTime: zod_1.z.string(),
        status: exports.bookingStatusSchema.optional().nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        location: zod_1.z.string().optional().nullable(),
        notes: zod_1.z.string().optional().nullable(),
        price: zod_1.z.number(),
        isInstantBooking: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceBookingsId: zod_1.z.string().optional().nullable(),
        providerProviderBookingsId: zod_1.z.string().optional().nullable(),
        userBookingsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteBookingMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteBookingInputSchema,
    condition: exports.modelBookingConditionInputSchema.optional().nullable(),
});
exports.deleteBookingMutationSchema = zod_1.z.object({
    deleteBooking: zod_1.z
        .object({
        __typename: zod_1.z.literal("Booking"),
        id: zod_1.z.string(),
        date: zod_1.z.string(),
        startTime: zod_1.z.string(),
        endTime: zod_1.z.string(),
        status: exports.bookingStatusSchema.optional().nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        location: zod_1.z.string().optional().nullable(),
        notes: zod_1.z.string().optional().nullable(),
        price: zod_1.z.number(),
        isInstantBooking: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceBookingsId: zod_1.z.string().optional().nullable(),
        providerProviderBookingsId: zod_1.z.string().optional().nullable(),
        userBookingsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createTeamMemberMutationVariablesSchema = zod_1.z.object({
    input: exports.createTeamMemberInputSchema,
    condition: exports.modelTeamMemberConditionInputSchema.optional().nullable(),
});
exports.createTeamMemberMutationSchema = zod_1.z.object({
    createTeamMember: zod_1.z
        .object({
        __typename: zod_1.z.literal("TeamMember"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        role: zod_1.z.string().optional().nullable(),
        currentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        jobSiteDuration: zod_1.z.string().optional().nullable(),
        communicationLog: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        assignedJobs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerID: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerTeamMembersId: zod_1.z.string().optional().nullable(),
        teamMemberCurrentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateTeamMemberMutationVariablesSchema = zod_1.z.object({
    input: exports.updateTeamMemberInputSchema,
    condition: exports.modelTeamMemberConditionInputSchema.optional().nullable(),
});
exports.updateTeamMemberMutationSchema = zod_1.z.object({
    updateTeamMember: zod_1.z
        .object({
        __typename: zod_1.z.literal("TeamMember"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        role: zod_1.z.string().optional().nullable(),
        currentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        jobSiteDuration: zod_1.z.string().optional().nullable(),
        communicationLog: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        assignedJobs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerID: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerTeamMembersId: zod_1.z.string().optional().nullable(),
        teamMemberCurrentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteTeamMemberMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteTeamMemberInputSchema,
    condition: exports.modelTeamMemberConditionInputSchema.optional().nullable(),
});
exports.deleteTeamMemberMutationSchema = zod_1.z.object({
    deleteTeamMember: zod_1.z
        .object({
        __typename: zod_1.z.literal("TeamMember"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        role: zod_1.z.string().optional().nullable(),
        currentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        jobSiteDuration: zod_1.z.string().optional().nullable(),
        communicationLog: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        assignedJobs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerID: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerTeamMembersId: zod_1.z.string().optional().nullable(),
        teamMemberCurrentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createLocationMutationVariablesSchema = zod_1.z.object({
    input: exports.createLocationInputSchema,
    condition: exports.modelLocationConditionInputSchema.optional().nullable(),
});
exports.createLocationMutationSchema = zod_1.z.object({
    createLocation: zod_1.z
        .object({
        __typename: zod_1.z.literal("Location"),
        id: zod_1.z.string(),
        latitude: zod_1.z.number(),
        longitude: zod_1.z.number(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updateLocationMutationVariablesSchema = zod_1.z.object({
    input: exports.updateLocationInputSchema,
    condition: exports.modelLocationConditionInputSchema.optional().nullable(),
});
exports.updateLocationMutationSchema = zod_1.z.object({
    updateLocation: zod_1.z
        .object({
        __typename: zod_1.z.literal("Location"),
        id: zod_1.z.string(),
        latitude: zod_1.z.number(),
        longitude: zod_1.z.number(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deleteLocationMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteLocationInputSchema,
    condition: exports.modelLocationConditionInputSchema.optional().nullable(),
});
exports.deleteLocationMutationSchema = zod_1.z.object({
    deleteLocation: zod_1.z
        .object({
        __typename: zod_1.z.literal("Location"),
        id: zod_1.z.string(),
        latitude: zod_1.z.number(),
        longitude: zod_1.z.number(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createMessageMutationVariablesSchema = zod_1.z.object({
    input: exports.createMessageInputSchema,
    condition: exports.modelMessageConditionInputSchema.optional().nullable(),
});
exports.createMessageMutationSchema = zod_1.z.object({
    createMessage: zod_1.z
        .object({
        __typename: zod_1.z.literal("Message"),
        id: zod_1.z.string(),
        sender: zod_1.z.string(),
        content: zod_1.z.string(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        teamMemberCommunicationLogId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateMessageMutationVariablesSchema = zod_1.z.object({
    input: exports.updateMessageInputSchema,
    condition: exports.modelMessageConditionInputSchema.optional().nullable(),
});
exports.updateMessageMutationSchema = zod_1.z.object({
    updateMessage: zod_1.z
        .object({
        __typename: zod_1.z.literal("Message"),
        id: zod_1.z.string(),
        sender: zod_1.z.string(),
        content: zod_1.z.string(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        teamMemberCommunicationLogId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteMessageMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteMessageInputSchema,
    condition: exports.modelMessageConditionInputSchema.optional().nullable(),
});
exports.deleteMessageMutationSchema = zod_1.z.object({
    deleteMessage: zod_1.z
        .object({
        __typename: zod_1.z.literal("Message"),
        id: zod_1.z.string(),
        sender: zod_1.z.string(),
        content: zod_1.z.string(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        teamMemberCommunicationLogId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createJobMutationVariablesSchema = zod_1.z.object({
    input: exports.createJobInputSchema,
    condition: exports.modelJobConditionInputSchema.optional().nullable(),
});
exports.createJobMutationSchema = zod_1.z.object({
    createJob: zod_1.z
        .object({
        __typename: zod_1.z.literal("Job"),
        id: zod_1.z.string(),
        description: zod_1.z.string(),
        location: zod_1.z.string(),
        startTime: zod_1.z.string().optional().nullable(),
        endTime: zod_1.z.string().optional().nullable(),
        status: exports.jobStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        teamMemberAssignedJobsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateJobMutationVariablesSchema = zod_1.z.object({
    input: exports.updateJobInputSchema,
    condition: exports.modelJobConditionInputSchema.optional().nullable(),
});
exports.updateJobMutationSchema = zod_1.z.object({
    updateJob: zod_1.z
        .object({
        __typename: zod_1.z.literal("Job"),
        id: zod_1.z.string(),
        description: zod_1.z.string(),
        location: zod_1.z.string(),
        startTime: zod_1.z.string().optional().nullable(),
        endTime: zod_1.z.string().optional().nullable(),
        status: exports.jobStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        teamMemberAssignedJobsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteJobMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteJobInputSchema,
    condition: exports.modelJobConditionInputSchema.optional().nullable(),
});
exports.deleteJobMutationSchema = zod_1.z.object({
    deleteJob: zod_1.z
        .object({
        __typename: zod_1.z.literal("Job"),
        id: zod_1.z.string(),
        description: zod_1.z.string(),
        location: zod_1.z.string(),
        startTime: zod_1.z.string().optional().nullable(),
        endTime: zod_1.z.string().optional().nullable(),
        status: exports.jobStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        teamMemberAssignedJobsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createServiceMutationVariablesSchema = zod_1.z.object({
    input: exports.createServiceInputSchema,
    condition: exports.modelServiceConditionInputSchema.optional().nullable(),
});
exports.createServiceMutationSchema = zod_1.z.object({
    createService: zod_1.z
        .object({
        __typename: zod_1.z.literal("Service"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        price_min: zod_1.z.number(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        bookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        SubCategory: zod_1.z
            .object({
            __typename: zod_1.z.literal("SubCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        servicePromotions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServicePromotionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceDiscounts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceDiscountConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAvailabilities: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userPreferences: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerCertifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceVideos: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceVideoConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceImages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceImageConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceReviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiDiagnostics: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCustomizationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAwards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAwardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        contracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTrackings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        duration: zod_1.z.string().optional().nullable(),
        Materials: zod_1.z.string().optional().nullable(),
        MaterialCosts: zod_1.z.number().optional().nullable(),
        BookingRequirements: zod_1.z.string().optional().nullable(),
        price_max: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        invoiceServicesId: zod_1.z.string().optional().nullable(),
        servicePackageServicesId: zod_1.z.string().optional().nullable(),
        subCategoryServicesId: zod_1.z.string().optional().nullable(),
        providerServicesOfferedId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateServiceMutationVariablesSchema = zod_1.z.object({
    input: exports.updateServiceInputSchema,
    condition: exports.modelServiceConditionInputSchema.optional().nullable(),
});
exports.updateServiceMutationSchema = zod_1.z.object({
    updateService: zod_1.z
        .object({
        __typename: zod_1.z.literal("Service"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        price_min: zod_1.z.number(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        bookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        SubCategory: zod_1.z
            .object({
            __typename: zod_1.z.literal("SubCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        servicePromotions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServicePromotionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceDiscounts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceDiscountConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAvailabilities: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userPreferences: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerCertifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceVideos: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceVideoConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceImages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceImageConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceReviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiDiagnostics: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCustomizationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAwards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAwardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        contracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTrackings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        duration: zod_1.z.string().optional().nullable(),
        Materials: zod_1.z.string().optional().nullable(),
        MaterialCosts: zod_1.z.number().optional().nullable(),
        BookingRequirements: zod_1.z.string().optional().nullable(),
        price_max: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        invoiceServicesId: zod_1.z.string().optional().nullable(),
        servicePackageServicesId: zod_1.z.string().optional().nullable(),
        subCategoryServicesId: zod_1.z.string().optional().nullable(),
        providerServicesOfferedId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteServiceMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteServiceInputSchema,
    condition: exports.modelServiceConditionInputSchema.optional().nullable(),
});
exports.deleteServiceMutationSchema = zod_1.z.object({
    deleteService: zod_1.z
        .object({
        __typename: zod_1.z.literal("Service"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        price_min: zod_1.z.number(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        bookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        SubCategory: zod_1.z
            .object({
            __typename: zod_1.z.literal("SubCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        servicePromotions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServicePromotionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceDiscounts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceDiscountConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAvailabilities: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userPreferences: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerCertifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceVideos: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceVideoConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceImages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceImageConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceReviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiDiagnostics: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCustomizationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAwards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAwardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        contracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTrackings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        duration: zod_1.z.string().optional().nullable(),
        Materials: zod_1.z.string().optional().nullable(),
        MaterialCosts: zod_1.z.number().optional().nullable(),
        BookingRequirements: zod_1.z.string().optional().nullable(),
        price_max: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        invoiceServicesId: zod_1.z.string().optional().nullable(),
        servicePackageServicesId: zod_1.z.string().optional().nullable(),
        subCategoryServicesId: zod_1.z.string().optional().nullable(),
        providerServicesOfferedId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createProviderMutationVariablesSchema = zod_1.z.object({
    input: exports.createProviderInputSchema,
    condition: exports.modelProviderConditionInputSchema.optional().nullable(),
});
exports.createProviderMutationSchema = zod_1.z.object({
    createProvider: zod_1.z
        .object({
        __typename: zod_1.z.literal("Provider"),
        id: zod_1.z.string(),
        email: zod_1.z.string(),
        password: zod_1.z.string(),
        firstName: zod_1.z.string(),
        lastName: zod_1.z.string(),
        dob: zod_1.z.string().optional().nullable(),
        gender: exports.genderSchema.optional().nullable(),
        phone: zod_1.z.string().optional().nullable(),
        address: zod_1.z.string().optional().nullable(),
        city: zod_1.z.string().optional().nullable(),
        state: zod_1.z.string().optional().nullable(),
        country: zod_1.z.string().optional().nullable(),
        zipCode: zod_1.z.string().optional().nullable(),
        profileImage: zod_1.z.string().optional().nullable(),
        isActive: zod_1.z.boolean().optional().nullable(),
        isVerified: zod_1.z.boolean().optional().nullable(),
        lastLogin: zod_1.z.string().optional().nullable(),
        accountType: exports.accountTypeSchema.optional().nullable(),
        notificationPreference: exports.notificationPreferenceSchema
            .optional()
            .nullable(),
        languagePreference: zod_1.z.string().optional().nullable(),
        currencyPreference: zod_1.z.string().optional().nullable(),
        timezone: zod_1.z.string().optional().nullable(),
        chatbotRequests: zod_1.z.number().optional().nullable(),
        servicesOffered: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        teamMembers: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTeamMemberConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        availability: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        certifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        qualifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelQualificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        specializations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelSpecializationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerMessages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageThreadConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerContracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerTips: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTipConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReferrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAvailability: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerCertification: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAwards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAwardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTracking: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        currentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
        providerCurrentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateProviderMutationVariablesSchema = zod_1.z.object({
    input: exports.updateProviderInputSchema,
    condition: exports.modelProviderConditionInputSchema.optional().nullable(),
});
exports.updateProviderMutationSchema = zod_1.z.object({
    updateProvider: zod_1.z
        .object({
        __typename: zod_1.z.literal("Provider"),
        id: zod_1.z.string(),
        email: zod_1.z.string(),
        password: zod_1.z.string(),
        firstName: zod_1.z.string(),
        lastName: zod_1.z.string(),
        dob: zod_1.z.string().optional().nullable(),
        gender: exports.genderSchema.optional().nullable(),
        phone: zod_1.z.string().optional().nullable(),
        address: zod_1.z.string().optional().nullable(),
        city: zod_1.z.string().optional().nullable(),
        state: zod_1.z.string().optional().nullable(),
        country: zod_1.z.string().optional().nullable(),
        zipCode: zod_1.z.string().optional().nullable(),
        profileImage: zod_1.z.string().optional().nullable(),
        isActive: zod_1.z.boolean().optional().nullable(),
        isVerified: zod_1.z.boolean().optional().nullable(),
        lastLogin: zod_1.z.string().optional().nullable(),
        accountType: exports.accountTypeSchema.optional().nullable(),
        notificationPreference: exports.notificationPreferenceSchema
            .optional()
            .nullable(),
        languagePreference: zod_1.z.string().optional().nullable(),
        currencyPreference: zod_1.z.string().optional().nullable(),
        timezone: zod_1.z.string().optional().nullable(),
        chatbotRequests: zod_1.z.number().optional().nullable(),
        servicesOffered: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        teamMembers: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTeamMemberConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        availability: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        certifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        qualifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelQualificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        specializations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelSpecializationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerMessages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageThreadConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerContracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerTips: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTipConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReferrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAvailability: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerCertification: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAwards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAwardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTracking: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        currentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
        providerCurrentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteProviderMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteProviderInputSchema,
    condition: exports.modelProviderConditionInputSchema.optional().nullable(),
});
exports.deleteProviderMutationSchema = zod_1.z.object({
    deleteProvider: zod_1.z
        .object({
        __typename: zod_1.z.literal("Provider"),
        id: zod_1.z.string(),
        email: zod_1.z.string(),
        password: zod_1.z.string(),
        firstName: zod_1.z.string(),
        lastName: zod_1.z.string(),
        dob: zod_1.z.string().optional().nullable(),
        gender: exports.genderSchema.optional().nullable(),
        phone: zod_1.z.string().optional().nullable(),
        address: zod_1.z.string().optional().nullable(),
        city: zod_1.z.string().optional().nullable(),
        state: zod_1.z.string().optional().nullable(),
        country: zod_1.z.string().optional().nullable(),
        zipCode: zod_1.z.string().optional().nullable(),
        profileImage: zod_1.z.string().optional().nullable(),
        isActive: zod_1.z.boolean().optional().nullable(),
        isVerified: zod_1.z.boolean().optional().nullable(),
        lastLogin: zod_1.z.string().optional().nullable(),
        accountType: exports.accountTypeSchema.optional().nullable(),
        notificationPreference: exports.notificationPreferenceSchema
            .optional()
            .nullable(),
        languagePreference: zod_1.z.string().optional().nullable(),
        currencyPreference: zod_1.z.string().optional().nullable(),
        timezone: zod_1.z.string().optional().nullable(),
        chatbotRequests: zod_1.z.number().optional().nullable(),
        servicesOffered: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        teamMembers: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTeamMemberConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        availability: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        certifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        qualifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelQualificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        specializations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelSpecializationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerMessages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageThreadConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerContracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerTips: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTipConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReferrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAvailability: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerCertification: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAwards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAwardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTracking: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        currentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
        providerCurrentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createAvailabilityMutationVariablesSchema = zod_1.z.object({
    input: exports.createAvailabilityInputSchema,
    condition: exports.modelAvailabilityConditionInputSchema.optional().nullable(),
});
exports.createAvailabilityMutationSchema = zod_1.z.object({
    createAvailability: zod_1.z
        .object({
        __typename: zod_1.z.literal("Availability"),
        id: zod_1.z.string(),
        startTime: zod_1.z.string(),
        endTime: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        avalabilityDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerAvailabilityId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateAvailabilityMutationVariablesSchema = zod_1.z.object({
    input: exports.updateAvailabilityInputSchema,
    condition: exports.modelAvailabilityConditionInputSchema.optional().nullable(),
});
exports.updateAvailabilityMutationSchema = zod_1.z.object({
    updateAvailability: zod_1.z
        .object({
        __typename: zod_1.z.literal("Availability"),
        id: zod_1.z.string(),
        startTime: zod_1.z.string(),
        endTime: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        avalabilityDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerAvailabilityId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteAvailabilityMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteAvailabilityInputSchema,
    condition: exports.modelAvailabilityConditionInputSchema.optional().nullable(),
});
exports.deleteAvailabilityMutationSchema = zod_1.z.object({
    deleteAvailability: zod_1.z
        .object({
        __typename: zod_1.z.literal("Availability"),
        id: zod_1.z.string(),
        startTime: zod_1.z.string(),
        endTime: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        avalabilityDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerAvailabilityId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createProviderReviewMutationVariablesSchema = zod_1.z.object({
    input: exports.createProviderReviewInputSchema,
    condition: exports.modelProviderReviewConditionInputSchema.optional().nullable(),
});
exports.createProviderReviewMutationSchema = zod_1.z.object({
    createProviderReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderReview"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        userID: zod_1.z.string(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.updateProviderReviewMutationVariablesSchema = zod_1.z.object({
    input: exports.updateProviderReviewInputSchema,
    condition: exports.modelProviderReviewConditionInputSchema.optional().nullable(),
});
exports.updateProviderReviewMutationSchema = zod_1.z.object({
    updateProviderReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderReview"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        userID: zod_1.z.string(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.deleteProviderReviewMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteProviderReviewInputSchema,
    condition: exports.modelProviderReviewConditionInputSchema.optional().nullable(),
});
exports.deleteProviderReviewMutationSchema = zod_1.z.object({
    deleteProviderReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderReview"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        userID: zod_1.z.string(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.createCertificationMutationVariablesSchema = zod_1.z.object({
    input: exports.createCertificationInputSchema,
    condition: exports.modelCertificationConditionInputSchema.optional().nullable(),
});
exports.createCertificationMutationSchema = zod_1.z.object({
    createCertification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Certification"),
        id: zod_1.z.string(),
        certificationName: zod_1.z.string(),
        issuedBy: zod_1.z.string().optional().nullable(),
        validFrom: zod_1.z.string().optional().nullable(),
        validUntil: zod_1.z.string().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerCertificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateCertificationMutationVariablesSchema = zod_1.z.object({
    input: exports.updateCertificationInputSchema,
    condition: exports.modelCertificationConditionInputSchema.optional().nullable(),
});
exports.updateCertificationMutationSchema = zod_1.z.object({
    updateCertification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Certification"),
        id: zod_1.z.string(),
        certificationName: zod_1.z.string(),
        issuedBy: zod_1.z.string().optional().nullable(),
        validFrom: zod_1.z.string().optional().nullable(),
        validUntil: zod_1.z.string().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerCertificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteCertificationMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteCertificationInputSchema,
    condition: exports.modelCertificationConditionInputSchema.optional().nullable(),
});
exports.deleteCertificationMutationSchema = zod_1.z.object({
    deleteCertification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Certification"),
        id: zod_1.z.string(),
        certificationName: zod_1.z.string(),
        issuedBy: zod_1.z.string().optional().nullable(),
        validFrom: zod_1.z.string().optional().nullable(),
        validUntil: zod_1.z.string().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerCertificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createQualificationMutationVariablesSchema = zod_1.z.object({
    input: exports.createQualificationInputSchema,
    condition: exports.modelQualificationConditionInputSchema.optional().nullable(),
});
exports.createQualificationMutationSchema = zod_1.z.object({
    createQualification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Qualification"),
        id: zod_1.z.string(),
        qualificationName: zod_1.z.string(),
        institution: zod_1.z.string().optional().nullable(),
        yearObtained: zod_1.z.number().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerQualificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateQualificationMutationVariablesSchema = zod_1.z.object({
    input: exports.updateQualificationInputSchema,
    condition: exports.modelQualificationConditionInputSchema.optional().nullable(),
});
exports.updateQualificationMutationSchema = zod_1.z.object({
    updateQualification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Qualification"),
        id: zod_1.z.string(),
        qualificationName: zod_1.z.string(),
        institution: zod_1.z.string().optional().nullable(),
        yearObtained: zod_1.z.number().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerQualificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteQualificationMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteQualificationInputSchema,
    condition: exports.modelQualificationConditionInputSchema.optional().nullable(),
});
exports.deleteQualificationMutationSchema = zod_1.z.object({
    deleteQualification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Qualification"),
        id: zod_1.z.string(),
        qualificationName: zod_1.z.string(),
        institution: zod_1.z.string().optional().nullable(),
        yearObtained: zod_1.z.number().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerQualificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createSpecializationMutationVariablesSchema = zod_1.z.object({
    input: exports.createSpecializationInputSchema,
    condition: exports.modelSpecializationConditionInputSchema.optional().nullable(),
});
exports.createSpecializationMutationSchema = zod_1.z.object({
    createSpecialization: zod_1.z
        .object({
        __typename: zod_1.z.literal("Specialization"),
        id: zod_1.z.string(),
        specializationName: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerSpecializationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateSpecializationMutationVariablesSchema = zod_1.z.object({
    input: exports.updateSpecializationInputSchema,
    condition: exports.modelSpecializationConditionInputSchema.optional().nullable(),
});
exports.updateSpecializationMutationSchema = zod_1.z.object({
    updateSpecialization: zod_1.z
        .object({
        __typename: zod_1.z.literal("Specialization"),
        id: zod_1.z.string(),
        specializationName: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerSpecializationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteSpecializationMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteSpecializationInputSchema,
    condition: exports.modelSpecializationConditionInputSchema.optional().nullable(),
});
exports.deleteSpecializationMutationSchema = zod_1.z.object({
    deleteSpecialization: zod_1.z
        .object({
        __typename: zod_1.z.literal("Specialization"),
        id: zod_1.z.string(),
        specializationName: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerSpecializationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createProviderHistoryMutationVariablesSchema = zod_1.z.object({
    input: exports.createProviderHistoryInputSchema,
    condition: exports.modelProviderHistoryConditionInputSchema.optional().nullable(),
});
exports.createProviderHistoryMutationSchema = zod_1.z.object({
    createProviderHistory: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderHistory"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        event: zod_1.z.string(),
        date: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderHistoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateProviderHistoryMutationVariablesSchema = zod_1.z.object({
    input: exports.updateProviderHistoryInputSchema,
    condition: exports.modelProviderHistoryConditionInputSchema.optional().nullable(),
});
exports.updateProviderHistoryMutationSchema = zod_1.z.object({
    updateProviderHistory: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderHistory"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        event: zod_1.z.string(),
        date: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderHistoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteProviderHistoryMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteProviderHistoryInputSchema,
    condition: exports.modelProviderHistoryConditionInputSchema.optional().nullable(),
});
exports.deleteProviderHistoryMutationSchema = zod_1.z.object({
    deleteProviderHistory: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderHistory"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        event: zod_1.z.string(),
        date: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderHistoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.createUserMutationVariablesSchema = zod_1.z.object({
    input: exports.createUserInputSchema,
    condition: exports.modelUserConditionInputSchema.optional().nullable(),
});
exports.createUserMutationSchema = zod_1.z.object({
    createUser: zod_1.z
        .object({
        __typename: zod_1.z.literal("User"),
        id: zod_1.z.string(),
        email: zod_1.z.string(),
        password: zod_1.z.string(),
        firstName: zod_1.z.string(),
        lastName: zod_1.z.string(),
        dob: zod_1.z.string().optional().nullable(),
        gender: exports.genderSchema.optional().nullable(),
        phone: zod_1.z.string().optional().nullable(),
        address: zod_1.z.string().optional().nullable(),
        city: zod_1.z.string().optional().nullable(),
        state: zod_1.z.string().optional().nullable(),
        country: zod_1.z.string().optional().nullable(),
        zipCode: zod_1.z.string().optional().nullable(),
        profileImage: zod_1.z.string().optional().nullable(),
        isActive: zod_1.z.boolean().optional().nullable(),
        isVerified: zod_1.z.boolean().optional().nullable(),
        lastLogin: zod_1.z.string().optional().nullable(),
        accountType: exports.accountTypeSchema.optional().nullable(),
        notificationPreference: exports.notificationPreferenceSchema
            .optional()
            .nullable(),
        languagePreference: zod_1.z.string().optional().nullable(),
        currencyPreference: zod_1.z.string().optional().nullable(),
        timezone: zod_1.z.string().optional().nullable(),
        chatbotRequests: zod_1.z.number().optional().nullable(),
        bookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        messages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageThreadConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        wallet: zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        transactions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTransactionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        feedbacks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFeedbackConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        subscriptions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelPLMBRSubscriptionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatBots: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatBotConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatLogs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatLogConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTrackings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        loyaltyPrograms: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelLoyaltyProgramConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        rewards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelRewardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        contracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        invoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        paymentMethods: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelPaymentMethodConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        tips: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTipConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCustomizationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceReviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userPreference: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        verifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelVerificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        preferredContactTime: zod_1.z.string().optional().nullable(),
        serviceInterestedIn: zod_1.z.string().optional().nullable(),
        curentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userWalletId: zod_1.z.string().optional().nullable(),
        userCurentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.updateUserMutationVariablesSchema = zod_1.z.object({
    input: exports.updateUserInputSchema,
    condition: exports.modelUserConditionInputSchema.optional().nullable(),
});
exports.updateUserMutationSchema = zod_1.z.object({
    updateUser: zod_1.z
        .object({
        __typename: zod_1.z.literal("User"),
        id: zod_1.z.string(),
        email: zod_1.z.string(),
        password: zod_1.z.string(),
        firstName: zod_1.z.string(),
        lastName: zod_1.z.string(),
        dob: zod_1.z.string().optional().nullable(),
        gender: exports.genderSchema.optional().nullable(),
        phone: zod_1.z.string().optional().nullable(),
        address: zod_1.z.string().optional().nullable(),
        city: zod_1.z.string().optional().nullable(),
        state: zod_1.z.string().optional().nullable(),
        country: zod_1.z.string().optional().nullable(),
        zipCode: zod_1.z.string().optional().nullable(),
        profileImage: zod_1.z.string().optional().nullable(),
        isActive: zod_1.z.boolean().optional().nullable(),
        isVerified: zod_1.z.boolean().optional().nullable(),
        lastLogin: zod_1.z.string().optional().nullable(),
        accountType: exports.accountTypeSchema.optional().nullable(),
        notificationPreference: exports.notificationPreferenceSchema
            .optional()
            .nullable(),
        languagePreference: zod_1.z.string().optional().nullable(),
        currencyPreference: zod_1.z.string().optional().nullable(),
        timezone: zod_1.z.string().optional().nullable(),
        chatbotRequests: zod_1.z.number().optional().nullable(),
        bookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        messages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageThreadConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        wallet: zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        transactions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTransactionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        feedbacks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFeedbackConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        subscriptions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelPLMBRSubscriptionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatBots: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatBotConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatLogs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatLogConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTrackings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        loyaltyPrograms: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelLoyaltyProgramConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        rewards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelRewardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        contracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        invoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        paymentMethods: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelPaymentMethodConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        tips: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTipConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCustomizationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceReviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userPreference: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        verifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelVerificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        preferredContactTime: zod_1.z.string().optional().nullable(),
        serviceInterestedIn: zod_1.z.string().optional().nullable(),
        curentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userWalletId: zod_1.z.string().optional().nullable(),
        userCurentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.deleteUserMutationVariablesSchema = zod_1.z.object({
    input: exports.deleteUserInputSchema,
    condition: exports.modelUserConditionInputSchema.optional().nullable(),
});
exports.deleteUserMutationSchema = zod_1.z.object({
    deleteUser: zod_1.z
        .object({
        __typename: zod_1.z.literal("User"),
        id: zod_1.z.string(),
        email: zod_1.z.string(),
        password: zod_1.z.string(),
        firstName: zod_1.z.string(),
        lastName: zod_1.z.string(),
        dob: zod_1.z.string().optional().nullable(),
        gender: exports.genderSchema.optional().nullable(),
        phone: zod_1.z.string().optional().nullable(),
        address: zod_1.z.string().optional().nullable(),
        city: zod_1.z.string().optional().nullable(),
        state: zod_1.z.string().optional().nullable(),
        country: zod_1.z.string().optional().nullable(),
        zipCode: zod_1.z.string().optional().nullable(),
        profileImage: zod_1.z.string().optional().nullable(),
        isActive: zod_1.z.boolean().optional().nullable(),
        isVerified: zod_1.z.boolean().optional().nullable(),
        lastLogin: zod_1.z.string().optional().nullable(),
        accountType: exports.accountTypeSchema.optional().nullable(),
        notificationPreference: exports.notificationPreferenceSchema
            .optional()
            .nullable(),
        languagePreference: zod_1.z.string().optional().nullable(),
        currencyPreference: zod_1.z.string().optional().nullable(),
        timezone: zod_1.z.string().optional().nullable(),
        chatbotRequests: zod_1.z.number().optional().nullable(),
        bookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        messages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageThreadConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        wallet: zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        transactions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTransactionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        feedbacks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFeedbackConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        subscriptions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelPLMBRSubscriptionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatBots: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatBotConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatLogs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatLogConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTrackings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        loyaltyPrograms: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelLoyaltyProgramConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        rewards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelRewardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        contracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        invoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        paymentMethods: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelPaymentMethodConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        tips: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTipConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCustomizationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceReviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userPreference: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        verifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelVerificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        preferredContactTime: zod_1.z.string().optional().nullable(),
        serviceInterestedIn: zod_1.z.string().optional().nullable(),
        curentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userWalletId: zod_1.z.string().optional().nullable(),
        userCurentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getServicePromotionQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getServicePromotionQuerySchema = zod_1.z.object({
    getServicePromotion: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServicePromotion"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        discountPercentage: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServicePromotionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listServicePromotionsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServicePromotionFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listServicePromotionsQuerySchema = zod_1.z.object({
    listServicePromotions: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServicePromotionConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServicePromotion"),
            id: zod_1.z.string(),
            description: zod_1.z.string(),
            startDate: zod_1.z.string(),
            endDate: zod_1.z.string(),
            discountPercentage: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceServicePromotionsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncServicePromotionsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServicePromotionFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncServicePromotionsQuerySchema = zod_1.z.object({
    syncServicePromotions: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServicePromotionConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServicePromotion"),
            id: zod_1.z.string(),
            description: zod_1.z.string(),
            startDate: zod_1.z.string(),
            endDate: zod_1.z.string(),
            discountPercentage: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceServicePromotionsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getProviderReportQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getProviderReportQuerySchema = zod_1.z.object({
    getProviderReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderReport"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderReportsId: zod_1.z.string().optional().nullable(),
        providerProviderReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listProviderReportsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderReportFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listProviderReportsQuerySchema = zod_1.z.object({
    listProviderReports: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderReportConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderReport"),
            id: zod_1.z.string(),
            description: zod_1.z.string(),
            dateReported: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceProviderReportsId: zod_1.z.string().optional().nullable(),
            providerProviderReportsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncProviderReportsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderReportFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncProviderReportsQuerySchema = zod_1.z.object({
    syncProviderReports: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderReportConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderReport"),
            id: zod_1.z.string(),
            description: zod_1.z.string(),
            dateReported: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceProviderReportsId: zod_1.z.string().optional().nullable(),
            providerProviderReportsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getUserReportQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getUserReportQuerySchema = zod_1.z.object({
    getUserReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserReport"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserReportsId: zod_1.z.string().optional().nullable(),
        userUserReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listUserReportsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserReportFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listUserReportsQuerySchema = zod_1.z.object({
    listUserReports: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserReportConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("UserReport"),
            id: zod_1.z.string(),
            description: zod_1.z.string(),
            dateReported: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceUserReportsId: zod_1.z.string().optional().nullable(),
            userUserReportsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncUserReportsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserReportFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncUserReportsQuerySchema = zod_1.z.object({
    syncUserReports: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserReportConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("UserReport"),
            id: zod_1.z.string(),
            description: zod_1.z.string(),
            dateReported: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceUserReportsId: zod_1.z.string().optional().nullable(),
            userUserReportsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getUserInvoiceQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getUserInvoiceQuerySchema = zod_1.z.object({
    getUserInvoice: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserInvoice"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        dateIssued: zod_1.z.string(),
        dueDate: zod_1.z.string(),
        status: exports.invoiceStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserInvoicesId: zod_1.z.string().optional().nullable(),
        userUserInvoicesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listUserInvoicesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserInvoiceFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listUserInvoicesQuerySchema = zod_1.z.object({
    listUserInvoices: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("UserInvoice"),
            id: zod_1.z.string(),
            amount: zod_1.z.number(),
            dateIssued: zod_1.z.string(),
            dueDate: zod_1.z.string(),
            status: exports.invoiceStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceUserInvoicesId: zod_1.z.string().optional().nullable(),
            userUserInvoicesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncUserInvoicesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserInvoiceFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncUserInvoicesQuerySchema = zod_1.z.object({
    syncUserInvoices: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("UserInvoice"),
            id: zod_1.z.string(),
            amount: zod_1.z.number(),
            dateIssued: zod_1.z.string(),
            dueDate: zod_1.z.string(),
            status: exports.invoiceStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceUserInvoicesId: zod_1.z.string().optional().nullable(),
            userUserInvoicesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getProviderBookmarkQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getProviderBookmarkQuerySchema = zod_1.z.object({
    getProviderBookmark: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderBookmark"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateBookmarked: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderBookmarksId: zod_1.z.string().optional().nullable(),
        providerProviderBookmarksId: zod_1.z.string().optional().nullable(),
        userProviderBookmarksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listProviderBookmarksQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderBookmarkFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listProviderBookmarksQuerySchema = zod_1.z.object({
    listProviderBookmarks: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderBookmark"),
            id: zod_1.z.string(),
            dateBookmarked: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceProviderBookmarksId: zod_1.z.string().optional().nullable(),
            providerProviderBookmarksId: zod_1.z.string().optional().nullable(),
            userProviderBookmarksId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncProviderBookmarksQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderBookmarkFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncProviderBookmarksQuerySchema = zod_1.z.object({
    syncProviderBookmarks: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderBookmark"),
            id: zod_1.z.string(),
            dateBookmarked: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceProviderBookmarksId: zod_1.z.string().optional().nullable(),
            providerProviderBookmarksId: zod_1.z.string().optional().nullable(),
            userProviderBookmarksId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getUserBookmarkQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getUserBookmarkQuerySchema = zod_1.z.object({
    getUserBookmark: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserBookmark"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateBookmarked: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserBookmarksId: zod_1.z.string().optional().nullable(),
        userUserBookmarksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listUserBookmarksQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserBookmarkFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listUserBookmarksQuerySchema = zod_1.z.object({
    listUserBookmarks: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("UserBookmark"),
            id: zod_1.z.string(),
            dateBookmarked: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceUserBookmarksId: zod_1.z.string().optional().nullable(),
            userUserBookmarksId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncUserBookmarksQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserBookmarkFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncUserBookmarksQuerySchema = zod_1.z.object({
    syncUserBookmarks: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("UserBookmark"),
            id: zod_1.z.string(),
            dateBookmarked: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceUserBookmarksId: zod_1.z.string().optional().nullable(),
            userUserBookmarksId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getProviderNotificationQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getProviderNotificationQuerySchema = zod_1.z.object({
    getProviderNotification: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderNotification"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        content: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.notificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderNotificationsId: zod_1.z.string().optional().nullable(),
        providerProviderNotificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listProviderNotificationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderNotificationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listProviderNotificationsQuerySchema = zod_1.z.object({
    listProviderNotifications: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderNotification"),
            id: zod_1.z.string(),
            content: zod_1.z.string(),
            dateSent: zod_1.z.string(),
            status: exports.notificationStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceProviderNotificationsId: zod_1.z.string().optional().nullable(),
            providerProviderNotificationsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncProviderNotificationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderNotificationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncProviderNotificationsQuerySchema = zod_1.z.object({
    syncProviderNotifications: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderNotification"),
            id: zod_1.z.string(),
            content: zod_1.z.string(),
            dateSent: zod_1.z.string(),
            status: exports.notificationStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceProviderNotificationsId: zod_1.z.string().optional().nullable(),
            providerProviderNotificationsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getUserNotificationQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getUserNotificationQuerySchema = zod_1.z.object({
    getUserNotification: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserNotification"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        content: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.notificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserNotificationsId: zod_1.z.string().optional().nullable(),
        userUserNotificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listUserNotificationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserNotificationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listUserNotificationsQuerySchema = zod_1.z.object({
    listUserNotifications: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserNotificationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("UserNotification"),
            id: zod_1.z.string(),
            content: zod_1.z.string(),
            dateSent: zod_1.z.string(),
            status: exports.notificationStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceUserNotificationsId: zod_1.z.string().optional().nullable(),
            userUserNotificationsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncUserNotificationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserNotificationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncUserNotificationsQuerySchema = zod_1.z.object({
    syncUserNotifications: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserNotificationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("UserNotification"),
            id: zod_1.z.string(),
            content: zod_1.z.string(),
            dateSent: zod_1.z.string(),
            status: exports.notificationStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceUserNotificationsId: zod_1.z.string().optional().nullable(),
            userUserNotificationsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getServiceDiscountQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getServiceDiscountQuerySchema = zod_1.z.object({
    getServiceDiscount: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceDiscount"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        discountPercentage: zod_1.z.number(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceDiscountsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listServiceDiscountsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceDiscountFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listServiceDiscountsQuerySchema = zod_1.z.object({
    listServiceDiscounts: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceDiscountConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceDiscount"),
            id: zod_1.z.string(),
            discountPercentage: zod_1.z.number(),
            startDate: zod_1.z.string(),
            endDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceServiceDiscountsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncServiceDiscountsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceDiscountFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncServiceDiscountsQuerySchema = zod_1.z.object({
    syncServiceDiscounts: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceDiscountConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceDiscount"),
            id: zod_1.z.string(),
            discountPercentage: zod_1.z.number(),
            startDate: zod_1.z.string(),
            endDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceServiceDiscountsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getProviderAvailabilityQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getProviderAvailabilityQuerySchema = zod_1.z.object({
    getProviderAvailability: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderAvailability"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        isScheduled: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderAvailabilitiesId: zod_1.z.string().optional().nullable(),
        providerProviderAvailabilityId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listProviderAvailabilitiesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderAvailabilityFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listProviderAvailabilitiesQuerySchema = zod_1.z.object({
    listProviderAvailabilities: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderAvailability"),
            id: zod_1.z.string(),
            startDate: zod_1.z.string(),
            endDate: zod_1.z.string(),
            isScheduled: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceProviderAvailabilitiesId: zod_1.z.string().optional().nullable(),
            providerProviderAvailabilityId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncProviderAvailabilitiesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderAvailabilityFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncProviderAvailabilitiesQuerySchema = zod_1.z.object({
    syncProviderAvailabilities: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderAvailability"),
            id: zod_1.z.string(),
            startDate: zod_1.z.string(),
            endDate: zod_1.z.string(),
            isScheduled: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceProviderAvailabilitiesId: zod_1.z.string().optional().nullable(),
            providerProviderAvailabilityId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getUserPreferenceQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getUserPreferenceQuerySchema = zod_1.z.object({
    getUserPreference: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserPreference"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        preferenceType: zod_1.z.string(),
        preferenceValue: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserPreferencesId: zod_1.z.string().optional().nullable(),
        userUserPreferenceId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listUserPreferencesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserPreferenceFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listUserPreferencesQuerySchema = zod_1.z.object({
    listUserPreferences: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("UserPreference"),
            id: zod_1.z.string(),
            preferenceType: zod_1.z.string(),
            preferenceValue: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceUserPreferencesId: zod_1.z.string().optional().nullable(),
            userUserPreferenceId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncUserPreferencesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserPreferenceFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncUserPreferencesQuerySchema = zod_1.z.object({
    syncUserPreferences: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("UserPreference"),
            id: zod_1.z.string(),
            preferenceType: zod_1.z.string(),
            preferenceValue: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceUserPreferencesId: zod_1.z.string().optional().nullable(),
            userUserPreferenceId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getProviderCertificationQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getProviderCertificationQuerySchema = zod_1.z.object({
    getProviderCertification: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderCertification"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        certificationName: zod_1.z.string(),
        issuedBy: zod_1.z.string(),
        validFrom: zod_1.z.string(),
        validUntil: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderCertificationsId: zod_1.z.string().optional().nullable(),
        providerProviderCertificationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listProviderCertificationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderCertificationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listProviderCertificationsQuerySchema = zod_1.z.object({
    listProviderCertifications: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderCertification"),
            id: zod_1.z.string(),
            certificationName: zod_1.z.string(),
            issuedBy: zod_1.z.string(),
            validFrom: zod_1.z.string(),
            validUntil: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceProviderCertificationsId: zod_1.z.string().optional().nullable(),
            providerProviderCertificationId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncProviderCertificationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderCertificationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncProviderCertificationsQuerySchema = zod_1.z.object({
    syncProviderCertifications: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderCertification"),
            id: zod_1.z.string(),
            certificationName: zod_1.z.string(),
            issuedBy: zod_1.z.string(),
            validFrom: zod_1.z.string(),
            validUntil: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceProviderCertificationsId: zod_1.z.string().optional().nullable(),
            providerProviderCertificationId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getServiceVideoQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getServiceVideoQuerySchema = zod_1.z.object({
    getServiceVideo: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceVideo"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        videoURL: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceVideosId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listServiceVideosQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceVideoFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listServiceVideosQuerySchema = zod_1.z.object({
    listServiceVideos: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceVideoConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceVideo"),
            id: zod_1.z.string(),
            videoURL: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceServiceVideosId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncServiceVideosQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceVideoFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncServiceVideosQuerySchema = zod_1.z.object({
    syncServiceVideos: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceVideoConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceVideo"),
            id: zod_1.z.string(),
            videoURL: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceServiceVideosId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getServiceImageQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getServiceImageQuerySchema = zod_1.z.object({
    getServiceImage: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceImage"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        imageURL: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceImagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listServiceImagesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceImageFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listServiceImagesQuerySchema = zod_1.z.object({
    listServiceImages: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceImageConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceImage"),
            id: zod_1.z.string(),
            imageURL: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceServiceImagesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncServiceImagesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceImageFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncServiceImagesQuerySchema = zod_1.z.object({
    syncServiceImages: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceImageConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceImage"),
            id: zod_1.z.string(),
            imageURL: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceServiceImagesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getServiceReviewQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getServiceReviewQuerySchema = zod_1.z.object({
    getServiceReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceReview"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceReviewsId: zod_1.z.string().optional().nullable(),
        userServiceReviewsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listServiceReviewsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceReviewFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listServiceReviewsQuerySchema = zod_1.z.object({
    listServiceReviews: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceReviewConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceReview"),
            id: zod_1.z.string(),
            rating: zod_1.z.number(),
            comment: zod_1.z.string(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceServiceReviewsId: zod_1.z.string().optional().nullable(),
            userServiceReviewsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncServiceReviewsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceReviewFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncServiceReviewsQuerySchema = zod_1.z.object({
    syncServiceReviews: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceReviewConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceReview"),
            id: zod_1.z.string(),
            rating: zod_1.z.number(),
            comment: zod_1.z.string(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceServiceReviewsId: zod_1.z.string().optional().nullable(),
            userServiceReviewsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getAIDiagnosticsQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getAIDiagnosticsQuerySchema = zod_1.z.object({
    getAIDiagnostics: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIDiagnostics"),
        id: zod_1.z.string(),
        aiChatBot: zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        diagnosticData: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        aIChatBotDiagnosticsId: zod_1.z.string().optional().nullable(),
        serviceAiDiagnosticsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listAIDiagnosticsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelAIDiagnosticsFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listAIDiagnosticsQuerySchema = zod_1.z.object({
    listAIDiagnostics: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("AIDiagnostics"),
            id: zod_1.z.string(),
            diagnosticData: zod_1.z.string(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            aIChatBotDiagnosticsId: zod_1.z.string().optional().nullable(),
            serviceAiDiagnosticsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncAIDiagnosticsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelAIDiagnosticsFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncAIDiagnosticsQuerySchema = zod_1.z.object({
    syncAIDiagnostics: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("AIDiagnostics"),
            id: zod_1.z.string(),
            diagnosticData: zod_1.z.string(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            aIChatBotDiagnosticsId: zod_1.z.string().optional().nullable(),
            serviceAiDiagnosticsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getCustomizationQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getCustomizationQuerySchema = zod_1.z.object({
    getCustomization: zod_1.z
        .object({
        __typename: zod_1.z.literal("Customization"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizationType: zod_1.z.string(),
        customizationValue: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceCustomizationsId: zod_1.z.string().optional().nullable(),
        userCustomizationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listCustomizationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelCustomizationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listCustomizationsQuerySchema = zod_1.z.object({
    listCustomizations: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelCustomizationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Customization"),
            id: zod_1.z.string(),
            customizationType: zod_1.z.string(),
            customizationValue: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceCustomizationsId: zod_1.z.string().optional().nullable(),
            userCustomizationsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncCustomizationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelCustomizationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncCustomizationsQuerySchema = zod_1.z.object({
    syncCustomizations: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelCustomizationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Customization"),
            id: zod_1.z.string(),
            customizationType: zod_1.z.string(),
            customizationValue: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceCustomizationsId: zod_1.z.string().optional().nullable(),
            userCustomizationsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getExpenseQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getExpenseQuerySchema = zod_1.z.object({
    getExpense: zod_1.z
        .object({
        __typename: zod_1.z.literal("Expense"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        description: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceExpensesId: zod_1.z.string().optional().nullable(),
        providerExpensesId: zod_1.z.string().optional().nullable(),
        userExpensesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listExpensesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelExpenseFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listExpensesQuerySchema = zod_1.z.object({
    listExpenses: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelExpenseConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Expense"),
            id: zod_1.z.string(),
            amount: zod_1.z.number(),
            description: zod_1.z.string(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceExpensesId: zod_1.z.string().optional().nullable(),
            providerExpensesId: zod_1.z.string().optional().nullable(),
            userExpensesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncExpensesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelExpenseFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncExpensesQuerySchema = zod_1.z.object({
    syncExpenses: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelExpenseConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Expense"),
            id: zod_1.z.string(),
            amount: zod_1.z.number(),
            description: zod_1.z.string(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceExpensesId: zod_1.z.string().optional().nullable(),
            providerExpensesId: zod_1.z.string().optional().nullable(),
            userExpensesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getFavoriteProviderQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getFavoriteProviderQuerySchema = zod_1.z.object({
    getFavoriteProvider: zod_1.z
        .object({
        __typename: zod_1.z.literal("FavoriteProvider"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateAdded: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        providerFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        userFavoriteProvidersId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listFavoriteProvidersQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelFavoriteProviderFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listFavoriteProvidersQuerySchema = zod_1.z.object({
    listFavoriteProviders: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("FavoriteProvider"),
            id: zod_1.z.string(),
            dateAdded: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceFavoriteProvidersId: zod_1.z.string().optional().nullable(),
            providerFavoriteProvidersId: zod_1.z.string().optional().nullable(),
            userFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncFavoriteProvidersQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelFavoriteProviderFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncFavoriteProvidersQuerySchema = zod_1.z.object({
    syncFavoriteProviders: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("FavoriteProvider"),
            id: zod_1.z.string(),
            dateAdded: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceFavoriteProvidersId: zod_1.z.string().optional().nullable(),
            providerFavoriteProvidersId: zod_1.z.string().optional().nullable(),
            userFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getUserHistoryQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getUserHistoryQuerySchema = zod_1.z.object({
    getUserHistory: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserHistory"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        action: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserHistoriesId: zod_1.z.string().optional().nullable(),
        userUserHistoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listUserHistoriesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserHistoryFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listUserHistoriesQuerySchema = zod_1.z.object({
    listUserHistories: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserHistoryConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("UserHistory"),
            id: zod_1.z.string(),
            action: zod_1.z.string(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceUserHistoriesId: zod_1.z.string().optional().nullable(),
            userUserHistoriesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncUserHistoriesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserHistoryFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncUserHistoriesQuerySchema = zod_1.z.object({
    syncUserHistories: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserHistoryConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("UserHistory"),
            id: zod_1.z.string(),
            action: zod_1.z.string(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceUserHistoriesId: zod_1.z.string().optional().nullable(),
            userUserHistoriesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getProviderAwardQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getProviderAwardQuerySchema = zod_1.z.object({
    getProviderAward: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderAward"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        awardName: zod_1.z.string(),
        awardedBy: zod_1.z.string(),
        dateAwarded: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderAwardsId: zod_1.z.string().optional().nullable(),
        providerProviderAwardsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listProviderAwardsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderAwardFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listProviderAwardsQuerySchema = zod_1.z.object({
    listProviderAwards: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderAwardConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderAward"),
            id: zod_1.z.string(),
            awardName: zod_1.z.string(),
            awardedBy: zod_1.z.string(),
            dateAwarded: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceProviderAwardsId: zod_1.z.string().optional().nullable(),
            providerProviderAwardsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncProviderAwardsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderAwardFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncProviderAwardsQuerySchema = zod_1.z.object({
    syncProviderAwards: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderAwardConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderAward"),
            id: zod_1.z.string(),
            awardName: zod_1.z.string(),
            awardedBy: zod_1.z.string(),
            dateAwarded: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceProviderAwardsId: zod_1.z.string().optional().nullable(),
            providerProviderAwardsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getReferralQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getReferralQuerySchema = zod_1.z.object({
    getReferral: zod_1.z
        .object({
        __typename: zod_1.z.literal("Referral"),
        id: zod_1.z.string(),
        referrer: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        referred: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateReferred: zod_1.z.string(),
        reward: zod_1.z
            .object({
            __typename: zod_1.z.literal("Reward"),
            id: zod_1.z.string(),
            rewardName: zod_1.z.string(),
            description: zod_1.z.string(),
            value: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
            userRewardsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        rewardReferralsId: zod_1.z.string().optional().nullable(),
        serviceReferralsId: zod_1.z.string().optional().nullable(),
        providerProviderReferralsId: zod_1.z.string().optional().nullable(),
        userReferralsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listReferralsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelReferralFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listReferralsQuerySchema = zod_1.z.object({
    listReferrals: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelReferralConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Referral"),
            id: zod_1.z.string(),
            dateReferred: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            rewardReferralsId: zod_1.z.string().optional().nullable(),
            serviceReferralsId: zod_1.z.string().optional().nullable(),
            providerProviderReferralsId: zod_1.z.string().optional().nullable(),
            userReferralsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncReferralsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelReferralFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncReferralsQuerySchema = zod_1.z.object({
    syncReferrals: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelReferralConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Referral"),
            id: zod_1.z.string(),
            dateReferred: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            rewardReferralsId: zod_1.z.string().optional().nullable(),
            serviceReferralsId: zod_1.z.string().optional().nullable(),
            providerProviderReferralsId: zod_1.z.string().optional().nullable(),
            userReferralsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getTipQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getTipQuerySchema = zod_1.z.object({
    getTip: zod_1.z
        .object({
        __typename: zod_1.z.literal("Tip"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderTipsId: zod_1.z.string().optional().nullable(),
        userTipsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listTipsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelTipFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listTipsQuerySchema = zod_1.z.object({
    listTips: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelTipConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Tip"),
            id: zod_1.z.string(),
            amount: zod_1.z.number(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderTipsId: zod_1.z.string().optional().nullable(),
            userTipsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncTipsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelTipFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncTipsQuerySchema = zod_1.z.object({
    syncTips: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelTipConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Tip"),
            id: zod_1.z.string(),
            amount: zod_1.z.number(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderTipsId: zod_1.z.string().optional().nullable(),
            userTipsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getPaymentMethodQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getPaymentMethodQuerySchema = zod_1.z.object({
    getPaymentMethod: zod_1.z
        .object({
        __typename: zod_1.z.literal("PaymentMethod"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        cardNumber: zod_1.z.string(),
        expiryDate: zod_1.z.string(),
        cardType: exports.cardTypeSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userPaymentMethodsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listPaymentMethodsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelPaymentMethodFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listPaymentMethodsQuerySchema = zod_1.z.object({
    listPaymentMethods: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelPaymentMethodConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("PaymentMethod"),
            id: zod_1.z.string(),
            cardNumber: zod_1.z.string(),
            expiryDate: zod_1.z.string(),
            cardType: exports.cardTypeSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userPaymentMethodsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncPaymentMethodsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelPaymentMethodFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncPaymentMethodsQuerySchema = zod_1.z.object({
    syncPaymentMethods: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelPaymentMethodConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("PaymentMethod"),
            id: zod_1.z.string(),
            cardNumber: zod_1.z.string(),
            expiryDate: zod_1.z.string(),
            cardType: exports.cardTypeSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userPaymentMethodsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getInvoiceQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getInvoiceQuerySchema = zod_1.z.object({
    getInvoice: zod_1.z
        .object({
        __typename: zod_1.z.literal("Invoice"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        dateIssued: zod_1.z.string(),
        dueDate: zod_1.z.string(),
        status: exports.invoiceStatusSchema.optional().nullable(),
        services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderInvoicesId: zod_1.z.string().optional().nullable(),
        userInvoicesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listInvoicesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelInvoiceFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listInvoicesQuerySchema = zod_1.z.object({
    listInvoices: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelInvoiceConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Invoice"),
            id: zod_1.z.string(),
            amount: zod_1.z.number(),
            dateIssued: zod_1.z.string(),
            dueDate: zod_1.z.string(),
            status: exports.invoiceStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderInvoicesId: zod_1.z.string().optional().nullable(),
            userInvoicesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncInvoicesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelInvoiceFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncInvoicesQuerySchema = zod_1.z.object({
    syncInvoices: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelInvoiceConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Invoice"),
            id: zod_1.z.string(),
            amount: zod_1.z.number(),
            dateIssued: zod_1.z.string(),
            dueDate: zod_1.z.string(),
            status: exports.invoiceStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderInvoicesId: zod_1.z.string().optional().nullable(),
            userInvoicesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getContractQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getContractQuerySchema = zod_1.z.object({
    getContract: zod_1.z
        .object({
        __typename: zod_1.z.literal("Contract"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        terms: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceContractsId: zod_1.z.string().optional().nullable(),
        providerProviderContractsId: zod_1.z.string().optional().nullable(),
        userContractsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listContractsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelContractFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listContractsQuerySchema = zod_1.z.object({
    listContracts: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelContractConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Contract"),
            id: zod_1.z.string(),
            startDate: zod_1.z.string(),
            endDate: zod_1.z.string(),
            terms: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceContractsId: zod_1.z.string().optional().nullable(),
            providerProviderContractsId: zod_1.z.string().optional().nullable(),
            userContractsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncContractsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelContractFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncContractsQuerySchema = zod_1.z.object({
    syncContracts: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelContractConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Contract"),
            id: zod_1.z.string(),
            startDate: zod_1.z.string(),
            endDate: zod_1.z.string(),
            terms: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceContractsId: zod_1.z.string().optional().nullable(),
            providerProviderContractsId: zod_1.z.string().optional().nullable(),
            userContractsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getNicheServiceQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getNicheServiceQuerySchema = zod_1.z.object({
    getNicheService: zod_1.z
        .object({
        __typename: zod_1.z.literal("NicheService"),
        id: zod_1.z.string(),
        serviceName: zod_1.z.string(),
        description: zod_1.z.string(),
        providers: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listNicheServicesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelNicheServiceFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listNicheServicesQuerySchema = zod_1.z.object({
    listNicheServices: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelNicheServiceConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("NicheService"),
            id: zod_1.z.string(),
            serviceName: zod_1.z.string(),
            description: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncNicheServicesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelNicheServiceFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncNicheServicesQuerySchema = zod_1.z.object({
    syncNicheServices: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelNicheServiceConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("NicheService"),
            id: zod_1.z.string(),
            serviceName: zod_1.z.string(),
            description: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getServicePackageQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getServicePackageQuerySchema = zod_1.z.object({
    getServicePackage: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServicePackage"),
        id: zod_1.z.string(),
        packageName: zod_1.z.string(),
        services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        discount: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listServicePackagesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServicePackageFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listServicePackagesQuerySchema = zod_1.z.object({
    listServicePackages: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServicePackageConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServicePackage"),
            id: zod_1.z.string(),
            packageName: zod_1.z.string(),
            discount: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncServicePackagesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServicePackageFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncServicePackagesQuerySchema = zod_1.z.object({
    syncServicePackages: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServicePackageConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServicePackage"),
            id: zod_1.z.string(),
            packageName: zod_1.z.string(),
            discount: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getRewardQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getRewardQuerySchema = zod_1.z.object({
    getReward: zod_1.z
        .object({
        __typename: zod_1.z.literal("Reward"),
        id: zod_1.z.string(),
        rewardName: zod_1.z.string(),
        description: zod_1.z.string(),
        value: zod_1.z.number(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
        userRewardsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listRewardsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelRewardFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listRewardsQuerySchema = zod_1.z.object({
    listRewards: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelRewardConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Reward"),
            id: zod_1.z.string(),
            rewardName: zod_1.z.string(),
            description: zod_1.z.string(),
            value: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
            userRewardsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncRewardsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelRewardFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncRewardsQuerySchema = zod_1.z.object({
    syncRewards: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelRewardConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Reward"),
            id: zod_1.z.string(),
            rewardName: zod_1.z.string(),
            description: zod_1.z.string(),
            value: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
            userRewardsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getLoyaltyProgramQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getLoyaltyProgramQuerySchema = zod_1.z.object({
    getLoyaltyProgram: zod_1.z
        .object({
        __typename: zod_1.z.literal("LoyaltyProgram"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        points: zod_1.z.number(),
        rewards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelRewardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userLoyaltyProgramsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listLoyaltyProgramsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelLoyaltyProgramFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listLoyaltyProgramsQuerySchema = zod_1.z.object({
    listLoyaltyPrograms: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelLoyaltyProgramConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("LoyaltyProgram"),
            id: zod_1.z.string(),
            points: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userLoyaltyProgramsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncLoyaltyProgramsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelLoyaltyProgramFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncLoyaltyProgramsQuerySchema = zod_1.z.object({
    syncLoyaltyPrograms: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelLoyaltyProgramConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("LoyaltyProgram"),
            id: zod_1.z.string(),
            points: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userLoyaltyProgramsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getVerificationQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getVerificationQuerySchema = zod_1.z.object({
    getVerification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Verification"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        verificationCode: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.verificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userVerificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listVerificationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelVerificationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listVerificationsQuerySchema = zod_1.z.object({
    listVerifications: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelVerificationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Verification"),
            id: zod_1.z.string(),
            verificationCode: zod_1.z.string(),
            dateSent: zod_1.z.string(),
            status: exports.verificationStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userVerificationsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncVerificationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelVerificationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncVerificationsQuerySchema = zod_1.z.object({
    syncVerifications: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelVerificationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Verification"),
            id: zod_1.z.string(),
            verificationCode: zod_1.z.string(),
            dateSent: zod_1.z.string(),
            status: exports.verificationStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userVerificationsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getAnalyticsQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getAnalyticsQuerySchema = zod_1.z.object({
    getAnalytics: zod_1.z
        .object({
        __typename: zod_1.z.literal("Analytics"),
        id: zod_1.z.string(),
        userCount: zod_1.z.number(),
        providerCount: zod_1.z.number(),
        serviceCount: zod_1.z.number(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listAnalyticsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelAnalyticsFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listAnalyticsQuerySchema = zod_1.z.object({
    listAnalytics: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelAnalyticsConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Analytics"),
            id: zod_1.z.string(),
            userCount: zod_1.z.number(),
            providerCount: zod_1.z.number(),
            serviceCount: zod_1.z.number(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncAnalyticsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelAnalyticsFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncAnalyticsQuerySchema = zod_1.z.object({
    syncAnalytics: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelAnalyticsConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Analytics"),
            id: zod_1.z.string(),
            userCount: zod_1.z.number(),
            providerCount: zod_1.z.number(),
            serviceCount: zod_1.z.number(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getPromoCodeQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getPromoCodeQuerySchema = zod_1.z.object({
    getPromoCode: zod_1.z
        .object({
        __typename: zod_1.z.literal("PromoCode"),
        id: zod_1.z.string(),
        code: zod_1.z.string(),
        discount: zod_1.z.number(),
        validFrom: zod_1.z.string(),
        validUntil: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listPromoCodesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelPromoCodeFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listPromoCodesQuerySchema = zod_1.z.object({
    listPromoCodes: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelPromoCodeConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("PromoCode"),
            id: zod_1.z.string(),
            code: zod_1.z.string(),
            discount: zod_1.z.number(),
            validFrom: zod_1.z.string(),
            validUntil: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncPromoCodesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelPromoCodeFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncPromoCodesQuerySchema = zod_1.z.object({
    syncPromoCodes: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelPromoCodeConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("PromoCode"),
            id: zod_1.z.string(),
            code: zod_1.z.string(),
            discount: zod_1.z.number(),
            validFrom: zod_1.z.string(),
            validUntil: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getReportQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getReportQuerySchema = zod_1.z.object({
    getReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("Report"),
        id: zod_1.z.string(),
        reporter: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        reportedEntity: zod_1.z.string(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listReportsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelReportFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listReportsQuerySchema = zod_1.z.object({
    listReports: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelReportConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Report"),
            id: zod_1.z.string(),
            reportedEntity: zod_1.z.string(),
            description: zod_1.z.string(),
            dateReported: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userReportsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncReportsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelReportFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncReportsQuerySchema = zod_1.z.object({
    syncReports: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelReportConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Report"),
            id: zod_1.z.string(),
            reportedEntity: zod_1.z.string(),
            description: zod_1.z.string(),
            dateReported: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userReportsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getJobTrackingQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getJobTrackingQuerySchema = zod_1.z.object({
    getJobTracking: zod_1.z
        .object({
        __typename: zod_1.z.literal("JobTracking"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        status: exports.jobStatusSchema.optional().nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceJobTrackingsId: zod_1.z.string().optional().nullable(),
        providerJobTrackingId: zod_1.z.string().optional().nullable(),
        userJobTrackingsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listJobTrackingsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelJobTrackingFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listJobTrackingsQuerySchema = zod_1.z.object({
    listJobTrackings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelJobTrackingConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("JobTracking"),
            id: zod_1.z.string(),
            status: exports.jobStatusSchema.optional().nullable(),
            startDate: zod_1.z.string(),
            endDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceJobTrackingsId: zod_1.z.string().optional().nullable(),
            providerJobTrackingId: zod_1.z.string().optional().nullable(),
            userJobTrackingsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncJobTrackingsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelJobTrackingFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncJobTrackingsQuerySchema = zod_1.z.object({
    syncJobTrackings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelJobTrackingConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("JobTracking"),
            id: zod_1.z.string(),
            status: exports.jobStatusSchema.optional().nullable(),
            startDate: zod_1.z.string(),
            endDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceJobTrackingsId: zod_1.z.string().optional().nullable(),
            providerJobTrackingId: zod_1.z.string().optional().nullable(),
            userJobTrackingsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getAIChatLogQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getAIChatLogQuerySchema = zod_1.z.object({
    getAIChatLog: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIChatLog"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatBot: zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        message: zod_1.z.string(),
        response: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        aIChatBotChatLogsId: zod_1.z.string().optional().nullable(),
        userAiChatLogsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listAIChatLogsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelAIChatLogFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listAIChatLogsQuerySchema = zod_1.z.object({
    listAIChatLogs: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelAIChatLogConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatLog"),
            id: zod_1.z.string(),
            message: zod_1.z.string(),
            response: zod_1.z.string(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            aIChatBotChatLogsId: zod_1.z.string().optional().nullable(),
            userAiChatLogsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncAIChatLogsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelAIChatLogFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncAIChatLogsQuerySchema = zod_1.z.object({
    syncAIChatLogs: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelAIChatLogConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatLog"),
            id: zod_1.z.string(),
            message: zod_1.z.string(),
            response: zod_1.z.string(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            aIChatBotChatLogsId: zod_1.z.string().optional().nullable(),
            userAiChatLogsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getAIChatBotQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getAIChatBotQuerySchema = zod_1.z.object({
    getAIChatBot: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIChatBot"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        version: zod_1.z.string(),
        diagnostics: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        chatLogs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatLogConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userAiChatBotsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listAIChatBotsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelAIChatBotFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listAIChatBotsQuerySchema = zod_1.z.object({
    listAIChatBots: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelAIChatBotConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncAIChatBotsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelAIChatBotFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncAIChatBotsQuerySchema = zod_1.z.object({
    syncAIChatBots: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelAIChatBotConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getMainCategoryQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getMainCategoryQuerySchema = zod_1.z.object({
    getMainCategory: zod_1.z
        .object({
        __typename: zod_1.z.literal("MainCategory"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        descrption: zod_1.z.string().optional().nullable(),
        SubCategories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelSubCategoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listMainCategoriesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelMainCategoryFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listMainCategoriesQuerySchema = zod_1.z.object({
    listMainCategories: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelMainCategoryConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("MainCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            descrption: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncMainCategoriesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelMainCategoryFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncMainCategoriesQuerySchema = zod_1.z.object({
    syncMainCategories: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelMainCategoryConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("MainCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            descrption: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getSubCategoryQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getSubCategoryQuerySchema = zod_1.z.object({
    getSubCategory: zod_1.z
        .object({
        __typename: zod_1.z.literal("SubCategory"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        MainCategory: zod_1.z
            .object({
            __typename: zod_1.z.literal("MainCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            descrption: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        Services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listSubCategoriesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelSubCategoryFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listSubCategoriesQuerySchema = zod_1.z.object({
    listSubCategories: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelSubCategoryConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("SubCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncSubCategoriesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelSubCategoryFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncSubCategoriesQuerySchema = zod_1.z.object({
    syncSubCategories: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelSubCategoryConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("SubCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getPLMBRSubscriptionQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getPLMBRSubscriptionQuerySchema = zod_1.z.object({
    getPLMBRSubscription: zod_1.z
        .object({
        __typename: zod_1.z.literal("PLMBRSubscription"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userSubscriptionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listPLMBRSubscriptionsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelPLMBRSubscriptionFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listPLMBRSubscriptionsQuerySchema = zod_1.z.object({
    listPLMBRSubscriptions: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelPLMBRSubscriptionConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("PLMBRSubscription"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userSubscriptionsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncPLMBRSubscriptionsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelPLMBRSubscriptionFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncPLMBRSubscriptionsQuerySchema = zod_1.z.object({
    syncPLMBRSubscriptions: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelPLMBRSubscriptionConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("PLMBRSubscription"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userSubscriptionsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getUserSettingsQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getUserSettingsQuerySchema = zod_1.z.object({
    getUserSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserSettings"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listUserSettingsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserSettingsFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listUserSettingsQuerySchema = zod_1.z.object({
    listUserSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserSettingsConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("UserSettings"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncUserSettingsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserSettingsFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncUserSettingsQuerySchema = zod_1.z.object({
    syncUserSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserSettingsConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("UserSettings"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getProviderSettingsQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getProviderSettingsQuerySchema = zod_1.z.object({
    getProviderSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderSettings"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listProviderSettingsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderSettingsFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listProviderSettingsQuerySchema = zod_1.z.object({
    listProviderSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderSettingsConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderSettings"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncProviderSettingsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderSettingsFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncProviderSettingsQuerySchema = zod_1.z.object({
    syncProviderSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderSettingsConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderSettings"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getPortfolioQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getPortfolioQuerySchema = zod_1.z.object({
    getPortfolio: zod_1.z
        .object({
        __typename: zod_1.z.literal("Portfolio"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listPortfoliosQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelPortfolioFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listPortfoliosQuerySchema = zod_1.z.object({
    listPortfolios: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelPortfolioConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Portfolio"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncPortfoliosQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelPortfolioFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncPortfoliosQuerySchema = zod_1.z.object({
    syncPortfolios: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelPortfolioConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Portfolio"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getServiceVariantQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getServiceVariantQuerySchema = zod_1.z.object({
    getServiceVariant: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceVariant"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listServiceVariantsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceVariantFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listServiceVariantsQuerySchema = zod_1.z.object({
    listServiceVariants: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceVariantConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceVariant"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncServiceVariantsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceVariantFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncServiceVariantsQuerySchema = zod_1.z.object({
    syncServiceVariants: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceVariantConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceVariant"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getServiceHighlightQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getServiceHighlightQuerySchema = zod_1.z.object({
    getServiceHighlight: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceHighlight"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listServiceHighlightsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceHighlightFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listServiceHighlightsQuerySchema = zod_1.z.object({
    listServiceHighlights: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceHighlightConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceHighlight"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncServiceHighlightsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceHighlightFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncServiceHighlightsQuerySchema = zod_1.z.object({
    syncServiceHighlights: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceHighlightConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceHighlight"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getServiceTagQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getServiceTagQuerySchema = zod_1.z.object({
    getServiceTag: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceTag"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listServiceTagsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceTagFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listServiceTagsQuerySchema = zod_1.z.object({
    listServiceTags: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceTagConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceTag"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncServiceTagsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceTagFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncServiceTagsQuerySchema = zod_1.z.object({
    syncServiceTags: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceTagConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceTag"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getServiceFAQQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getServiceFAQQuerySchema = zod_1.z.object({
    getServiceFAQ: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceFAQ"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listServiceFAQSQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceFAQFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listServiceFAQSQuerySchema = zod_1.z.object({
    listServiceFAQS: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceFAQConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceFAQ"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncServiceFAQSQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceFAQFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncServiceFAQSQuerySchema = zod_1.z.object({
    syncServiceFAQS: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceFAQConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ServiceFAQ"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getFeedbackQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getFeedbackQuerySchema = zod_1.z.object({
    getFeedback: zod_1.z
        .object({
        __typename: zod_1.z.literal("Feedback"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userFeedbacksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listFeedbacksQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelFeedbackFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listFeedbacksQuerySchema = zod_1.z.object({
    listFeedbacks: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelFeedbackConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Feedback"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userFeedbacksId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncFeedbacksQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelFeedbackFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncFeedbacksQuerySchema = zod_1.z.object({
    syncFeedbacks: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelFeedbackConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Feedback"),
            id: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userFeedbacksId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getEquipmentQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getEquipmentQuerySchema = zod_1.z.object({
    getEquipment: zod_1.z
        .object({
        __typename: zod_1.z.literal("Equipment"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        category: exports.equipmentCategorySchema.optional().nullable(),
        availabilityStatus: exports.equipmentAvailabilityStatusSchema
            .optional()
            .nullable(),
        purchaseDate: zod_1.z.string().optional().nullable(),
        maintenanceDate: zod_1.z.string().optional().nullable(),
        image: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listEquipmentQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelEquipmentFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listEquipmentQuerySchema = zod_1.z.object({
    listEquipment: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelEquipmentConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Equipment"),
            id: zod_1.z.string(),
            providerID: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            category: exports.equipmentCategorySchema.optional().nullable(),
            availabilityStatus: exports.equipmentAvailabilityStatusSchema
                .optional()
                .nullable(),
            purchaseDate: zod_1.z.string().optional().nullable(),
            maintenanceDate: zod_1.z.string().optional().nullable(),
            image: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncEquipmentQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelEquipmentFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncEquipmentQuerySchema = zod_1.z.object({
    syncEquipment: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelEquipmentConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Equipment"),
            id: zod_1.z.string(),
            providerID: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            category: exports.equipmentCategorySchema.optional().nullable(),
            availabilityStatus: exports.equipmentAvailabilityStatusSchema
                .optional()
                .nullable(),
            purchaseDate: zod_1.z.string().optional().nullable(),
            maintenanceDate: zod_1.z.string().optional().nullable(),
            image: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getWalletQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getWalletQuerySchema = zod_1.z.object({
    getWallet: zod_1.z
        .object({
        __typename: zod_1.z.literal("Wallet"),
        id: zod_1.z.string(),
        ownerID: zod_1.z.string(),
        balance: zod_1.z.number(),
        currency: zod_1.z.string(),
        transactions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTransactionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        lastUpdated: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listWalletsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelWalletFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listWalletsQuerySchema = zod_1.z.object({
    listWallets: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelWalletConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncWalletsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelWalletFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncWalletsQuerySchema = zod_1.z.object({
    syncWallets: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelWalletConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getTransactionQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getTransactionQuerySchema = zod_1.z.object({
    getTransaction: zod_1.z
        .object({
        __typename: zod_1.z.literal("Transaction"),
        id: zod_1.z.string(),
        wallet: zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        type: exports.transactionTypeSchema.optional().nullable(),
        description: zod_1.z.string().optional().nullable(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        walletTransactionsId: zod_1.z.string().optional().nullable(),
        userTransactionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listTransactionsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelTransactionFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listTransactionsQuerySchema = zod_1.z.object({
    listTransactions: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelTransactionConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Transaction"),
            id: zod_1.z.string(),
            amount: zod_1.z.number(),
            type: exports.transactionTypeSchema.optional().nullable(),
            description: zod_1.z.string().optional().nullable(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            walletTransactionsId: zod_1.z.string().optional().nullable(),
            userTransactionsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncTransactionsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelTransactionFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncTransactionsQuerySchema = zod_1.z.object({
    syncTransactions: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelTransactionConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Transaction"),
            id: zod_1.z.string(),
            amount: zod_1.z.number(),
            type: exports.transactionTypeSchema.optional().nullable(),
            description: zod_1.z.string().optional().nullable(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            walletTransactionsId: zod_1.z.string().optional().nullable(),
            userTransactionsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getReviewQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getReviewQuerySchema = zod_1.z.object({
    getReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("Review"),
        id: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string().optional().nullable(),
        date: zod_1.z.string(),
        response: zod_1.z
            .object({
            __typename: zod_1.z.literal("ReviewResponse"),
            id: zod_1.z.string(),
            responseText: zod_1.z.string(),
            responseDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            reviewResponseReviewId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceReviewsId: zod_1.z.string().optional().nullable(),
        providerReviewsId: zod_1.z.string().optional().nullable(),
        userReviewsId: zod_1.z.string().optional().nullable(),
        reviewResponseId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listReviewsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelReviewFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listReviewsQuerySchema = zod_1.z.object({
    listReviews: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelReviewConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Review"),
            id: zod_1.z.string(),
            rating: zod_1.z.number(),
            comment: zod_1.z.string().optional().nullable(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceReviewsId: zod_1.z.string().optional().nullable(),
            providerReviewsId: zod_1.z.string().optional().nullable(),
            userReviewsId: zod_1.z.string().optional().nullable(),
            reviewResponseId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncReviewsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelReviewFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncReviewsQuerySchema = zod_1.z.object({
    syncReviews: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelReviewConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Review"),
            id: zod_1.z.string(),
            rating: zod_1.z.number(),
            comment: zod_1.z.string().optional().nullable(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceReviewsId: zod_1.z.string().optional().nullable(),
            providerReviewsId: zod_1.z.string().optional().nullable(),
            userReviewsId: zod_1.z.string().optional().nullable(),
            reviewResponseId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getReviewResponseQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getReviewResponseQuerySchema = zod_1.z.object({
    getReviewResponse: zod_1.z
        .object({
        __typename: zod_1.z.literal("ReviewResponse"),
        id: zod_1.z.string(),
        review: zod_1.z
            .object({
            __typename: zod_1.z.literal("Review"),
            id: zod_1.z.string(),
            rating: zod_1.z.number(),
            comment: zod_1.z.string().optional().nullable(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceReviewsId: zod_1.z.string().optional().nullable(),
            providerReviewsId: zod_1.z.string().optional().nullable(),
            userReviewsId: zod_1.z.string().optional().nullable(),
            reviewResponseId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        responseText: zod_1.z.string(),
        responseDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        reviewResponseReviewId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listReviewResponsesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelReviewResponseFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listReviewResponsesQuerySchema = zod_1.z.object({
    listReviewResponses: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelReviewResponseConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ReviewResponse"),
            id: zod_1.z.string(),
            responseText: zod_1.z.string(),
            responseDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            reviewResponseReviewId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncReviewResponsesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelReviewResponseFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncReviewResponsesQuerySchema = zod_1.z.object({
    syncReviewResponses: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelReviewResponseConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ReviewResponse"),
            id: zod_1.z.string(),
            responseText: zod_1.z.string(),
            responseDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            reviewResponseReviewId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getMessageThreadQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getMessageThreadQuerySchema = zod_1.z.object({
    getMessageThread: zod_1.z
        .object({
        __typename: zod_1.z.literal("MessageThread"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        messages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageContentConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        lastMessageDate: zod_1.z.string().optional().nullable(),
        lastMessageContent: zod_1.z.string().optional().nullable(),
        status: exports.messageStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderMessagesId: zod_1.z.string().optional().nullable(),
        userMessagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listMessageThreadsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelMessageThreadFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listMessageThreadsQuerySchema = zod_1.z.object({
    listMessageThreads: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelMessageThreadConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("MessageThread"),
            id: zod_1.z.string(),
            lastMessageDate: zod_1.z.string().optional().nullable(),
            lastMessageContent: zod_1.z.string().optional().nullable(),
            status: exports.messageStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderMessagesId: zod_1.z.string().optional().nullable(),
            userMessagesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncMessageThreadsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelMessageThreadFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncMessageThreadsQuerySchema = zod_1.z.object({
    syncMessageThreads: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelMessageThreadConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("MessageThread"),
            id: zod_1.z.string(),
            lastMessageDate: zod_1.z.string().optional().nullable(),
            lastMessageContent: zod_1.z.string().optional().nullable(),
            status: exports.messageStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderMessagesId: zod_1.z.string().optional().nullable(),
            userMessagesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getMessageContentQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getMessageContentQuerySchema = zod_1.z.object({
    getMessageContent: zod_1.z
        .object({
        __typename: zod_1.z.literal("MessageContent"),
        id: zod_1.z.string(),
        thread: zod_1.z
            .object({
            __typename: zod_1.z.literal("MessageThread"),
            id: zod_1.z.string(),
            lastMessageDate: zod_1.z.string().optional().nullable(),
            lastMessageContent: zod_1.z.string().optional().nullable(),
            status: exports.messageStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderMessagesId: zod_1.z.string().optional().nullable(),
            userMessagesId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        sender: zod_1.z.string().optional().nullable(),
        content: zod_1.z.string(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        messageThreadMessagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listMessageContentsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelMessageContentFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listMessageContentsQuerySchema = zod_1.z.object({
    listMessageContents: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelMessageContentConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("MessageContent"),
            id: zod_1.z.string(),
            sender: zod_1.z.string().optional().nullable(),
            content: zod_1.z.string(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            messageThreadMessagesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncMessageContentsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelMessageContentFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncMessageContentsQuerySchema = zod_1.z.object({
    syncMessageContents: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelMessageContentConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("MessageContent"),
            id: zod_1.z.string(),
            sender: zod_1.z.string().optional().nullable(),
            content: zod_1.z.string(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            messageThreadMessagesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getBookingQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getBookingQuerySchema = zod_1.z.object({
    getBooking: zod_1.z
        .object({
        __typename: zod_1.z.literal("Booking"),
        id: zod_1.z.string(),
        date: zod_1.z.string(),
        startTime: zod_1.z.string(),
        endTime: zod_1.z.string(),
        status: exports.bookingStatusSchema.optional().nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        location: zod_1.z.string().optional().nullable(),
        notes: zod_1.z.string().optional().nullable(),
        price: zod_1.z.number(),
        isInstantBooking: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceBookingsId: zod_1.z.string().optional().nullable(),
        providerProviderBookingsId: zod_1.z.string().optional().nullable(),
        userBookingsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listBookingsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelBookingFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listBookingsQuerySchema = zod_1.z.object({
    listBookings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelBookingConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Booking"),
            id: zod_1.z.string(),
            date: zod_1.z.string(),
            startTime: zod_1.z.string(),
            endTime: zod_1.z.string(),
            status: exports.bookingStatusSchema.optional().nullable(),
            location: zod_1.z.string().optional().nullable(),
            notes: zod_1.z.string().optional().nullable(),
            price: zod_1.z.number(),
            isInstantBooking: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceBookingsId: zod_1.z.string().optional().nullable(),
            providerProviderBookingsId: zod_1.z.string().optional().nullable(),
            userBookingsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncBookingsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelBookingFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncBookingsQuerySchema = zod_1.z.object({
    syncBookings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelBookingConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Booking"),
            id: zod_1.z.string(),
            date: zod_1.z.string(),
            startTime: zod_1.z.string(),
            endTime: zod_1.z.string(),
            status: exports.bookingStatusSchema.optional().nullable(),
            location: zod_1.z.string().optional().nullable(),
            notes: zod_1.z.string().optional().nullable(),
            price: zod_1.z.number(),
            isInstantBooking: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceBookingsId: zod_1.z.string().optional().nullable(),
            providerProviderBookingsId: zod_1.z.string().optional().nullable(),
            userBookingsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getTeamMemberQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getTeamMemberQuerySchema = zod_1.z.object({
    getTeamMember: zod_1.z
        .object({
        __typename: zod_1.z.literal("TeamMember"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        role: zod_1.z.string().optional().nullable(),
        currentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        jobSiteDuration: zod_1.z.string().optional().nullable(),
        communicationLog: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        assignedJobs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerID: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerTeamMembersId: zod_1.z.string().optional().nullable(),
        teamMemberCurrentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listTeamMembersQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelTeamMemberFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listTeamMembersQuerySchema = zod_1.z.object({
    listTeamMembers: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelTeamMemberConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("TeamMember"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            role: zod_1.z.string().optional().nullable(),
            jobSiteDuration: zod_1.z.string().optional().nullable(),
            providerID: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerTeamMembersId: zod_1.z.string().optional().nullable(),
            teamMemberCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncTeamMembersQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelTeamMemberFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncTeamMembersQuerySchema = zod_1.z.object({
    syncTeamMembers: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelTeamMemberConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("TeamMember"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            role: zod_1.z.string().optional().nullable(),
            jobSiteDuration: zod_1.z.string().optional().nullable(),
            providerID: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerTeamMembersId: zod_1.z.string().optional().nullable(),
            teamMemberCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getLocationQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getLocationQuerySchema = zod_1.z.object({
    getLocation: zod_1.z
        .object({
        __typename: zod_1.z.literal("Location"),
        id: zod_1.z.string(),
        latitude: zod_1.z.number(),
        longitude: zod_1.z.number(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listLocationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelLocationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listLocationsQuerySchema = zod_1.z.object({
    listLocations: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelLocationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncLocationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelLocationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncLocationsQuerySchema = zod_1.z.object({
    syncLocations: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelLocationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getMessageQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getMessageQuerySchema = zod_1.z.object({
    getMessage: zod_1.z
        .object({
        __typename: zod_1.z.literal("Message"),
        id: zod_1.z.string(),
        sender: zod_1.z.string(),
        content: zod_1.z.string(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        teamMemberCommunicationLogId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listMessagesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelMessageFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listMessagesQuerySchema = zod_1.z.object({
    listMessages: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelMessageConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Message"),
            id: zod_1.z.string(),
            sender: zod_1.z.string(),
            content: zod_1.z.string(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            teamMemberCommunicationLogId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncMessagesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelMessageFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncMessagesQuerySchema = zod_1.z.object({
    syncMessages: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelMessageConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Message"),
            id: zod_1.z.string(),
            sender: zod_1.z.string(),
            content: zod_1.z.string(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            teamMemberCommunicationLogId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getJobQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getJobQuerySchema = zod_1.z.object({
    getJob: zod_1.z
        .object({
        __typename: zod_1.z.literal("Job"),
        id: zod_1.z.string(),
        description: zod_1.z.string(),
        location: zod_1.z.string(),
        startTime: zod_1.z.string().optional().nullable(),
        endTime: zod_1.z.string().optional().nullable(),
        status: exports.jobStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        teamMemberAssignedJobsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listJobsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelJobFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listJobsQuerySchema = zod_1.z.object({
    listJobs: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelJobConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Job"),
            id: zod_1.z.string(),
            description: zod_1.z.string(),
            location: zod_1.z.string(),
            startTime: zod_1.z.string().optional().nullable(),
            endTime: zod_1.z.string().optional().nullable(),
            status: exports.jobStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            teamMemberAssignedJobsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncJobsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelJobFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncJobsQuerySchema = zod_1.z.object({
    syncJobs: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelJobConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Job"),
            id: zod_1.z.string(),
            description: zod_1.z.string(),
            location: zod_1.z.string(),
            startTime: zod_1.z.string().optional().nullable(),
            endTime: zod_1.z.string().optional().nullable(),
            status: exports.jobStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            teamMemberAssignedJobsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getServiceQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getServiceQuerySchema = zod_1.z.object({
    getService: zod_1.z
        .object({
        __typename: zod_1.z.literal("Service"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        price_min: zod_1.z.number(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        bookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        SubCategory: zod_1.z
            .object({
            __typename: zod_1.z.literal("SubCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        servicePromotions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServicePromotionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceDiscounts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceDiscountConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAvailabilities: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userPreferences: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerCertifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceVideos: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceVideoConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceImages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceImageConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceReviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiDiagnostics: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCustomizationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAwards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAwardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        contracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTrackings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        duration: zod_1.z.string().optional().nullable(),
        Materials: zod_1.z.string().optional().nullable(),
        MaterialCosts: zod_1.z.number().optional().nullable(),
        BookingRequirements: zod_1.z.string().optional().nullable(),
        price_max: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        invoiceServicesId: zod_1.z.string().optional().nullable(),
        servicePackageServicesId: zod_1.z.string().optional().nullable(),
        subCategoryServicesId: zod_1.z.string().optional().nullable(),
        providerServicesOfferedId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listServicesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listServicesQuerySchema = zod_1.z.object({
    listServices: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncServicesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelServiceFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncServicesQuerySchema = zod_1.z.object({
    syncServices: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelServiceConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getProviderQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getProviderQuerySchema = zod_1.z.object({
    getProvider: zod_1.z
        .object({
        __typename: zod_1.z.literal("Provider"),
        id: zod_1.z.string(),
        email: zod_1.z.string(),
        password: zod_1.z.string(),
        firstName: zod_1.z.string(),
        lastName: zod_1.z.string(),
        dob: zod_1.z.string().optional().nullable(),
        gender: exports.genderSchema.optional().nullable(),
        phone: zod_1.z.string().optional().nullable(),
        address: zod_1.z.string().optional().nullable(),
        city: zod_1.z.string().optional().nullable(),
        state: zod_1.z.string().optional().nullable(),
        country: zod_1.z.string().optional().nullable(),
        zipCode: zod_1.z.string().optional().nullable(),
        profileImage: zod_1.z.string().optional().nullable(),
        isActive: zod_1.z.boolean().optional().nullable(),
        isVerified: zod_1.z.boolean().optional().nullable(),
        lastLogin: zod_1.z.string().optional().nullable(),
        accountType: exports.accountTypeSchema.optional().nullable(),
        notificationPreference: exports.notificationPreferenceSchema
            .optional()
            .nullable(),
        languagePreference: zod_1.z.string().optional().nullable(),
        currencyPreference: zod_1.z.string().optional().nullable(),
        timezone: zod_1.z.string().optional().nullable(),
        chatbotRequests: zod_1.z.number().optional().nullable(),
        servicesOffered: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        teamMembers: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTeamMemberConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        availability: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        certifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        qualifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelQualificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        specializations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelSpecializationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerMessages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageThreadConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerContracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerTips: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTipConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReferrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAvailability: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerCertification: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAwards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAwardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTracking: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        currentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
        providerCurrentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listProvidersQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listProvidersQuerySchema = zod_1.z.object({
    listProviders: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncProvidersQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncProvidersQuerySchema = zod_1.z.object({
    syncProviders: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getAvailabilityQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getAvailabilityQuerySchema = zod_1.z.object({
    getAvailability: zod_1.z
        .object({
        __typename: zod_1.z.literal("Availability"),
        id: zod_1.z.string(),
        startTime: zod_1.z.string(),
        endTime: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        avalabilityDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerAvailabilityId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listAvailabilitiesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelAvailabilityFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listAvailabilitiesQuerySchema = zod_1.z.object({
    listAvailabilities: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelAvailabilityConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Availability"),
            id: zod_1.z.string(),
            startTime: zod_1.z.string(),
            endTime: zod_1.z.string(),
            avalabilityDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerAvailabilityId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncAvailabilitiesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelAvailabilityFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncAvailabilitiesQuerySchema = zod_1.z.object({
    syncAvailabilities: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelAvailabilityConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Availability"),
            id: zod_1.z.string(),
            startTime: zod_1.z.string(),
            endTime: zod_1.z.string(),
            avalabilityDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerAvailabilityId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getProviderReviewQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getProviderReviewQuerySchema = zod_1.z.object({
    getProviderReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderReview"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        userID: zod_1.z.string(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.listProviderReviewsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderReviewFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listProviderReviewsQuerySchema = zod_1.z.object({
    listProviderReviews: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderReviewConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderReview"),
            id: zod_1.z.string(),
            providerID: zod_1.z.string(),
            userID: zod_1.z.string(),
            rating: zod_1.z.number(),
            comment: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncProviderReviewsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderReviewFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncProviderReviewsQuerySchema = zod_1.z.object({
    syncProviderReviews: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderReviewConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderReview"),
            id: zod_1.z.string(),
            providerID: zod_1.z.string(),
            userID: zod_1.z.string(),
            rating: zod_1.z.number(),
            comment: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getCertificationQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getCertificationQuerySchema = zod_1.z.object({
    getCertification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Certification"),
        id: zod_1.z.string(),
        certificationName: zod_1.z.string(),
        issuedBy: zod_1.z.string().optional().nullable(),
        validFrom: zod_1.z.string().optional().nullable(),
        validUntil: zod_1.z.string().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerCertificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listCertificationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelCertificationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listCertificationsQuerySchema = zod_1.z.object({
    listCertifications: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelCertificationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Certification"),
            id: zod_1.z.string(),
            certificationName: zod_1.z.string(),
            issuedBy: zod_1.z.string().optional().nullable(),
            validFrom: zod_1.z.string().optional().nullable(),
            validUntil: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerCertificationsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncCertificationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelCertificationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncCertificationsQuerySchema = zod_1.z.object({
    syncCertifications: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelCertificationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Certification"),
            id: zod_1.z.string(),
            certificationName: zod_1.z.string(),
            issuedBy: zod_1.z.string().optional().nullable(),
            validFrom: zod_1.z.string().optional().nullable(),
            validUntil: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerCertificationsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getQualificationQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getQualificationQuerySchema = zod_1.z.object({
    getQualification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Qualification"),
        id: zod_1.z.string(),
        qualificationName: zod_1.z.string(),
        institution: zod_1.z.string().optional().nullable(),
        yearObtained: zod_1.z.number().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerQualificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listQualificationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelQualificationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listQualificationsQuerySchema = zod_1.z.object({
    listQualifications: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelQualificationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Qualification"),
            id: zod_1.z.string(),
            qualificationName: zod_1.z.string(),
            institution: zod_1.z.string().optional().nullable(),
            yearObtained: zod_1.z.number().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerQualificationsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncQualificationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelQualificationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncQualificationsQuerySchema = zod_1.z.object({
    syncQualifications: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelQualificationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Qualification"),
            id: zod_1.z.string(),
            qualificationName: zod_1.z.string(),
            institution: zod_1.z.string().optional().nullable(),
            yearObtained: zod_1.z.number().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerQualificationsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getSpecializationQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getSpecializationQuerySchema = zod_1.z.object({
    getSpecialization: zod_1.z
        .object({
        __typename: zod_1.z.literal("Specialization"),
        id: zod_1.z.string(),
        specializationName: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerSpecializationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listSpecializationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelSpecializationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listSpecializationsQuerySchema = zod_1.z.object({
    listSpecializations: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelSpecializationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Specialization"),
            id: zod_1.z.string(),
            specializationName: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerSpecializationsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncSpecializationsQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelSpecializationFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncSpecializationsQuerySchema = zod_1.z.object({
    syncSpecializations: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelSpecializationConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("Specialization"),
            id: zod_1.z.string(),
            specializationName: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerSpecializationsId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getProviderHistoryQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getProviderHistoryQuerySchema = zod_1.z.object({
    getProviderHistory: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderHistory"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        event: zod_1.z.string(),
        date: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderHistoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listProviderHistoriesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderHistoryFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listProviderHistoriesQuerySchema = zod_1.z.object({
    listProviderHistories: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderHistoryConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderHistory"),
            id: zod_1.z.string(),
            providerID: zod_1.z.string(),
            event: zod_1.z.string(),
            date: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderHistoriesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncProviderHistoriesQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelProviderHistoryFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncProviderHistoriesQuerySchema = zod_1.z.object({
    syncProviderHistories: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelProviderHistoryConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("ProviderHistory"),
            id: zod_1.z.string(),
            providerID: zod_1.z.string(),
            event: zod_1.z.string(),
            date: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderHistoriesId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.getUserQueryVariablesSchema = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.getUserQuerySchema = zod_1.z.object({
    getUser: zod_1.z
        .object({
        __typename: zod_1.z.literal("User"),
        id: zod_1.z.string(),
        email: zod_1.z.string(),
        password: zod_1.z.string(),
        firstName: zod_1.z.string(),
        lastName: zod_1.z.string(),
        dob: zod_1.z.string().optional().nullable(),
        gender: exports.genderSchema.optional().nullable(),
        phone: zod_1.z.string().optional().nullable(),
        address: zod_1.z.string().optional().nullable(),
        city: zod_1.z.string().optional().nullable(),
        state: zod_1.z.string().optional().nullable(),
        country: zod_1.z.string().optional().nullable(),
        zipCode: zod_1.z.string().optional().nullable(),
        profileImage: zod_1.z.string().optional().nullable(),
        isActive: zod_1.z.boolean().optional().nullable(),
        isVerified: zod_1.z.boolean().optional().nullable(),
        lastLogin: zod_1.z.string().optional().nullable(),
        accountType: exports.accountTypeSchema.optional().nullable(),
        notificationPreference: exports.notificationPreferenceSchema
            .optional()
            .nullable(),
        languagePreference: zod_1.z.string().optional().nullable(),
        currencyPreference: zod_1.z.string().optional().nullable(),
        timezone: zod_1.z.string().optional().nullable(),
        chatbotRequests: zod_1.z.number().optional().nullable(),
        bookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        messages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageThreadConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        wallet: zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        transactions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTransactionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        feedbacks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFeedbackConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        subscriptions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelPLMBRSubscriptionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatBots: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatBotConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatLogs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatLogConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTrackings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        loyaltyPrograms: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelLoyaltyProgramConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        rewards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelRewardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        contracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        invoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        paymentMethods: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelPaymentMethodConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        tips: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTipConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCustomizationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceReviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userPreference: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        verifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelVerificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        preferredContactTime: zod_1.z.string().optional().nullable(),
        serviceInterestedIn: zod_1.z.string().optional().nullable(),
        curentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userWalletId: zod_1.z.string().optional().nullable(),
        userCurentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.listUsersQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
});
exports.listUsersQuerySchema = zod_1.z.object({
    listUsers: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.syncUsersQueryVariablesSchema = zod_1.z.object({
    filter: exports.modelUserFilterInputSchema.optional().nullable(),
    limit: zod_1.z.number().optional().nullable(),
    nextToken: zod_1.z.string().optional().nullable(),
    lastSync: zod_1.z.number().optional().nullable(),
});
exports.syncUsersQuerySchema = zod_1.z.object({
    syncUsers: zod_1.z
        .object({
        __typename: zod_1.z.literal("ModelUserConnection"),
        items: zod_1.z.array(zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .nullable()),
        nextToken: zod_1.z.string().optional().nullable(),
        startedAt: zod_1.z.number().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateServicePromotionSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServicePromotionFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateServicePromotionSubscriptionSchema = zod_1.z.object({
    onCreateServicePromotion: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServicePromotion"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        discountPercentage: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServicePromotionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateServicePromotionSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServicePromotionFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateServicePromotionSubscriptionSchema = zod_1.z.object({
    onUpdateServicePromotion: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServicePromotion"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        discountPercentage: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServicePromotionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteServicePromotionSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServicePromotionFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteServicePromotionSubscriptionSchema = zod_1.z.object({
    onDeleteServicePromotion: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServicePromotion"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        discountPercentage: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServicePromotionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateProviderReportSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderReportFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateProviderReportSubscriptionSchema = zod_1.z.object({
    onCreateProviderReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderReport"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderReportsId: zod_1.z.string().optional().nullable(),
        providerProviderReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateProviderReportSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderReportFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateProviderReportSubscriptionSchema = zod_1.z.object({
    onUpdateProviderReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderReport"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderReportsId: zod_1.z.string().optional().nullable(),
        providerProviderReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteProviderReportSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderReportFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteProviderReportSubscriptionSchema = zod_1.z.object({
    onDeleteProviderReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderReport"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderReportsId: zod_1.z.string().optional().nullable(),
        providerProviderReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateUserReportSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserReportFilterInputSchema.optional().nullable(),
});
exports.onCreateUserReportSubscriptionSchema = zod_1.z.object({
    onCreateUserReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserReport"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserReportsId: zod_1.z.string().optional().nullable(),
        userUserReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateUserReportSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserReportFilterInputSchema.optional().nullable(),
});
exports.onUpdateUserReportSubscriptionSchema = zod_1.z.object({
    onUpdateUserReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserReport"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserReportsId: zod_1.z.string().optional().nullable(),
        userUserReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteUserReportSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserReportFilterInputSchema.optional().nullable(),
});
exports.onDeleteUserReportSubscriptionSchema = zod_1.z.object({
    onDeleteUserReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserReport"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserReportsId: zod_1.z.string().optional().nullable(),
        userUserReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateUserInvoiceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserInvoiceFilterInputSchema.optional().nullable(),
});
exports.onCreateUserInvoiceSubscriptionSchema = zod_1.z.object({
    onCreateUserInvoice: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserInvoice"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        dateIssued: zod_1.z.string(),
        dueDate: zod_1.z.string(),
        status: exports.invoiceStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserInvoicesId: zod_1.z.string().optional().nullable(),
        userUserInvoicesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateUserInvoiceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserInvoiceFilterInputSchema.optional().nullable(),
});
exports.onUpdateUserInvoiceSubscriptionSchema = zod_1.z.object({
    onUpdateUserInvoice: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserInvoice"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        dateIssued: zod_1.z.string(),
        dueDate: zod_1.z.string(),
        status: exports.invoiceStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserInvoicesId: zod_1.z.string().optional().nullable(),
        userUserInvoicesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteUserInvoiceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserInvoiceFilterInputSchema.optional().nullable(),
});
exports.onDeleteUserInvoiceSubscriptionSchema = zod_1.z.object({
    onDeleteUserInvoice: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserInvoice"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        dateIssued: zod_1.z.string(),
        dueDate: zod_1.z.string(),
        status: exports.invoiceStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserInvoicesId: zod_1.z.string().optional().nullable(),
        userUserInvoicesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateProviderBookmarkSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderBookmarkFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateProviderBookmarkSubscriptionSchema = zod_1.z.object({
    onCreateProviderBookmark: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderBookmark"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateBookmarked: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderBookmarksId: zod_1.z.string().optional().nullable(),
        providerProviderBookmarksId: zod_1.z.string().optional().nullable(),
        userProviderBookmarksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateProviderBookmarkSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderBookmarkFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateProviderBookmarkSubscriptionSchema = zod_1.z.object({
    onUpdateProviderBookmark: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderBookmark"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateBookmarked: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderBookmarksId: zod_1.z.string().optional().nullable(),
        providerProviderBookmarksId: zod_1.z.string().optional().nullable(),
        userProviderBookmarksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteProviderBookmarkSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderBookmarkFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteProviderBookmarkSubscriptionSchema = zod_1.z.object({
    onDeleteProviderBookmark: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderBookmark"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateBookmarked: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderBookmarksId: zod_1.z.string().optional().nullable(),
        providerProviderBookmarksId: zod_1.z.string().optional().nullable(),
        userProviderBookmarksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateUserBookmarkSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserBookmarkFilterInputSchema.optional().nullable(),
});
exports.onCreateUserBookmarkSubscriptionSchema = zod_1.z.object({
    onCreateUserBookmark: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserBookmark"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateBookmarked: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserBookmarksId: zod_1.z.string().optional().nullable(),
        userUserBookmarksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateUserBookmarkSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserBookmarkFilterInputSchema.optional().nullable(),
});
exports.onUpdateUserBookmarkSubscriptionSchema = zod_1.z.object({
    onUpdateUserBookmark: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserBookmark"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateBookmarked: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserBookmarksId: zod_1.z.string().optional().nullable(),
        userUserBookmarksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteUserBookmarkSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserBookmarkFilterInputSchema.optional().nullable(),
});
exports.onDeleteUserBookmarkSubscriptionSchema = zod_1.z.object({
    onDeleteUserBookmark: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserBookmark"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateBookmarked: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserBookmarksId: zod_1.z.string().optional().nullable(),
        userUserBookmarksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateProviderNotificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderNotificationFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateProviderNotificationSubscriptionSchema = zod_1.z.object({
    onCreateProviderNotification: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderNotification"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        content: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.notificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderNotificationsId: zod_1.z.string().optional().nullable(),
        providerProviderNotificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateProviderNotificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderNotificationFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateProviderNotificationSubscriptionSchema = zod_1.z.object({
    onUpdateProviderNotification: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderNotification"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        content: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.notificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderNotificationsId: zod_1.z.string().optional().nullable(),
        providerProviderNotificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteProviderNotificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderNotificationFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteProviderNotificationSubscriptionSchema = zod_1.z.object({
    onDeleteProviderNotification: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderNotification"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        content: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.notificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderNotificationsId: zod_1.z.string().optional().nullable(),
        providerProviderNotificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateUserNotificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserNotificationFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateUserNotificationSubscriptionSchema = zod_1.z.object({
    onCreateUserNotification: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserNotification"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        content: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.notificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserNotificationsId: zod_1.z.string().optional().nullable(),
        userUserNotificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateUserNotificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserNotificationFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateUserNotificationSubscriptionSchema = zod_1.z.object({
    onUpdateUserNotification: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserNotification"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        content: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.notificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserNotificationsId: zod_1.z.string().optional().nullable(),
        userUserNotificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteUserNotificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserNotificationFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteUserNotificationSubscriptionSchema = zod_1.z.object({
    onDeleteUserNotification: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserNotification"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        content: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.notificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserNotificationsId: zod_1.z.string().optional().nullable(),
        userUserNotificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateServiceDiscountSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceDiscountFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateServiceDiscountSubscriptionSchema = zod_1.z.object({
    onCreateServiceDiscount: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceDiscount"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        discountPercentage: zod_1.z.number(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceDiscountsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateServiceDiscountSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceDiscountFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateServiceDiscountSubscriptionSchema = zod_1.z.object({
    onUpdateServiceDiscount: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceDiscount"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        discountPercentage: zod_1.z.number(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceDiscountsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteServiceDiscountSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceDiscountFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteServiceDiscountSubscriptionSchema = zod_1.z.object({
    onDeleteServiceDiscount: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceDiscount"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        discountPercentage: zod_1.z.number(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceDiscountsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateProviderAvailabilitySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderAvailabilityFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateProviderAvailabilitySubscriptionSchema = zod_1.z.object({
    onCreateProviderAvailability: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderAvailability"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        isScheduled: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderAvailabilitiesId: zod_1.z.string().optional().nullable(),
        providerProviderAvailabilityId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateProviderAvailabilitySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderAvailabilityFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateProviderAvailabilitySubscriptionSchema = zod_1.z.object({
    onUpdateProviderAvailability: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderAvailability"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        isScheduled: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderAvailabilitiesId: zod_1.z.string().optional().nullable(),
        providerProviderAvailabilityId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteProviderAvailabilitySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderAvailabilityFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteProviderAvailabilitySubscriptionSchema = zod_1.z.object({
    onDeleteProviderAvailability: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderAvailability"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        isScheduled: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderAvailabilitiesId: zod_1.z.string().optional().nullable(),
        providerProviderAvailabilityId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateUserPreferenceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserPreferenceFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateUserPreferenceSubscriptionSchema = zod_1.z.object({
    onCreateUserPreference: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserPreference"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        preferenceType: zod_1.z.string(),
        preferenceValue: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserPreferencesId: zod_1.z.string().optional().nullable(),
        userUserPreferenceId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateUserPreferenceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserPreferenceFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateUserPreferenceSubscriptionSchema = zod_1.z.object({
    onUpdateUserPreference: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserPreference"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        preferenceType: zod_1.z.string(),
        preferenceValue: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserPreferencesId: zod_1.z.string().optional().nullable(),
        userUserPreferenceId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteUserPreferenceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserPreferenceFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteUserPreferenceSubscriptionSchema = zod_1.z.object({
    onDeleteUserPreference: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserPreference"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        preferenceType: zod_1.z.string(),
        preferenceValue: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserPreferencesId: zod_1.z.string().optional().nullable(),
        userUserPreferenceId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateProviderCertificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderCertificationFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateProviderCertificationSubscriptionSchema = zod_1.z.object({
    onCreateProviderCertification: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderCertification"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        certificationName: zod_1.z.string(),
        issuedBy: zod_1.z.string(),
        validFrom: zod_1.z.string(),
        validUntil: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderCertificationsId: zod_1.z.string().optional().nullable(),
        providerProviderCertificationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateProviderCertificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderCertificationFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateProviderCertificationSubscriptionSchema = zod_1.z.object({
    onUpdateProviderCertification: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderCertification"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        certificationName: zod_1.z.string(),
        issuedBy: zod_1.z.string(),
        validFrom: zod_1.z.string(),
        validUntil: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderCertificationsId: zod_1.z.string().optional().nullable(),
        providerProviderCertificationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteProviderCertificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderCertificationFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteProviderCertificationSubscriptionSchema = zod_1.z.object({
    onDeleteProviderCertification: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderCertification"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        certificationName: zod_1.z.string(),
        issuedBy: zod_1.z.string(),
        validFrom: zod_1.z.string(),
        validUntil: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderCertificationsId: zod_1.z.string().optional().nullable(),
        providerProviderCertificationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateServiceVideoSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceVideoFilterInputSchema.optional().nullable(),
});
exports.onCreateServiceVideoSubscriptionSchema = zod_1.z.object({
    onCreateServiceVideo: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceVideo"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        videoURL: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceVideosId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateServiceVideoSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceVideoFilterInputSchema.optional().nullable(),
});
exports.onUpdateServiceVideoSubscriptionSchema = zod_1.z.object({
    onUpdateServiceVideo: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceVideo"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        videoURL: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceVideosId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteServiceVideoSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceVideoFilterInputSchema.optional().nullable(),
});
exports.onDeleteServiceVideoSubscriptionSchema = zod_1.z.object({
    onDeleteServiceVideo: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceVideo"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        videoURL: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceVideosId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateServiceImageSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceImageFilterInputSchema.optional().nullable(),
});
exports.onCreateServiceImageSubscriptionSchema = zod_1.z.object({
    onCreateServiceImage: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceImage"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        imageURL: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceImagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateServiceImageSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceImageFilterInputSchema.optional().nullable(),
});
exports.onUpdateServiceImageSubscriptionSchema = zod_1.z.object({
    onUpdateServiceImage: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceImage"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        imageURL: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceImagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteServiceImageSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceImageFilterInputSchema.optional().nullable(),
});
exports.onDeleteServiceImageSubscriptionSchema = zod_1.z.object({
    onDeleteServiceImage: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceImage"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        imageURL: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceImagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateServiceReviewSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceReviewFilterInputSchema.optional().nullable(),
});
exports.onCreateServiceReviewSubscriptionSchema = zod_1.z.object({
    onCreateServiceReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceReview"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceReviewsId: zod_1.z.string().optional().nullable(),
        userServiceReviewsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateServiceReviewSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceReviewFilterInputSchema.optional().nullable(),
});
exports.onUpdateServiceReviewSubscriptionSchema = zod_1.z.object({
    onUpdateServiceReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceReview"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceReviewsId: zod_1.z.string().optional().nullable(),
        userServiceReviewsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteServiceReviewSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceReviewFilterInputSchema.optional().nullable(),
});
exports.onDeleteServiceReviewSubscriptionSchema = zod_1.z.object({
    onDeleteServiceReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceReview"),
        id: zod_1.z.string(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceServiceReviewsId: zod_1.z.string().optional().nullable(),
        userServiceReviewsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateAIDiagnosticsSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAIDiagnosticsFilterInputSchema.optional().nullable(),
});
exports.onCreateAIDiagnosticsSubscriptionSchema = zod_1.z.object({
    onCreateAIDiagnostics: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIDiagnostics"),
        id: zod_1.z.string(),
        aiChatBot: zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        diagnosticData: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        aIChatBotDiagnosticsId: zod_1.z.string().optional().nullable(),
        serviceAiDiagnosticsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateAIDiagnosticsSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAIDiagnosticsFilterInputSchema.optional().nullable(),
});
exports.onUpdateAIDiagnosticsSubscriptionSchema = zod_1.z.object({
    onUpdateAIDiagnostics: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIDiagnostics"),
        id: zod_1.z.string(),
        aiChatBot: zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        diagnosticData: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        aIChatBotDiagnosticsId: zod_1.z.string().optional().nullable(),
        serviceAiDiagnosticsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteAIDiagnosticsSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAIDiagnosticsFilterInputSchema.optional().nullable(),
});
exports.onDeleteAIDiagnosticsSubscriptionSchema = zod_1.z.object({
    onDeleteAIDiagnostics: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIDiagnostics"),
        id: zod_1.z.string(),
        aiChatBot: zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        diagnosticData: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        aIChatBotDiagnosticsId: zod_1.z.string().optional().nullable(),
        serviceAiDiagnosticsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateCustomizationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionCustomizationFilterInputSchema.optional().nullable(),
});
exports.onCreateCustomizationSubscriptionSchema = zod_1.z.object({
    onCreateCustomization: zod_1.z
        .object({
        __typename: zod_1.z.literal("Customization"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizationType: zod_1.z.string(),
        customizationValue: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceCustomizationsId: zod_1.z.string().optional().nullable(),
        userCustomizationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateCustomizationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionCustomizationFilterInputSchema.optional().nullable(),
});
exports.onUpdateCustomizationSubscriptionSchema = zod_1.z.object({
    onUpdateCustomization: zod_1.z
        .object({
        __typename: zod_1.z.literal("Customization"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizationType: zod_1.z.string(),
        customizationValue: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceCustomizationsId: zod_1.z.string().optional().nullable(),
        userCustomizationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteCustomizationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionCustomizationFilterInputSchema.optional().nullable(),
});
exports.onDeleteCustomizationSubscriptionSchema = zod_1.z.object({
    onDeleteCustomization: zod_1.z
        .object({
        __typename: zod_1.z.literal("Customization"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizationType: zod_1.z.string(),
        customizationValue: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceCustomizationsId: zod_1.z.string().optional().nullable(),
        userCustomizationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateExpenseSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionExpenseFilterInputSchema.optional().nullable(),
});
exports.onCreateExpenseSubscriptionSchema = zod_1.z.object({
    onCreateExpense: zod_1.z
        .object({
        __typename: zod_1.z.literal("Expense"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        description: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceExpensesId: zod_1.z.string().optional().nullable(),
        providerExpensesId: zod_1.z.string().optional().nullable(),
        userExpensesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateExpenseSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionExpenseFilterInputSchema.optional().nullable(),
});
exports.onUpdateExpenseSubscriptionSchema = zod_1.z.object({
    onUpdateExpense: zod_1.z
        .object({
        __typename: zod_1.z.literal("Expense"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        description: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceExpensesId: zod_1.z.string().optional().nullable(),
        providerExpensesId: zod_1.z.string().optional().nullable(),
        userExpensesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteExpenseSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionExpenseFilterInputSchema.optional().nullable(),
});
exports.onDeleteExpenseSubscriptionSchema = zod_1.z.object({
    onDeleteExpense: zod_1.z
        .object({
        __typename: zod_1.z.literal("Expense"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        description: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceExpensesId: zod_1.z.string().optional().nullable(),
        providerExpensesId: zod_1.z.string().optional().nullable(),
        userExpensesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateFavoriteProviderSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionFavoriteProviderFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateFavoriteProviderSubscriptionSchema = zod_1.z.object({
    onCreateFavoriteProvider: zod_1.z
        .object({
        __typename: zod_1.z.literal("FavoriteProvider"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateAdded: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        providerFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        userFavoriteProvidersId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateFavoriteProviderSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionFavoriteProviderFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateFavoriteProviderSubscriptionSchema = zod_1.z.object({
    onUpdateFavoriteProvider: zod_1.z
        .object({
        __typename: zod_1.z.literal("FavoriteProvider"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateAdded: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        providerFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        userFavoriteProvidersId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteFavoriteProviderSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionFavoriteProviderFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteFavoriteProviderSubscriptionSchema = zod_1.z.object({
    onDeleteFavoriteProvider: zod_1.z
        .object({
        __typename: zod_1.z.literal("FavoriteProvider"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateAdded: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        providerFavoriteProvidersId: zod_1.z.string().optional().nullable(),
        userFavoriteProvidersId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateUserHistorySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserHistoryFilterInputSchema.optional().nullable(),
});
exports.onCreateUserHistorySubscriptionSchema = zod_1.z.object({
    onCreateUserHistory: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserHistory"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        action: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserHistoriesId: zod_1.z.string().optional().nullable(),
        userUserHistoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateUserHistorySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserHistoryFilterInputSchema.optional().nullable(),
});
exports.onUpdateUserHistorySubscriptionSchema = zod_1.z.object({
    onUpdateUserHistory: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserHistory"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        action: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserHistoriesId: zod_1.z.string().optional().nullable(),
        userUserHistoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteUserHistorySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserHistoryFilterInputSchema.optional().nullable(),
});
exports.onDeleteUserHistorySubscriptionSchema = zod_1.z.object({
    onDeleteUserHistory: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserHistory"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        action: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceUserHistoriesId: zod_1.z.string().optional().nullable(),
        userUserHistoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateProviderAwardSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderAwardFilterInputSchema.optional().nullable(),
});
exports.onCreateProviderAwardSubscriptionSchema = zod_1.z.object({
    onCreateProviderAward: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderAward"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        awardName: zod_1.z.string(),
        awardedBy: zod_1.z.string(),
        dateAwarded: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderAwardsId: zod_1.z.string().optional().nullable(),
        providerProviderAwardsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateProviderAwardSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderAwardFilterInputSchema.optional().nullable(),
});
exports.onUpdateProviderAwardSubscriptionSchema = zod_1.z.object({
    onUpdateProviderAward: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderAward"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        awardName: zod_1.z.string(),
        awardedBy: zod_1.z.string(),
        dateAwarded: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderAwardsId: zod_1.z.string().optional().nullable(),
        providerProviderAwardsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteProviderAwardSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderAwardFilterInputSchema.optional().nullable(),
});
exports.onDeleteProviderAwardSubscriptionSchema = zod_1.z.object({
    onDeleteProviderAward: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderAward"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        awardName: zod_1.z.string(),
        awardedBy: zod_1.z.string(),
        dateAwarded: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceProviderAwardsId: zod_1.z.string().optional().nullable(),
        providerProviderAwardsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateReferralSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionReferralFilterInputSchema.optional().nullable(),
});
exports.onCreateReferralSubscriptionSchema = zod_1.z.object({
    onCreateReferral: zod_1.z
        .object({
        __typename: zod_1.z.literal("Referral"),
        id: zod_1.z.string(),
        referrer: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        referred: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateReferred: zod_1.z.string(),
        reward: zod_1.z
            .object({
            __typename: zod_1.z.literal("Reward"),
            id: zod_1.z.string(),
            rewardName: zod_1.z.string(),
            description: zod_1.z.string(),
            value: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
            userRewardsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        rewardReferralsId: zod_1.z.string().optional().nullable(),
        serviceReferralsId: zod_1.z.string().optional().nullable(),
        providerProviderReferralsId: zod_1.z.string().optional().nullable(),
        userReferralsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateReferralSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionReferralFilterInputSchema.optional().nullable(),
});
exports.onUpdateReferralSubscriptionSchema = zod_1.z.object({
    onUpdateReferral: zod_1.z
        .object({
        __typename: zod_1.z.literal("Referral"),
        id: zod_1.z.string(),
        referrer: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        referred: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateReferred: zod_1.z.string(),
        reward: zod_1.z
            .object({
            __typename: zod_1.z.literal("Reward"),
            id: zod_1.z.string(),
            rewardName: zod_1.z.string(),
            description: zod_1.z.string(),
            value: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
            userRewardsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        rewardReferralsId: zod_1.z.string().optional().nullable(),
        serviceReferralsId: zod_1.z.string().optional().nullable(),
        providerProviderReferralsId: zod_1.z.string().optional().nullable(),
        userReferralsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteReferralSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionReferralFilterInputSchema.optional().nullable(),
});
exports.onDeleteReferralSubscriptionSchema = zod_1.z.object({
    onDeleteReferral: zod_1.z
        .object({
        __typename: zod_1.z.literal("Referral"),
        id: zod_1.z.string(),
        referrer: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        referred: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        dateReferred: zod_1.z.string(),
        reward: zod_1.z
            .object({
            __typename: zod_1.z.literal("Reward"),
            id: zod_1.z.string(),
            rewardName: zod_1.z.string(),
            description: zod_1.z.string(),
            value: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
            userRewardsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        rewardReferralsId: zod_1.z.string().optional().nullable(),
        serviceReferralsId: zod_1.z.string().optional().nullable(),
        providerProviderReferralsId: zod_1.z.string().optional().nullable(),
        userReferralsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateTipSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionTipFilterInputSchema.optional().nullable(),
});
exports.onCreateTipSubscriptionSchema = zod_1.z.object({
    onCreateTip: zod_1.z
        .object({
        __typename: zod_1.z.literal("Tip"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderTipsId: zod_1.z.string().optional().nullable(),
        userTipsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateTipSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionTipFilterInputSchema.optional().nullable(),
});
exports.onUpdateTipSubscriptionSchema = zod_1.z.object({
    onUpdateTip: zod_1.z
        .object({
        __typename: zod_1.z.literal("Tip"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderTipsId: zod_1.z.string().optional().nullable(),
        userTipsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteTipSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionTipFilterInputSchema.optional().nullable(),
});
exports.onDeleteTipSubscriptionSchema = zod_1.z.object({
    onDeleteTip: zod_1.z
        .object({
        __typename: zod_1.z.literal("Tip"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderTipsId: zod_1.z.string().optional().nullable(),
        userTipsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreatePaymentMethodSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionPaymentMethodFilterInputSchema.optional().nullable(),
});
exports.onCreatePaymentMethodSubscriptionSchema = zod_1.z.object({
    onCreatePaymentMethod: zod_1.z
        .object({
        __typename: zod_1.z.literal("PaymentMethod"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        cardNumber: zod_1.z.string(),
        expiryDate: zod_1.z.string(),
        cardType: exports.cardTypeSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userPaymentMethodsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdatePaymentMethodSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionPaymentMethodFilterInputSchema.optional().nullable(),
});
exports.onUpdatePaymentMethodSubscriptionSchema = zod_1.z.object({
    onUpdatePaymentMethod: zod_1.z
        .object({
        __typename: zod_1.z.literal("PaymentMethod"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        cardNumber: zod_1.z.string(),
        expiryDate: zod_1.z.string(),
        cardType: exports.cardTypeSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userPaymentMethodsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeletePaymentMethodSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionPaymentMethodFilterInputSchema.optional().nullable(),
});
exports.onDeletePaymentMethodSubscriptionSchema = zod_1.z.object({
    onDeletePaymentMethod: zod_1.z
        .object({
        __typename: zod_1.z.literal("PaymentMethod"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        cardNumber: zod_1.z.string(),
        expiryDate: zod_1.z.string(),
        cardType: exports.cardTypeSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userPaymentMethodsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateInvoiceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionInvoiceFilterInputSchema.optional().nullable(),
});
exports.onCreateInvoiceSubscriptionSchema = zod_1.z.object({
    onCreateInvoice: zod_1.z
        .object({
        __typename: zod_1.z.literal("Invoice"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        dateIssued: zod_1.z.string(),
        dueDate: zod_1.z.string(),
        status: exports.invoiceStatusSchema.optional().nullable(),
        services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderInvoicesId: zod_1.z.string().optional().nullable(),
        userInvoicesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateInvoiceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionInvoiceFilterInputSchema.optional().nullable(),
});
exports.onUpdateInvoiceSubscriptionSchema = zod_1.z.object({
    onUpdateInvoice: zod_1.z
        .object({
        __typename: zod_1.z.literal("Invoice"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        dateIssued: zod_1.z.string(),
        dueDate: zod_1.z.string(),
        status: exports.invoiceStatusSchema.optional().nullable(),
        services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderInvoicesId: zod_1.z.string().optional().nullable(),
        userInvoicesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteInvoiceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionInvoiceFilterInputSchema.optional().nullable(),
});
exports.onDeleteInvoiceSubscriptionSchema = zod_1.z.object({
    onDeleteInvoice: zod_1.z
        .object({
        __typename: zod_1.z.literal("Invoice"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        dateIssued: zod_1.z.string(),
        dueDate: zod_1.z.string(),
        status: exports.invoiceStatusSchema.optional().nullable(),
        services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderInvoicesId: zod_1.z.string().optional().nullable(),
        userInvoicesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateContractSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionContractFilterInputSchema.optional().nullable(),
});
exports.onCreateContractSubscriptionSchema = zod_1.z.object({
    onCreateContract: zod_1.z
        .object({
        __typename: zod_1.z.literal("Contract"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        terms: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceContractsId: zod_1.z.string().optional().nullable(),
        providerProviderContractsId: zod_1.z.string().optional().nullable(),
        userContractsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateContractSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionContractFilterInputSchema.optional().nullable(),
});
exports.onUpdateContractSubscriptionSchema = zod_1.z.object({
    onUpdateContract: zod_1.z
        .object({
        __typename: zod_1.z.literal("Contract"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        terms: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceContractsId: zod_1.z.string().optional().nullable(),
        providerProviderContractsId: zod_1.z.string().optional().nullable(),
        userContractsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteContractSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionContractFilterInputSchema.optional().nullable(),
});
exports.onDeleteContractSubscriptionSchema = zod_1.z.object({
    onDeleteContract: zod_1.z
        .object({
        __typename: zod_1.z.literal("Contract"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        terms: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceContractsId: zod_1.z.string().optional().nullable(),
        providerProviderContractsId: zod_1.z.string().optional().nullable(),
        userContractsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateNicheServiceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionNicheServiceFilterInputSchema.optional().nullable(),
});
exports.onCreateNicheServiceSubscriptionSchema = zod_1.z.object({
    onCreateNicheService: zod_1.z
        .object({
        __typename: zod_1.z.literal("NicheService"),
        id: zod_1.z.string(),
        serviceName: zod_1.z.string(),
        description: zod_1.z.string(),
        providers: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateNicheServiceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionNicheServiceFilterInputSchema.optional().nullable(),
});
exports.onUpdateNicheServiceSubscriptionSchema = zod_1.z.object({
    onUpdateNicheService: zod_1.z
        .object({
        __typename: zod_1.z.literal("NicheService"),
        id: zod_1.z.string(),
        serviceName: zod_1.z.string(),
        description: zod_1.z.string(),
        providers: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteNicheServiceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionNicheServiceFilterInputSchema.optional().nullable(),
});
exports.onDeleteNicheServiceSubscriptionSchema = zod_1.z.object({
    onDeleteNicheService: zod_1.z
        .object({
        __typename: zod_1.z.literal("NicheService"),
        id: zod_1.z.string(),
        serviceName: zod_1.z.string(),
        description: zod_1.z.string(),
        providers: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreateServicePackageSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServicePackageFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateServicePackageSubscriptionSchema = zod_1.z.object({
    onCreateServicePackage: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServicePackage"),
        id: zod_1.z.string(),
        packageName: zod_1.z.string(),
        services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        discount: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateServicePackageSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServicePackageFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateServicePackageSubscriptionSchema = zod_1.z.object({
    onUpdateServicePackage: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServicePackage"),
        id: zod_1.z.string(),
        packageName: zod_1.z.string(),
        services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        discount: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteServicePackageSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServicePackageFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteServicePackageSubscriptionSchema = zod_1.z.object({
    onDeleteServicePackage: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServicePackage"),
        id: zod_1.z.string(),
        packageName: zod_1.z.string(),
        services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        discount: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreateRewardSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionRewardFilterInputSchema.optional().nullable(),
});
exports.onCreateRewardSubscriptionSchema = zod_1.z.object({
    onCreateReward: zod_1.z
        .object({
        __typename: zod_1.z.literal("Reward"),
        id: zod_1.z.string(),
        rewardName: zod_1.z.string(),
        description: zod_1.z.string(),
        value: zod_1.z.number(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
        userRewardsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateRewardSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionRewardFilterInputSchema.optional().nullable(),
});
exports.onUpdateRewardSubscriptionSchema = zod_1.z.object({
    onUpdateReward: zod_1.z
        .object({
        __typename: zod_1.z.literal("Reward"),
        id: zod_1.z.string(),
        rewardName: zod_1.z.string(),
        description: zod_1.z.string(),
        value: zod_1.z.number(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
        userRewardsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteRewardSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionRewardFilterInputSchema.optional().nullable(),
});
exports.onDeleteRewardSubscriptionSchema = zod_1.z.object({
    onDeleteReward: zod_1.z
        .object({
        __typename: zod_1.z.literal("Reward"),
        id: zod_1.z.string(),
        rewardName: zod_1.z.string(),
        description: zod_1.z.string(),
        value: zod_1.z.number(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
        userRewardsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateLoyaltyProgramSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionLoyaltyProgramFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateLoyaltyProgramSubscriptionSchema = zod_1.z.object({
    onCreateLoyaltyProgram: zod_1.z
        .object({
        __typename: zod_1.z.literal("LoyaltyProgram"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        points: zod_1.z.number(),
        rewards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelRewardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userLoyaltyProgramsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateLoyaltyProgramSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionLoyaltyProgramFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateLoyaltyProgramSubscriptionSchema = zod_1.z.object({
    onUpdateLoyaltyProgram: zod_1.z
        .object({
        __typename: zod_1.z.literal("LoyaltyProgram"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        points: zod_1.z.number(),
        rewards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelRewardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userLoyaltyProgramsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteLoyaltyProgramSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionLoyaltyProgramFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteLoyaltyProgramSubscriptionSchema = zod_1.z.object({
    onDeleteLoyaltyProgram: zod_1.z
        .object({
        __typename: zod_1.z.literal("LoyaltyProgram"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        points: zod_1.z.number(),
        rewards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelRewardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userLoyaltyProgramsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateVerificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionVerificationFilterInputSchema.optional().nullable(),
});
exports.onCreateVerificationSubscriptionSchema = zod_1.z.object({
    onCreateVerification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Verification"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        verificationCode: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.verificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userVerificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateVerificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionVerificationFilterInputSchema.optional().nullable(),
});
exports.onUpdateVerificationSubscriptionSchema = zod_1.z.object({
    onUpdateVerification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Verification"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        verificationCode: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.verificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userVerificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteVerificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionVerificationFilterInputSchema.optional().nullable(),
});
exports.onDeleteVerificationSubscriptionSchema = zod_1.z.object({
    onDeleteVerification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Verification"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        verificationCode: zod_1.z.string(),
        dateSent: zod_1.z.string(),
        status: exports.verificationStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userVerificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateAnalyticsSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAnalyticsFilterInputSchema.optional().nullable(),
});
exports.onCreateAnalyticsSubscriptionSchema = zod_1.z.object({
    onCreateAnalytics: zod_1.z
        .object({
        __typename: zod_1.z.literal("Analytics"),
        id: zod_1.z.string(),
        userCount: zod_1.z.number(),
        providerCount: zod_1.z.number(),
        serviceCount: zod_1.z.number(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateAnalyticsSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAnalyticsFilterInputSchema.optional().nullable(),
});
exports.onUpdateAnalyticsSubscriptionSchema = zod_1.z.object({
    onUpdateAnalytics: zod_1.z
        .object({
        __typename: zod_1.z.literal("Analytics"),
        id: zod_1.z.string(),
        userCount: zod_1.z.number(),
        providerCount: zod_1.z.number(),
        serviceCount: zod_1.z.number(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteAnalyticsSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAnalyticsFilterInputSchema.optional().nullable(),
});
exports.onDeleteAnalyticsSubscriptionSchema = zod_1.z.object({
    onDeleteAnalytics: zod_1.z
        .object({
        __typename: zod_1.z.literal("Analytics"),
        id: zod_1.z.string(),
        userCount: zod_1.z.number(),
        providerCount: zod_1.z.number(),
        serviceCount: zod_1.z.number(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreatePromoCodeSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionPromoCodeFilterInputSchema.optional().nullable(),
});
exports.onCreatePromoCodeSubscriptionSchema = zod_1.z.object({
    onCreatePromoCode: zod_1.z
        .object({
        __typename: zod_1.z.literal("PromoCode"),
        id: zod_1.z.string(),
        code: zod_1.z.string(),
        discount: zod_1.z.number(),
        validFrom: zod_1.z.string(),
        validUntil: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdatePromoCodeSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionPromoCodeFilterInputSchema.optional().nullable(),
});
exports.onUpdatePromoCodeSubscriptionSchema = zod_1.z.object({
    onUpdatePromoCode: zod_1.z
        .object({
        __typename: zod_1.z.literal("PromoCode"),
        id: zod_1.z.string(),
        code: zod_1.z.string(),
        discount: zod_1.z.number(),
        validFrom: zod_1.z.string(),
        validUntil: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeletePromoCodeSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionPromoCodeFilterInputSchema.optional().nullable(),
});
exports.onDeletePromoCodeSubscriptionSchema = zod_1.z.object({
    onDeletePromoCode: zod_1.z
        .object({
        __typename: zod_1.z.literal("PromoCode"),
        id: zod_1.z.string(),
        code: zod_1.z.string(),
        discount: zod_1.z.number(),
        validFrom: zod_1.z.string(),
        validUntil: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreateReportSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionReportFilterInputSchema.optional().nullable(),
});
exports.onCreateReportSubscriptionSchema = zod_1.z.object({
    onCreateReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("Report"),
        id: zod_1.z.string(),
        reporter: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        reportedEntity: zod_1.z.string(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateReportSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionReportFilterInputSchema.optional().nullable(),
});
exports.onUpdateReportSubscriptionSchema = zod_1.z.object({
    onUpdateReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("Report"),
        id: zod_1.z.string(),
        reporter: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        reportedEntity: zod_1.z.string(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteReportSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionReportFilterInputSchema.optional().nullable(),
});
exports.onDeleteReportSubscriptionSchema = zod_1.z.object({
    onDeleteReport: zod_1.z
        .object({
        __typename: zod_1.z.literal("Report"),
        id: zod_1.z.string(),
        reporter: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        reportedEntity: zod_1.z.string(),
        description: zod_1.z.string(),
        dateReported: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userReportsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateJobTrackingSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionJobTrackingFilterInputSchema.optional().nullable(),
});
exports.onCreateJobTrackingSubscriptionSchema = zod_1.z.object({
    onCreateJobTracking: zod_1.z
        .object({
        __typename: zod_1.z.literal("JobTracking"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        status: exports.jobStatusSchema.optional().nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceJobTrackingsId: zod_1.z.string().optional().nullable(),
        providerJobTrackingId: zod_1.z.string().optional().nullable(),
        userJobTrackingsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateJobTrackingSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionJobTrackingFilterInputSchema.optional().nullable(),
});
exports.onUpdateJobTrackingSubscriptionSchema = zod_1.z.object({
    onUpdateJobTracking: zod_1.z
        .object({
        __typename: zod_1.z.literal("JobTracking"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        status: exports.jobStatusSchema.optional().nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceJobTrackingsId: zod_1.z.string().optional().nullable(),
        providerJobTrackingId: zod_1.z.string().optional().nullable(),
        userJobTrackingsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteJobTrackingSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionJobTrackingFilterInputSchema.optional().nullable(),
});
exports.onDeleteJobTrackingSubscriptionSchema = zod_1.z.object({
    onDeleteJobTracking: zod_1.z
        .object({
        __typename: zod_1.z.literal("JobTracking"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        status: exports.jobStatusSchema.optional().nullable(),
        startDate: zod_1.z.string(),
        endDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceJobTrackingsId: zod_1.z.string().optional().nullable(),
        providerJobTrackingId: zod_1.z.string().optional().nullable(),
        userJobTrackingsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateAIChatLogSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAIChatLogFilterInputSchema.optional().nullable(),
});
exports.onCreateAIChatLogSubscriptionSchema = zod_1.z.object({
    onCreateAIChatLog: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIChatLog"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatBot: zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        message: zod_1.z.string(),
        response: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        aIChatBotChatLogsId: zod_1.z.string().optional().nullable(),
        userAiChatLogsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateAIChatLogSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAIChatLogFilterInputSchema.optional().nullable(),
});
exports.onUpdateAIChatLogSubscriptionSchema = zod_1.z.object({
    onUpdateAIChatLog: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIChatLog"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatBot: zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        message: zod_1.z.string(),
        response: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        aIChatBotChatLogsId: zod_1.z.string().optional().nullable(),
        userAiChatLogsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteAIChatLogSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAIChatLogFilterInputSchema.optional().nullable(),
});
exports.onDeleteAIChatLogSubscriptionSchema = zod_1.z.object({
    onDeleteAIChatLog: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIChatLog"),
        id: zod_1.z.string(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatBot: zod_1.z
            .object({
            __typename: zod_1.z.literal("AIChatBot"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            version: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userAiChatBotsId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        message: zod_1.z.string(),
        response: zod_1.z.string(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        aIChatBotChatLogsId: zod_1.z.string().optional().nullable(),
        userAiChatLogsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateAIChatBotSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAIChatBotFilterInputSchema.optional().nullable(),
});
exports.onCreateAIChatBotSubscriptionSchema = zod_1.z.object({
    onCreateAIChatBot: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIChatBot"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        version: zod_1.z.string(),
        diagnostics: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        chatLogs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatLogConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userAiChatBotsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateAIChatBotSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAIChatBotFilterInputSchema.optional().nullable(),
});
exports.onUpdateAIChatBotSubscriptionSchema = zod_1.z.object({
    onUpdateAIChatBot: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIChatBot"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        version: zod_1.z.string(),
        diagnostics: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        chatLogs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatLogConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userAiChatBotsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteAIChatBotSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAIChatBotFilterInputSchema.optional().nullable(),
});
exports.onDeleteAIChatBotSubscriptionSchema = zod_1.z.object({
    onDeleteAIChatBot: zod_1.z
        .object({
        __typename: zod_1.z.literal("AIChatBot"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        version: zod_1.z.string(),
        diagnostics: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        chatLogs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatLogConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userAiChatBotsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateMainCategorySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionMainCategoryFilterInputSchema.optional().nullable(),
});
exports.onCreateMainCategorySubscriptionSchema = zod_1.z.object({
    onCreateMainCategory: zod_1.z
        .object({
        __typename: zod_1.z.literal("MainCategory"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        descrption: zod_1.z.string().optional().nullable(),
        SubCategories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelSubCategoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateMainCategorySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionMainCategoryFilterInputSchema.optional().nullable(),
});
exports.onUpdateMainCategorySubscriptionSchema = zod_1.z.object({
    onUpdateMainCategory: zod_1.z
        .object({
        __typename: zod_1.z.literal("MainCategory"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        descrption: zod_1.z.string().optional().nullable(),
        SubCategories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelSubCategoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteMainCategorySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionMainCategoryFilterInputSchema.optional().nullable(),
});
exports.onDeleteMainCategorySubscriptionSchema = zod_1.z.object({
    onDeleteMainCategory: zod_1.z
        .object({
        __typename: zod_1.z.literal("MainCategory"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        descrption: zod_1.z.string().optional().nullable(),
        SubCategories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelSubCategoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreateSubCategorySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionSubCategoryFilterInputSchema.optional().nullable(),
});
exports.onCreateSubCategorySubscriptionSchema = zod_1.z.object({
    onCreateSubCategory: zod_1.z
        .object({
        __typename: zod_1.z.literal("SubCategory"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        MainCategory: zod_1.z
            .object({
            __typename: zod_1.z.literal("MainCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            descrption: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        Services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateSubCategorySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionSubCategoryFilterInputSchema.optional().nullable(),
});
exports.onUpdateSubCategorySubscriptionSchema = zod_1.z.object({
    onUpdateSubCategory: zod_1.z
        .object({
        __typename: zod_1.z.literal("SubCategory"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        MainCategory: zod_1.z
            .object({
            __typename: zod_1.z.literal("MainCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            descrption: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        Services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteSubCategorySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionSubCategoryFilterInputSchema.optional().nullable(),
});
exports.onDeleteSubCategorySubscriptionSchema = zod_1.z.object({
    onDeleteSubCategory: zod_1.z
        .object({
        __typename: zod_1.z.literal("SubCategory"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        MainCategory: zod_1.z
            .object({
            __typename: zod_1.z.literal("MainCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            descrption: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        Services: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreatePLMBRSubscriptionSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionPLMBRSubscriptionFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreatePLMBRSubscriptionSubscriptionSchema = zod_1.z.object({
    onCreatePLMBRSubscription: zod_1.z
        .object({
        __typename: zod_1.z.literal("PLMBRSubscription"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userSubscriptionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdatePLMBRSubscriptionSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionPLMBRSubscriptionFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdatePLMBRSubscriptionSubscriptionSchema = zod_1.z.object({
    onUpdatePLMBRSubscription: zod_1.z
        .object({
        __typename: zod_1.z.literal("PLMBRSubscription"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userSubscriptionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeletePLMBRSubscriptionSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionPLMBRSubscriptionFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeletePLMBRSubscriptionSubscriptionSchema = zod_1.z.object({
    onDeletePLMBRSubscription: zod_1.z
        .object({
        __typename: zod_1.z.literal("PLMBRSubscription"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userSubscriptionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateUserSettingsSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserSettingsFilterInputSchema.optional().nullable(),
});
exports.onCreateUserSettingsSubscriptionSchema = zod_1.z.object({
    onCreateUserSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserSettings"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateUserSettingsSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserSettingsFilterInputSchema.optional().nullable(),
});
exports.onUpdateUserSettingsSubscriptionSchema = zod_1.z.object({
    onUpdateUserSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserSettings"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteUserSettingsSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserSettingsFilterInputSchema.optional().nullable(),
});
exports.onDeleteUserSettingsSubscriptionSchema = zod_1.z.object({
    onDeleteUserSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("UserSettings"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreateProviderSettingsSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderSettingsFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateProviderSettingsSubscriptionSchema = zod_1.z.object({
    onCreateProviderSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderSettings"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateProviderSettingsSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderSettingsFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateProviderSettingsSubscriptionSchema = zod_1.z.object({
    onUpdateProviderSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderSettings"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteProviderSettingsSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderSettingsFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteProviderSettingsSubscriptionSchema = zod_1.z.object({
    onDeleteProviderSettings: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderSettings"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreatePortfolioSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionPortfolioFilterInputSchema.optional().nullable(),
});
exports.onCreatePortfolioSubscriptionSchema = zod_1.z.object({
    onCreatePortfolio: zod_1.z
        .object({
        __typename: zod_1.z.literal("Portfolio"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdatePortfolioSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionPortfolioFilterInputSchema.optional().nullable(),
});
exports.onUpdatePortfolioSubscriptionSchema = zod_1.z.object({
    onUpdatePortfolio: zod_1.z
        .object({
        __typename: zod_1.z.literal("Portfolio"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeletePortfolioSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionPortfolioFilterInputSchema.optional().nullable(),
});
exports.onDeletePortfolioSubscriptionSchema = zod_1.z.object({
    onDeletePortfolio: zod_1.z
        .object({
        __typename: zod_1.z.literal("Portfolio"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreateServiceVariantSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceVariantFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateServiceVariantSubscriptionSchema = zod_1.z.object({
    onCreateServiceVariant: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceVariant"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateServiceVariantSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceVariantFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateServiceVariantSubscriptionSchema = zod_1.z.object({
    onUpdateServiceVariant: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceVariant"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteServiceVariantSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceVariantFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteServiceVariantSubscriptionSchema = zod_1.z.object({
    onDeleteServiceVariant: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceVariant"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreateServiceHighlightSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceHighlightFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateServiceHighlightSubscriptionSchema = zod_1.z.object({
    onCreateServiceHighlight: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceHighlight"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateServiceHighlightSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceHighlightFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateServiceHighlightSubscriptionSchema = zod_1.z.object({
    onUpdateServiceHighlight: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceHighlight"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteServiceHighlightSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceHighlightFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteServiceHighlightSubscriptionSchema = zod_1.z.object({
    onDeleteServiceHighlight: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceHighlight"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreateServiceTagSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceTagFilterInputSchema.optional().nullable(),
});
exports.onCreateServiceTagSubscriptionSchema = zod_1.z.object({
    onCreateServiceTag: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceTag"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateServiceTagSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceTagFilterInputSchema.optional().nullable(),
});
exports.onUpdateServiceTagSubscriptionSchema = zod_1.z.object({
    onUpdateServiceTag: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceTag"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteServiceTagSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceTagFilterInputSchema.optional().nullable(),
});
exports.onDeleteServiceTagSubscriptionSchema = zod_1.z.object({
    onDeleteServiceTag: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceTag"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreateServiceFAQSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceFAQFilterInputSchema.optional().nullable(),
});
exports.onCreateServiceFAQSubscriptionSchema = zod_1.z.object({
    onCreateServiceFAQ: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceFAQ"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateServiceFAQSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceFAQFilterInputSchema.optional().nullable(),
});
exports.onUpdateServiceFAQSubscriptionSchema = zod_1.z.object({
    onUpdateServiceFAQ: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceFAQ"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteServiceFAQSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceFAQFilterInputSchema.optional().nullable(),
});
exports.onDeleteServiceFAQSubscriptionSchema = zod_1.z.object({
    onDeleteServiceFAQ: zod_1.z
        .object({
        __typename: zod_1.z.literal("ServiceFAQ"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreateFeedbackSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionFeedbackFilterInputSchema.optional().nullable(),
});
exports.onCreateFeedbackSubscriptionSchema = zod_1.z.object({
    onCreateFeedback: zod_1.z
        .object({
        __typename: zod_1.z.literal("Feedback"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userFeedbacksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateFeedbackSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionFeedbackFilterInputSchema.optional().nullable(),
});
exports.onUpdateFeedbackSubscriptionSchema = zod_1.z.object({
    onUpdateFeedback: zod_1.z
        .object({
        __typename: zod_1.z.literal("Feedback"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userFeedbacksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteFeedbackSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionFeedbackFilterInputSchema.optional().nullable(),
});
exports.onDeleteFeedbackSubscriptionSchema = zod_1.z.object({
    onDeleteFeedback: zod_1.z
        .object({
        __typename: zod_1.z.literal("Feedback"),
        id: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userFeedbacksId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateEquipmentSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionEquipmentFilterInputSchema.optional().nullable(),
});
exports.onCreateEquipmentSubscriptionSchema = zod_1.z.object({
    onCreateEquipment: zod_1.z
        .object({
        __typename: zod_1.z.literal("Equipment"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        category: exports.equipmentCategorySchema.optional().nullable(),
        availabilityStatus: exports.equipmentAvailabilityStatusSchema
            .optional()
            .nullable(),
        purchaseDate: zod_1.z.string().optional().nullable(),
        maintenanceDate: zod_1.z.string().optional().nullable(),
        image: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateEquipmentSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionEquipmentFilterInputSchema.optional().nullable(),
});
exports.onUpdateEquipmentSubscriptionSchema = zod_1.z.object({
    onUpdateEquipment: zod_1.z
        .object({
        __typename: zod_1.z.literal("Equipment"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        category: exports.equipmentCategorySchema.optional().nullable(),
        availabilityStatus: exports.equipmentAvailabilityStatusSchema
            .optional()
            .nullable(),
        purchaseDate: zod_1.z.string().optional().nullable(),
        maintenanceDate: zod_1.z.string().optional().nullable(),
        image: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteEquipmentSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionEquipmentFilterInputSchema.optional().nullable(),
});
exports.onDeleteEquipmentSubscriptionSchema = zod_1.z.object({
    onDeleteEquipment: zod_1.z
        .object({
        __typename: zod_1.z.literal("Equipment"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        category: exports.equipmentCategorySchema.optional().nullable(),
        availabilityStatus: exports.equipmentAvailabilityStatusSchema
            .optional()
            .nullable(),
        purchaseDate: zod_1.z.string().optional().nullable(),
        maintenanceDate: zod_1.z.string().optional().nullable(),
        image: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreateWalletSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionWalletFilterInputSchema.optional().nullable(),
});
exports.onCreateWalletSubscriptionSchema = zod_1.z.object({
    onCreateWallet: zod_1.z
        .object({
        __typename: zod_1.z.literal("Wallet"),
        id: zod_1.z.string(),
        ownerID: zod_1.z.string(),
        balance: zod_1.z.number(),
        currency: zod_1.z.string(),
        transactions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTransactionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        lastUpdated: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateWalletSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionWalletFilterInputSchema.optional().nullable(),
});
exports.onUpdateWalletSubscriptionSchema = zod_1.z.object({
    onUpdateWallet: zod_1.z
        .object({
        __typename: zod_1.z.literal("Wallet"),
        id: zod_1.z.string(),
        ownerID: zod_1.z.string(),
        balance: zod_1.z.number(),
        currency: zod_1.z.string(),
        transactions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTransactionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        lastUpdated: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteWalletSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionWalletFilterInputSchema.optional().nullable(),
});
exports.onDeleteWalletSubscriptionSchema = zod_1.z.object({
    onDeleteWallet: zod_1.z
        .object({
        __typename: zod_1.z.literal("Wallet"),
        id: zod_1.z.string(),
        ownerID: zod_1.z.string(),
        balance: zod_1.z.number(),
        currency: zod_1.z.string(),
        transactions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTransactionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        lastUpdated: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreateTransactionSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionTransactionFilterInputSchema.optional().nullable(),
});
exports.onCreateTransactionSubscriptionSchema = zod_1.z.object({
    onCreateTransaction: zod_1.z
        .object({
        __typename: zod_1.z.literal("Transaction"),
        id: zod_1.z.string(),
        wallet: zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        type: exports.transactionTypeSchema.optional().nullable(),
        description: zod_1.z.string().optional().nullable(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        walletTransactionsId: zod_1.z.string().optional().nullable(),
        userTransactionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateTransactionSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionTransactionFilterInputSchema.optional().nullable(),
});
exports.onUpdateTransactionSubscriptionSchema = zod_1.z.object({
    onUpdateTransaction: zod_1.z
        .object({
        __typename: zod_1.z.literal("Transaction"),
        id: zod_1.z.string(),
        wallet: zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        type: exports.transactionTypeSchema.optional().nullable(),
        description: zod_1.z.string().optional().nullable(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        walletTransactionsId: zod_1.z.string().optional().nullable(),
        userTransactionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteTransactionSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionTransactionFilterInputSchema.optional().nullable(),
});
exports.onDeleteTransactionSubscriptionSchema = zod_1.z.object({
    onDeleteTransaction: zod_1.z
        .object({
        __typename: zod_1.z.literal("Transaction"),
        id: zod_1.z.string(),
        wallet: zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        amount: zod_1.z.number(),
        type: exports.transactionTypeSchema.optional().nullable(),
        description: zod_1.z.string().optional().nullable(),
        date: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        walletTransactionsId: zod_1.z.string().optional().nullable(),
        userTransactionsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateReviewSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionReviewFilterInputSchema.optional().nullable(),
});
exports.onCreateReviewSubscriptionSchema = zod_1.z.object({
    onCreateReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("Review"),
        id: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string().optional().nullable(),
        date: zod_1.z.string(),
        response: zod_1.z
            .object({
            __typename: zod_1.z.literal("ReviewResponse"),
            id: zod_1.z.string(),
            responseText: zod_1.z.string(),
            responseDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            reviewResponseReviewId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceReviewsId: zod_1.z.string().optional().nullable(),
        providerReviewsId: zod_1.z.string().optional().nullable(),
        userReviewsId: zod_1.z.string().optional().nullable(),
        reviewResponseId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateReviewSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionReviewFilterInputSchema.optional().nullable(),
});
exports.onUpdateReviewSubscriptionSchema = zod_1.z.object({
    onUpdateReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("Review"),
        id: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string().optional().nullable(),
        date: zod_1.z.string(),
        response: zod_1.z
            .object({
            __typename: zod_1.z.literal("ReviewResponse"),
            id: zod_1.z.string(),
            responseText: zod_1.z.string(),
            responseDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            reviewResponseReviewId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceReviewsId: zod_1.z.string().optional().nullable(),
        providerReviewsId: zod_1.z.string().optional().nullable(),
        userReviewsId: zod_1.z.string().optional().nullable(),
        reviewResponseId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteReviewSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionReviewFilterInputSchema.optional().nullable(),
});
exports.onDeleteReviewSubscriptionSchema = zod_1.z.object({
    onDeleteReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("Review"),
        id: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string().optional().nullable(),
        date: zod_1.z.string(),
        response: zod_1.z
            .object({
            __typename: zod_1.z.literal("ReviewResponse"),
            id: zod_1.z.string(),
            responseText: zod_1.z.string(),
            responseDate: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            reviewResponseReviewId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceReviewsId: zod_1.z.string().optional().nullable(),
        providerReviewsId: zod_1.z.string().optional().nullable(),
        userReviewsId: zod_1.z.string().optional().nullable(),
        reviewResponseId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateReviewResponseSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionReviewResponseFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateReviewResponseSubscriptionSchema = zod_1.z.object({
    onCreateReviewResponse: zod_1.z
        .object({
        __typename: zod_1.z.literal("ReviewResponse"),
        id: zod_1.z.string(),
        review: zod_1.z
            .object({
            __typename: zod_1.z.literal("Review"),
            id: zod_1.z.string(),
            rating: zod_1.z.number(),
            comment: zod_1.z.string().optional().nullable(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceReviewsId: zod_1.z.string().optional().nullable(),
            providerReviewsId: zod_1.z.string().optional().nullable(),
            userReviewsId: zod_1.z.string().optional().nullable(),
            reviewResponseId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        responseText: zod_1.z.string(),
        responseDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        reviewResponseReviewId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateReviewResponseSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionReviewResponseFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateReviewResponseSubscriptionSchema = zod_1.z.object({
    onUpdateReviewResponse: zod_1.z
        .object({
        __typename: zod_1.z.literal("ReviewResponse"),
        id: zod_1.z.string(),
        review: zod_1.z
            .object({
            __typename: zod_1.z.literal("Review"),
            id: zod_1.z.string(),
            rating: zod_1.z.number(),
            comment: zod_1.z.string().optional().nullable(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceReviewsId: zod_1.z.string().optional().nullable(),
            providerReviewsId: zod_1.z.string().optional().nullable(),
            userReviewsId: zod_1.z.string().optional().nullable(),
            reviewResponseId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        responseText: zod_1.z.string(),
        responseDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        reviewResponseReviewId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteReviewResponseSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionReviewResponseFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteReviewResponseSubscriptionSchema = zod_1.z.object({
    onDeleteReviewResponse: zod_1.z
        .object({
        __typename: zod_1.z.literal("ReviewResponse"),
        id: zod_1.z.string(),
        review: zod_1.z
            .object({
            __typename: zod_1.z.literal("Review"),
            id: zod_1.z.string(),
            rating: zod_1.z.number(),
            comment: zod_1.z.string().optional().nullable(),
            date: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            serviceReviewsId: zod_1.z.string().optional().nullable(),
            providerReviewsId: zod_1.z.string().optional().nullable(),
            userReviewsId: zod_1.z.string().optional().nullable(),
            reviewResponseId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        responseText: zod_1.z.string(),
        responseDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        reviewResponseReviewId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateMessageThreadSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionMessageThreadFilterInputSchema.optional().nullable(),
});
exports.onCreateMessageThreadSubscriptionSchema = zod_1.z.object({
    onCreateMessageThread: zod_1.z
        .object({
        __typename: zod_1.z.literal("MessageThread"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        messages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageContentConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        lastMessageDate: zod_1.z.string().optional().nullable(),
        lastMessageContent: zod_1.z.string().optional().nullable(),
        status: exports.messageStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderMessagesId: zod_1.z.string().optional().nullable(),
        userMessagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateMessageThreadSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionMessageThreadFilterInputSchema.optional().nullable(),
});
exports.onUpdateMessageThreadSubscriptionSchema = zod_1.z.object({
    onUpdateMessageThread: zod_1.z
        .object({
        __typename: zod_1.z.literal("MessageThread"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        messages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageContentConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        lastMessageDate: zod_1.z.string().optional().nullable(),
        lastMessageContent: zod_1.z.string().optional().nullable(),
        status: exports.messageStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderMessagesId: zod_1.z.string().optional().nullable(),
        userMessagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteMessageThreadSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionMessageThreadFilterInputSchema.optional().nullable(),
});
exports.onDeleteMessageThreadSubscriptionSchema = zod_1.z.object({
    onDeleteMessageThread: zod_1.z
        .object({
        __typename: zod_1.z.literal("MessageThread"),
        id: zod_1.z.string(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        messages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageContentConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        lastMessageDate: zod_1.z.string().optional().nullable(),
        lastMessageContent: zod_1.z.string().optional().nullable(),
        status: exports.messageStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderMessagesId: zod_1.z.string().optional().nullable(),
        userMessagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateMessageContentSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionMessageContentFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateMessageContentSubscriptionSchema = zod_1.z.object({
    onCreateMessageContent: zod_1.z
        .object({
        __typename: zod_1.z.literal("MessageContent"),
        id: zod_1.z.string(),
        thread: zod_1.z
            .object({
            __typename: zod_1.z.literal("MessageThread"),
            id: zod_1.z.string(),
            lastMessageDate: zod_1.z.string().optional().nullable(),
            lastMessageContent: zod_1.z.string().optional().nullable(),
            status: exports.messageStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderMessagesId: zod_1.z.string().optional().nullable(),
            userMessagesId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        sender: zod_1.z.string().optional().nullable(),
        content: zod_1.z.string(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        messageThreadMessagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateMessageContentSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionMessageContentFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateMessageContentSubscriptionSchema = zod_1.z.object({
    onUpdateMessageContent: zod_1.z
        .object({
        __typename: zod_1.z.literal("MessageContent"),
        id: zod_1.z.string(),
        thread: zod_1.z
            .object({
            __typename: zod_1.z.literal("MessageThread"),
            id: zod_1.z.string(),
            lastMessageDate: zod_1.z.string().optional().nullable(),
            lastMessageContent: zod_1.z.string().optional().nullable(),
            status: exports.messageStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderMessagesId: zod_1.z.string().optional().nullable(),
            userMessagesId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        sender: zod_1.z.string().optional().nullable(),
        content: zod_1.z.string(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        messageThreadMessagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteMessageContentSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionMessageContentFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteMessageContentSubscriptionSchema = zod_1.z.object({
    onDeleteMessageContent: zod_1.z
        .object({
        __typename: zod_1.z.literal("MessageContent"),
        id: zod_1.z.string(),
        thread: zod_1.z
            .object({
            __typename: zod_1.z.literal("MessageThread"),
            id: zod_1.z.string(),
            lastMessageDate: zod_1.z.string().optional().nullable(),
            lastMessageContent: zod_1.z.string().optional().nullable(),
            status: exports.messageStatusSchema.optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            providerProviderMessagesId: zod_1.z.string().optional().nullable(),
            userMessagesId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        sender: zod_1.z.string().optional().nullable(),
        content: zod_1.z.string(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        messageThreadMessagesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateBookingSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionBookingFilterInputSchema.optional().nullable(),
});
exports.onCreateBookingSubscriptionSchema = zod_1.z.object({
    onCreateBooking: zod_1.z
        .object({
        __typename: zod_1.z.literal("Booking"),
        id: zod_1.z.string(),
        date: zod_1.z.string(),
        startTime: zod_1.z.string(),
        endTime: zod_1.z.string(),
        status: exports.bookingStatusSchema.optional().nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        location: zod_1.z.string().optional().nullable(),
        notes: zod_1.z.string().optional().nullable(),
        price: zod_1.z.number(),
        isInstantBooking: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceBookingsId: zod_1.z.string().optional().nullable(),
        providerProviderBookingsId: zod_1.z.string().optional().nullable(),
        userBookingsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateBookingSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionBookingFilterInputSchema.optional().nullable(),
});
exports.onUpdateBookingSubscriptionSchema = zod_1.z.object({
    onUpdateBooking: zod_1.z
        .object({
        __typename: zod_1.z.literal("Booking"),
        id: zod_1.z.string(),
        date: zod_1.z.string(),
        startTime: zod_1.z.string(),
        endTime: zod_1.z.string(),
        status: exports.bookingStatusSchema.optional().nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        location: zod_1.z.string().optional().nullable(),
        notes: zod_1.z.string().optional().nullable(),
        price: zod_1.z.number(),
        isInstantBooking: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceBookingsId: zod_1.z.string().optional().nullable(),
        providerProviderBookingsId: zod_1.z.string().optional().nullable(),
        userBookingsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteBookingSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionBookingFilterInputSchema.optional().nullable(),
});
exports.onDeleteBookingSubscriptionSchema = zod_1.z.object({
    onDeleteBooking: zod_1.z
        .object({
        __typename: zod_1.z.literal("Booking"),
        id: zod_1.z.string(),
        date: zod_1.z.string(),
        startTime: zod_1.z.string(),
        endTime: zod_1.z.string(),
        status: exports.bookingStatusSchema.optional().nullable(),
        service: zod_1.z
            .object({
            __typename: zod_1.z.literal("Service"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            price_min: zod_1.z.number(),
            duration: zod_1.z.string().optional().nullable(),
            Materials: zod_1.z.string().optional().nullable(),
            MaterialCosts: zod_1.z.number().optional().nullable(),
            BookingRequirements: zod_1.z.string().optional().nullable(),
            price_max: zod_1.z.number(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            invoiceServicesId: zod_1.z.string().optional().nullable(),
            servicePackageServicesId: zod_1.z.string().optional().nullable(),
            subCategoryServicesId: zod_1.z.string().optional().nullable(),
            providerServicesOfferedId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        user: zod_1.z
            .object({
            __typename: zod_1.z.literal("User"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            preferredContactTime: zod_1.z.string().optional().nullable(),
            serviceInterestedIn: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            userWalletId: zod_1.z.string().optional().nullable(),
            userCurentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        location: zod_1.z.string().optional().nullable(),
        notes: zod_1.z.string().optional().nullable(),
        price: zod_1.z.number(),
        isInstantBooking: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        serviceBookingsId: zod_1.z.string().optional().nullable(),
        providerProviderBookingsId: zod_1.z.string().optional().nullable(),
        userBookingsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateTeamMemberSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionTeamMemberFilterInputSchema.optional().nullable(),
});
exports.onCreateTeamMemberSubscriptionSchema = zod_1.z.object({
    onCreateTeamMember: zod_1.z
        .object({
        __typename: zod_1.z.literal("TeamMember"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        role: zod_1.z.string().optional().nullable(),
        currentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        jobSiteDuration: zod_1.z.string().optional().nullable(),
        communicationLog: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        assignedJobs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerID: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerTeamMembersId: zod_1.z.string().optional().nullable(),
        teamMemberCurrentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateTeamMemberSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionTeamMemberFilterInputSchema.optional().nullable(),
});
exports.onUpdateTeamMemberSubscriptionSchema = zod_1.z.object({
    onUpdateTeamMember: zod_1.z
        .object({
        __typename: zod_1.z.literal("TeamMember"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        role: zod_1.z.string().optional().nullable(),
        currentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        jobSiteDuration: zod_1.z.string().optional().nullable(),
        communicationLog: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        assignedJobs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerID: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerTeamMembersId: zod_1.z.string().optional().nullable(),
        teamMemberCurrentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteTeamMemberSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionTeamMemberFilterInputSchema.optional().nullable(),
});
exports.onDeleteTeamMemberSubscriptionSchema = zod_1.z.object({
    onDeleteTeamMember: zod_1.z
        .object({
        __typename: zod_1.z.literal("TeamMember"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        role: zod_1.z.string().optional().nullable(),
        currentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        jobSiteDuration: zod_1.z.string().optional().nullable(),
        communicationLog: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        assignedJobs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerID: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerTeamMembersId: zod_1.z.string().optional().nullable(),
        teamMemberCurrentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateLocationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionLocationFilterInputSchema.optional().nullable(),
});
exports.onCreateLocationSubscriptionSchema = zod_1.z.object({
    onCreateLocation: zod_1.z
        .object({
        __typename: zod_1.z.literal("Location"),
        id: zod_1.z.string(),
        latitude: zod_1.z.number(),
        longitude: zod_1.z.number(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateLocationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionLocationFilterInputSchema.optional().nullable(),
});
exports.onUpdateLocationSubscriptionSchema = zod_1.z.object({
    onUpdateLocation: zod_1.z
        .object({
        __typename: zod_1.z.literal("Location"),
        id: zod_1.z.string(),
        latitude: zod_1.z.number(),
        longitude: zod_1.z.number(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteLocationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionLocationFilterInputSchema.optional().nullable(),
});
exports.onDeleteLocationSubscriptionSchema = zod_1.z.object({
    onDeleteLocation: zod_1.z
        .object({
        __typename: zod_1.z.literal("Location"),
        id: zod_1.z.string(),
        latitude: zod_1.z.number(),
        longitude: zod_1.z.number(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreateMessageSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionMessageFilterInputSchema.optional().nullable(),
});
exports.onCreateMessageSubscriptionSchema = zod_1.z.object({
    onCreateMessage: zod_1.z
        .object({
        __typename: zod_1.z.literal("Message"),
        id: zod_1.z.string(),
        sender: zod_1.z.string(),
        content: zod_1.z.string(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        teamMemberCommunicationLogId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateMessageSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionMessageFilterInputSchema.optional().nullable(),
});
exports.onUpdateMessageSubscriptionSchema = zod_1.z.object({
    onUpdateMessage: zod_1.z
        .object({
        __typename: zod_1.z.literal("Message"),
        id: zod_1.z.string(),
        sender: zod_1.z.string(),
        content: zod_1.z.string(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        teamMemberCommunicationLogId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteMessageSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionMessageFilterInputSchema.optional().nullable(),
});
exports.onDeleteMessageSubscriptionSchema = zod_1.z.object({
    onDeleteMessage: zod_1.z
        .object({
        __typename: zod_1.z.literal("Message"),
        id: zod_1.z.string(),
        sender: zod_1.z.string(),
        content: zod_1.z.string(),
        timestamp: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        teamMemberCommunicationLogId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateJobSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionJobFilterInputSchema.optional().nullable(),
});
exports.onCreateJobSubscriptionSchema = zod_1.z.object({
    onCreateJob: zod_1.z
        .object({
        __typename: zod_1.z.literal("Job"),
        id: zod_1.z.string(),
        description: zod_1.z.string(),
        location: zod_1.z.string(),
        startTime: zod_1.z.string().optional().nullable(),
        endTime: zod_1.z.string().optional().nullable(),
        status: exports.jobStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        teamMemberAssignedJobsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateJobSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionJobFilterInputSchema.optional().nullable(),
});
exports.onUpdateJobSubscriptionSchema = zod_1.z.object({
    onUpdateJob: zod_1.z
        .object({
        __typename: zod_1.z.literal("Job"),
        id: zod_1.z.string(),
        description: zod_1.z.string(),
        location: zod_1.z.string(),
        startTime: zod_1.z.string().optional().nullable(),
        endTime: zod_1.z.string().optional().nullable(),
        status: exports.jobStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        teamMemberAssignedJobsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteJobSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionJobFilterInputSchema.optional().nullable(),
});
exports.onDeleteJobSubscriptionSchema = zod_1.z.object({
    onDeleteJob: zod_1.z
        .object({
        __typename: zod_1.z.literal("Job"),
        id: zod_1.z.string(),
        description: zod_1.z.string(),
        location: zod_1.z.string(),
        startTime: zod_1.z.string().optional().nullable(),
        endTime: zod_1.z.string().optional().nullable(),
        status: exports.jobStatusSchema.optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        teamMemberAssignedJobsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateServiceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceFilterInputSchema.optional().nullable(),
});
exports.onCreateServiceSubscriptionSchema = zod_1.z.object({
    onCreateService: zod_1.z
        .object({
        __typename: zod_1.z.literal("Service"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        price_min: zod_1.z.number(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        bookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        SubCategory: zod_1.z
            .object({
            __typename: zod_1.z.literal("SubCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        servicePromotions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServicePromotionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceDiscounts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceDiscountConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAvailabilities: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userPreferences: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerCertifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceVideos: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceVideoConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceImages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceImageConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceReviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiDiagnostics: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCustomizationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAwards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAwardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        contracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTrackings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        duration: zod_1.z.string().optional().nullable(),
        Materials: zod_1.z.string().optional().nullable(),
        MaterialCosts: zod_1.z.number().optional().nullable(),
        BookingRequirements: zod_1.z.string().optional().nullable(),
        price_max: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        invoiceServicesId: zod_1.z.string().optional().nullable(),
        servicePackageServicesId: zod_1.z.string().optional().nullable(),
        subCategoryServicesId: zod_1.z.string().optional().nullable(),
        providerServicesOfferedId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateServiceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceFilterInputSchema.optional().nullable(),
});
exports.onUpdateServiceSubscriptionSchema = zod_1.z.object({
    onUpdateService: zod_1.z
        .object({
        __typename: zod_1.z.literal("Service"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        price_min: zod_1.z.number(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        bookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        SubCategory: zod_1.z
            .object({
            __typename: zod_1.z.literal("SubCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        servicePromotions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServicePromotionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceDiscounts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceDiscountConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAvailabilities: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userPreferences: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerCertifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceVideos: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceVideoConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceImages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceImageConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceReviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiDiagnostics: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCustomizationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAwards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAwardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        contracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTrackings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        duration: zod_1.z.string().optional().nullable(),
        Materials: zod_1.z.string().optional().nullable(),
        MaterialCosts: zod_1.z.number().optional().nullable(),
        BookingRequirements: zod_1.z.string().optional().nullable(),
        price_max: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        invoiceServicesId: zod_1.z.string().optional().nullable(),
        servicePackageServicesId: zod_1.z.string().optional().nullable(),
        subCategoryServicesId: zod_1.z.string().optional().nullable(),
        providerServicesOfferedId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteServiceSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionServiceFilterInputSchema.optional().nullable(),
});
exports.onDeleteServiceSubscriptionSchema = zod_1.z.object({
    onDeleteService: zod_1.z
        .object({
        __typename: zod_1.z.literal("Service"),
        id: zod_1.z.string(),
        name: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        price_min: zod_1.z.number(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        bookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        SubCategory: zod_1.z
            .object({
            __typename: zod_1.z.literal("SubCategory"),
            id: zod_1.z.string(),
            name: zod_1.z.string(),
            description: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        servicePromotions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServicePromotionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceDiscounts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceDiscountConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAvailabilities: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userPreferences: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerCertifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceVideos: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceVideoConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceImages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceImageConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceReviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiDiagnostics: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCustomizationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAwards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAwardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        contracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTrackings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        duration: zod_1.z.string().optional().nullable(),
        Materials: zod_1.z.string().optional().nullable(),
        MaterialCosts: zod_1.z.number().optional().nullable(),
        BookingRequirements: zod_1.z.string().optional().nullable(),
        price_max: zod_1.z.number(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        invoiceServicesId: zod_1.z.string().optional().nullable(),
        servicePackageServicesId: zod_1.z.string().optional().nullable(),
        subCategoryServicesId: zod_1.z.string().optional().nullable(),
        providerServicesOfferedId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateProviderSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderFilterInputSchema.optional().nullable(),
});
exports.onCreateProviderSubscriptionSchema = zod_1.z.object({
    onCreateProvider: zod_1.z
        .object({
        __typename: zod_1.z.literal("Provider"),
        id: zod_1.z.string(),
        email: zod_1.z.string(),
        password: zod_1.z.string(),
        firstName: zod_1.z.string(),
        lastName: zod_1.z.string(),
        dob: zod_1.z.string().optional().nullable(),
        gender: exports.genderSchema.optional().nullable(),
        phone: zod_1.z.string().optional().nullable(),
        address: zod_1.z.string().optional().nullable(),
        city: zod_1.z.string().optional().nullable(),
        state: zod_1.z.string().optional().nullable(),
        country: zod_1.z.string().optional().nullable(),
        zipCode: zod_1.z.string().optional().nullable(),
        profileImage: zod_1.z.string().optional().nullable(),
        isActive: zod_1.z.boolean().optional().nullable(),
        isVerified: zod_1.z.boolean().optional().nullable(),
        lastLogin: zod_1.z.string().optional().nullable(),
        accountType: exports.accountTypeSchema.optional().nullable(),
        notificationPreference: exports.notificationPreferenceSchema
            .optional()
            .nullable(),
        languagePreference: zod_1.z.string().optional().nullable(),
        currencyPreference: zod_1.z.string().optional().nullable(),
        timezone: zod_1.z.string().optional().nullable(),
        chatbotRequests: zod_1.z.number().optional().nullable(),
        servicesOffered: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        teamMembers: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTeamMemberConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        availability: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        certifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        qualifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelQualificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        specializations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelSpecializationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerMessages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageThreadConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerContracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerTips: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTipConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReferrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAvailability: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerCertification: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAwards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAwardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTracking: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        currentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
        providerCurrentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateProviderSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderFilterInputSchema.optional().nullable(),
});
exports.onUpdateProviderSubscriptionSchema = zod_1.z.object({
    onUpdateProvider: zod_1.z
        .object({
        __typename: zod_1.z.literal("Provider"),
        id: zod_1.z.string(),
        email: zod_1.z.string(),
        password: zod_1.z.string(),
        firstName: zod_1.z.string(),
        lastName: zod_1.z.string(),
        dob: zod_1.z.string().optional().nullable(),
        gender: exports.genderSchema.optional().nullable(),
        phone: zod_1.z.string().optional().nullable(),
        address: zod_1.z.string().optional().nullable(),
        city: zod_1.z.string().optional().nullable(),
        state: zod_1.z.string().optional().nullable(),
        country: zod_1.z.string().optional().nullable(),
        zipCode: zod_1.z.string().optional().nullable(),
        profileImage: zod_1.z.string().optional().nullable(),
        isActive: zod_1.z.boolean().optional().nullable(),
        isVerified: zod_1.z.boolean().optional().nullable(),
        lastLogin: zod_1.z.string().optional().nullable(),
        accountType: exports.accountTypeSchema.optional().nullable(),
        notificationPreference: exports.notificationPreferenceSchema
            .optional()
            .nullable(),
        languagePreference: zod_1.z.string().optional().nullable(),
        currencyPreference: zod_1.z.string().optional().nullable(),
        timezone: zod_1.z.string().optional().nullable(),
        chatbotRequests: zod_1.z.number().optional().nullable(),
        servicesOffered: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        teamMembers: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTeamMemberConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        availability: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        certifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        qualifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelQualificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        specializations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelSpecializationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerMessages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageThreadConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerContracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerTips: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTipConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReferrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAvailability: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerCertification: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAwards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAwardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTracking: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        currentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
        providerCurrentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteProviderSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderFilterInputSchema.optional().nullable(),
});
exports.onDeleteProviderSubscriptionSchema = zod_1.z.object({
    onDeleteProvider: zod_1.z
        .object({
        __typename: zod_1.z.literal("Provider"),
        id: zod_1.z.string(),
        email: zod_1.z.string(),
        password: zod_1.z.string(),
        firstName: zod_1.z.string(),
        lastName: zod_1.z.string(),
        dob: zod_1.z.string().optional().nullable(),
        gender: exports.genderSchema.optional().nullable(),
        phone: zod_1.z.string().optional().nullable(),
        address: zod_1.z.string().optional().nullable(),
        city: zod_1.z.string().optional().nullable(),
        state: zod_1.z.string().optional().nullable(),
        country: zod_1.z.string().optional().nullable(),
        zipCode: zod_1.z.string().optional().nullable(),
        profileImage: zod_1.z.string().optional().nullable(),
        isActive: zod_1.z.boolean().optional().nullable(),
        isVerified: zod_1.z.boolean().optional().nullable(),
        lastLogin: zod_1.z.string().optional().nullable(),
        accountType: exports.accountTypeSchema.optional().nullable(),
        notificationPreference: exports.notificationPreferenceSchema
            .optional()
            .nullable(),
        languagePreference: zod_1.z.string().optional().nullable(),
        currencyPreference: zod_1.z.string().optional().nullable(),
        timezone: zod_1.z.string().optional().nullable(),
        chatbotRequests: zod_1.z.number().optional().nullable(),
        servicesOffered: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        teamMembers: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTeamMemberConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        availability: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        certifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        qualifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelQualificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        specializations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelSpecializationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerMessages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageThreadConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerContracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerTips: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTipConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReferrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAvailability: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerCertification: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerAwards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderAwardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTracking: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        currentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
        providerCurrentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateAvailabilitySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAvailabilityFilterInputSchema.optional().nullable(),
});
exports.onCreateAvailabilitySubscriptionSchema = zod_1.z.object({
    onCreateAvailability: zod_1.z
        .object({
        __typename: zod_1.z.literal("Availability"),
        id: zod_1.z.string(),
        startTime: zod_1.z.string(),
        endTime: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        avalabilityDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerAvailabilityId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateAvailabilitySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAvailabilityFilterInputSchema.optional().nullable(),
});
exports.onUpdateAvailabilitySubscriptionSchema = zod_1.z.object({
    onUpdateAvailability: zod_1.z
        .object({
        __typename: zod_1.z.literal("Availability"),
        id: zod_1.z.string(),
        startTime: zod_1.z.string(),
        endTime: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        avalabilityDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerAvailabilityId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteAvailabilitySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionAvailabilityFilterInputSchema.optional().nullable(),
});
exports.onDeleteAvailabilitySubscriptionSchema = zod_1.z.object({
    onDeleteAvailability: zod_1.z
        .object({
        __typename: zod_1.z.literal("Availability"),
        id: zod_1.z.string(),
        startTime: zod_1.z.string(),
        endTime: zod_1.z.string(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        avalabilityDate: zod_1.z.string(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerAvailabilityId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateProviderReviewSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderReviewFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateProviderReviewSubscriptionSchema = zod_1.z.object({
    onCreateProviderReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderReview"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        userID: zod_1.z.string(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateProviderReviewSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderReviewFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateProviderReviewSubscriptionSchema = zod_1.z.object({
    onUpdateProviderReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderReview"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        userID: zod_1.z.string(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteProviderReviewSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderReviewFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteProviderReviewSubscriptionSchema = zod_1.z.object({
    onDeleteProviderReview: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderReview"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        userID: zod_1.z.string(),
        rating: zod_1.z.number(),
        comment: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
    })
        .optional()
        .nullable(),
});
exports.onCreateCertificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionCertificationFilterInputSchema.optional().nullable(),
});
exports.onCreateCertificationSubscriptionSchema = zod_1.z.object({
    onCreateCertification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Certification"),
        id: zod_1.z.string(),
        certificationName: zod_1.z.string(),
        issuedBy: zod_1.z.string().optional().nullable(),
        validFrom: zod_1.z.string().optional().nullable(),
        validUntil: zod_1.z.string().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerCertificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateCertificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionCertificationFilterInputSchema.optional().nullable(),
});
exports.onUpdateCertificationSubscriptionSchema = zod_1.z.object({
    onUpdateCertification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Certification"),
        id: zod_1.z.string(),
        certificationName: zod_1.z.string(),
        issuedBy: zod_1.z.string().optional().nullable(),
        validFrom: zod_1.z.string().optional().nullable(),
        validUntil: zod_1.z.string().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerCertificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteCertificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionCertificationFilterInputSchema.optional().nullable(),
});
exports.onDeleteCertificationSubscriptionSchema = zod_1.z.object({
    onDeleteCertification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Certification"),
        id: zod_1.z.string(),
        certificationName: zod_1.z.string(),
        issuedBy: zod_1.z.string().optional().nullable(),
        validFrom: zod_1.z.string().optional().nullable(),
        validUntil: zod_1.z.string().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerCertificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateQualificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionQualificationFilterInputSchema.optional().nullable(),
});
exports.onCreateQualificationSubscriptionSchema = zod_1.z.object({
    onCreateQualification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Qualification"),
        id: zod_1.z.string(),
        qualificationName: zod_1.z.string(),
        institution: zod_1.z.string().optional().nullable(),
        yearObtained: zod_1.z.number().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerQualificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateQualificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionQualificationFilterInputSchema.optional().nullable(),
});
exports.onUpdateQualificationSubscriptionSchema = zod_1.z.object({
    onUpdateQualification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Qualification"),
        id: zod_1.z.string(),
        qualificationName: zod_1.z.string(),
        institution: zod_1.z.string().optional().nullable(),
        yearObtained: zod_1.z.number().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerQualificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteQualificationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionQualificationFilterInputSchema.optional().nullable(),
});
exports.onDeleteQualificationSubscriptionSchema = zod_1.z.object({
    onDeleteQualification: zod_1.z
        .object({
        __typename: zod_1.z.literal("Qualification"),
        id: zod_1.z.string(),
        qualificationName: zod_1.z.string(),
        institution: zod_1.z.string().optional().nullable(),
        yearObtained: zod_1.z.number().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerQualificationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateSpecializationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionSpecializationFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateSpecializationSubscriptionSchema = zod_1.z.object({
    onCreateSpecialization: zod_1.z
        .object({
        __typename: zod_1.z.literal("Specialization"),
        id: zod_1.z.string(),
        specializationName: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerSpecializationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateSpecializationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionSpecializationFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateSpecializationSubscriptionSchema = zod_1.z.object({
    onUpdateSpecialization: zod_1.z
        .object({
        __typename: zod_1.z.literal("Specialization"),
        id: zod_1.z.string(),
        specializationName: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerSpecializationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteSpecializationSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionSpecializationFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteSpecializationSubscriptionSchema = zod_1.z.object({
    onDeleteSpecialization: zod_1.z
        .object({
        __typename: zod_1.z.literal("Specialization"),
        id: zod_1.z.string(),
        specializationName: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        Provider: zod_1.z
            .object({
            __typename: zod_1.z.literal("Provider"),
            id: zod_1.z.string(),
            email: zod_1.z.string(),
            password: zod_1.z.string(),
            firstName: zod_1.z.string(),
            lastName: zod_1.z.string(),
            dob: zod_1.z.string().optional().nullable(),
            gender: exports.genderSchema.optional().nullable(),
            phone: zod_1.z.string().optional().nullable(),
            address: zod_1.z.string().optional().nullable(),
            city: zod_1.z.string().optional().nullable(),
            state: zod_1.z.string().optional().nullable(),
            country: zod_1.z.string().optional().nullable(),
            zipCode: zod_1.z.string().optional().nullable(),
            profileImage: zod_1.z.string().optional().nullable(),
            isActive: zod_1.z.boolean().optional().nullable(),
            isVerified: zod_1.z.boolean().optional().nullable(),
            lastLogin: zod_1.z.string().optional().nullable(),
            accountType: exports.accountTypeSchema.optional().nullable(),
            notificationPreference: exports.notificationPreferenceSchema
                .optional()
                .nullable(),
            languagePreference: zod_1.z.string().optional().nullable(),
            currencyPreference: zod_1.z.string().optional().nullable(),
            timezone: zod_1.z.string().optional().nullable(),
            chatbotRequests: zod_1.z.number().optional().nullable(),
            isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
            nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
            providerCurrentLocationId: zod_1.z.string().optional().nullable(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerSpecializationsId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateProviderHistorySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderHistoryFilterInputSchema
        .optional()
        .nullable(),
});
exports.onCreateProviderHistorySubscriptionSchema = zod_1.z.object({
    onCreateProviderHistory: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderHistory"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        event: zod_1.z.string(),
        date: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderHistoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateProviderHistorySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderHistoryFilterInputSchema
        .optional()
        .nullable(),
});
exports.onUpdateProviderHistorySubscriptionSchema = zod_1.z.object({
    onUpdateProviderHistory: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderHistory"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        event: zod_1.z.string(),
        date: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderHistoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteProviderHistorySubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionProviderHistoryFilterInputSchema
        .optional()
        .nullable(),
});
exports.onDeleteProviderHistorySubscriptionSchema = zod_1.z.object({
    onDeleteProviderHistory: zod_1.z
        .object({
        __typename: zod_1.z.literal("ProviderHistory"),
        id: zod_1.z.string(),
        providerID: zod_1.z.string(),
        event: zod_1.z.string(),
        date: zod_1.z.string(),
        description: zod_1.z.string().optional().nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        providerProviderHistoriesId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onCreateUserSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserFilterInputSchema.optional().nullable(),
});
exports.onCreateUserSubscriptionSchema = zod_1.z.object({
    onCreateUser: zod_1.z
        .object({
        __typename: zod_1.z.literal("User"),
        id: zod_1.z.string(),
        email: zod_1.z.string(),
        password: zod_1.z.string(),
        firstName: zod_1.z.string(),
        lastName: zod_1.z.string(),
        dob: zod_1.z.string().optional().nullable(),
        gender: exports.genderSchema.optional().nullable(),
        phone: zod_1.z.string().optional().nullable(),
        address: zod_1.z.string().optional().nullable(),
        city: zod_1.z.string().optional().nullable(),
        state: zod_1.z.string().optional().nullable(),
        country: zod_1.z.string().optional().nullable(),
        zipCode: zod_1.z.string().optional().nullable(),
        profileImage: zod_1.z.string().optional().nullable(),
        isActive: zod_1.z.boolean().optional().nullable(),
        isVerified: zod_1.z.boolean().optional().nullable(),
        lastLogin: zod_1.z.string().optional().nullable(),
        accountType: exports.accountTypeSchema.optional().nullable(),
        notificationPreference: exports.notificationPreferenceSchema
            .optional()
            .nullable(),
        languagePreference: zod_1.z.string().optional().nullable(),
        currencyPreference: zod_1.z.string().optional().nullable(),
        timezone: zod_1.z.string().optional().nullable(),
        chatbotRequests: zod_1.z.number().optional().nullable(),
        bookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        messages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageThreadConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        wallet: zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        transactions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTransactionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        feedbacks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFeedbackConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        subscriptions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelPLMBRSubscriptionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatBots: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatBotConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatLogs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatLogConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTrackings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        loyaltyPrograms: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelLoyaltyProgramConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        rewards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelRewardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        contracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        invoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        paymentMethods: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelPaymentMethodConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        tips: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTipConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCustomizationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceReviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userPreference: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        verifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelVerificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        preferredContactTime: zod_1.z.string().optional().nullable(),
        serviceInterestedIn: zod_1.z.string().optional().nullable(),
        curentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userWalletId: zod_1.z.string().optional().nullable(),
        userCurentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onUpdateUserSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserFilterInputSchema.optional().nullable(),
});
exports.onUpdateUserSubscriptionSchema = zod_1.z.object({
    onUpdateUser: zod_1.z
        .object({
        __typename: zod_1.z.literal("User"),
        id: zod_1.z.string(),
        email: zod_1.z.string(),
        password: zod_1.z.string(),
        firstName: zod_1.z.string(),
        lastName: zod_1.z.string(),
        dob: zod_1.z.string().optional().nullable(),
        gender: exports.genderSchema.optional().nullable(),
        phone: zod_1.z.string().optional().nullable(),
        address: zod_1.z.string().optional().nullable(),
        city: zod_1.z.string().optional().nullable(),
        state: zod_1.z.string().optional().nullable(),
        country: zod_1.z.string().optional().nullable(),
        zipCode: zod_1.z.string().optional().nullable(),
        profileImage: zod_1.z.string().optional().nullable(),
        isActive: zod_1.z.boolean().optional().nullable(),
        isVerified: zod_1.z.boolean().optional().nullable(),
        lastLogin: zod_1.z.string().optional().nullable(),
        accountType: exports.accountTypeSchema.optional().nullable(),
        notificationPreference: exports.notificationPreferenceSchema
            .optional()
            .nullable(),
        languagePreference: zod_1.z.string().optional().nullable(),
        currencyPreference: zod_1.z.string().optional().nullable(),
        timezone: zod_1.z.string().optional().nullable(),
        chatbotRequests: zod_1.z.number().optional().nullable(),
        bookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        messages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageThreadConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        wallet: zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        transactions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTransactionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        feedbacks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFeedbackConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        subscriptions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelPLMBRSubscriptionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatBots: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatBotConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatLogs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatLogConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTrackings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        loyaltyPrograms: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelLoyaltyProgramConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        rewards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelRewardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        contracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        invoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        paymentMethods: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelPaymentMethodConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        tips: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTipConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCustomizationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceReviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userPreference: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        verifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelVerificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        preferredContactTime: zod_1.z.string().optional().nullable(),
        serviceInterestedIn: zod_1.z.string().optional().nullable(),
        curentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userWalletId: zod_1.z.string().optional().nullable(),
        userCurentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.onDeleteUserSubscriptionVariablesSchema = zod_1.z.object({
    filter: exports.modelSubscriptionUserFilterInputSchema.optional().nullable(),
});
exports.onDeleteUserSubscriptionSchema = zod_1.z.object({
    onDeleteUser: zod_1.z
        .object({
        __typename: zod_1.z.literal("User"),
        id: zod_1.z.string(),
        email: zod_1.z.string(),
        password: zod_1.z.string(),
        firstName: zod_1.z.string(),
        lastName: zod_1.z.string(),
        dob: zod_1.z.string().optional().nullable(),
        gender: exports.genderSchema.optional().nullable(),
        phone: zod_1.z.string().optional().nullable(),
        address: zod_1.z.string().optional().nullable(),
        city: zod_1.z.string().optional().nullable(),
        state: zod_1.z.string().optional().nullable(),
        country: zod_1.z.string().optional().nullable(),
        zipCode: zod_1.z.string().optional().nullable(),
        profileImage: zod_1.z.string().optional().nullable(),
        isActive: zod_1.z.boolean().optional().nullable(),
        isVerified: zod_1.z.boolean().optional().nullable(),
        lastLogin: zod_1.z.string().optional().nullable(),
        accountType: exports.accountTypeSchema.optional().nullable(),
        notificationPreference: exports.notificationPreferenceSchema
            .optional()
            .nullable(),
        languagePreference: zod_1.z.string().optional().nullable(),
        currencyPreference: zod_1.z.string().optional().nullable(),
        timezone: zod_1.z.string().optional().nullable(),
        chatbotRequests: zod_1.z.number().optional().nullable(),
        bookings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelBookingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        messages: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelMessageThreadConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        wallet: zod_1.z
            .object({
            __typename: zod_1.z.literal("Wallet"),
            id: zod_1.z.string(),
            ownerID: zod_1.z.string(),
            balance: zod_1.z.number(),
            currency: zod_1.z.string(),
            lastUpdated: zod_1.z.string().optional().nullable(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        transactions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTransactionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        feedbacks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFeedbackConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        subscriptions: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelPLMBRSubscriptionConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatBots: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatBotConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        aiChatLogs: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelAIChatLogConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        jobTrackings: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelJobTrackingConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        reports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        loyaltyPrograms: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelLoyaltyProgramConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        rewards: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelRewardConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        contracts: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelContractConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        invoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        paymentMethods: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelPaymentMethodConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        tips: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelTipConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        referrals: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelReferralConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userHistories: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserHistoryConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        favoriteProviders: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        expenses: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelExpenseConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        customizations: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelCustomizationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        serviceReviews: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelServiceReviewConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userNotifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserNotificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userInvoices: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userReports: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserReportConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        providerBookmarks: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        userPreference: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        verifications: zod_1.z
            .object({
            __typename: zod_1.z.literal("ModelVerificationConnection"),
            nextToken: zod_1.z.string().optional().nullable(),
            startedAt: zod_1.z.number().optional().nullable(),
        })
            .optional()
            .nullable(),
        preferredContactTime: zod_1.z.string().optional().nullable(),
        serviceInterestedIn: zod_1.z.string().optional().nullable(),
        curentLocation: zod_1.z
            .object({
            __typename: zod_1.z.literal("Location"),
            id: zod_1.z.string(),
            latitude: zod_1.z.number(),
            longitude: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            createdAt: zod_1.z.string(),
            updatedAt: zod_1.z.string(),
            _version: zod_1.z.number(),
            _deleted: zod_1.z.boolean().optional().nullable(),
            _lastChangedAt: zod_1.z.number(),
        })
            .optional()
            .nullable(),
        createdAt: zod_1.z.string(),
        updatedAt: zod_1.z.string(),
        _version: zod_1.z.number(),
        _deleted: zod_1.z.boolean().optional().nullable(),
        _lastChangedAt: zod_1.z.number(),
        userWalletId: zod_1.z.string().optional().nullable(),
        userCurentLocationId: zod_1.z.string().optional().nullable(),
    })
        .optional()
        .nullable(),
});
exports.modelProviderHistoryConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelProviderHistoryConnection"),
    items: zod_1.z.array(exports.providerHistorySchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.modelMessageConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelMessageConnection"),
    items: zod_1.z.array(exports.messageSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.jobSchema = zod_1.z.object({
    __typename: zod_1.z.literal("Job"),
    id: zod_1.z.string(),
    description: zod_1.z.string(),
    location: zod_1.z.string(),
    startTime: zod_1.z.string().optional().nullable(),
    endTime: zod_1.z.string().optional().nullable(),
    status: exports.jobStatusSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    teamMemberAssignedJobsId: zod_1.z.string().optional().nullable(),
});
exports.modelFeedbackConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelFeedbackConnection"),
    items: zod_1.z.array(exports.feedbackSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.modelPLMBRSubscriptionConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelPLMBRSubscriptionConnection"),
    items: zod_1.z.array(exports.pLMBRSubscriptionSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.createServicePromotionMutationVariablesSchema = zod_1.z.object({
    input: exports.createServicePromotionInputSchema,
    condition: exports.modelServicePromotionConditionInputSchema.optional().nullable(),
});
exports.createEquipmentMutationVariablesSchema = zod_1.z.object({
    input: exports.createEquipmentInputSchema,
    condition: exports.modelEquipmentConditionInputSchema.optional().nullable(),
});
exports.modelJobConnectionSchema = zod_1.z.object({
    __typename: zod_1.z.literal("ModelJobConnection"),
    items: zod_1.z.array(exports.jobSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
});
exports.servicePromotionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ServicePromotion"),
    id: zod_1.z.string(),
    service: exports.serviceSchema.optional().nullable(),
    description: zod_1.z.string(),
    startDate: zod_1.z.string(),
    endDate: zod_1.z.string(),
    discountPercentage: zod_1.z.number(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceServicePromotionsId: zod_1.z.string().optional().nullable(),
}));
exports.serviceSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Service"),
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    price_min: zod_1.z.number(),
    Provider: exports.providerSchema.optional().nullable(),
    reviews: exports.modelReviewConnectionSchema.optional().nullable(),
    bookings: exports.modelBookingConnectionSchema.optional().nullable(),
    SubCategory: exports.subCategorySchema.optional().nullable(),
    servicePromotions: exports.modelServicePromotionConnectionSchema
        .optional()
        .nullable(),
    providerReports: exports.modelProviderReportConnectionSchema.optional().nullable(),
    userReports: exports.modelUserReportConnectionSchema.optional().nullable(),
    userInvoices: exports.modelUserInvoiceConnectionSchema.optional().nullable(),
    providerBookmarks: exports.modelProviderBookmarkConnectionSchema
        .optional()
        .nullable(),
    userBookmarks: exports.modelUserBookmarkConnectionSchema.optional().nullable(),
    providerNotifications: exports.modelProviderNotificationConnectionSchema
        .optional()
        .nullable(),
    userNotifications: exports.modelUserNotificationConnectionSchema
        .optional()
        .nullable(),
    serviceDiscounts: exports.modelServiceDiscountConnectionSchema
        .optional()
        .nullable(),
    providerAvailabilities: exports.modelProviderAvailabilityConnectionSchema
        .optional()
        .nullable(),
    userPreferences: exports.modelUserPreferenceConnectionSchema.optional().nullable(),
    providerCertifications: exports.modelProviderCertificationConnectionSchema
        .optional()
        .nullable(),
    serviceVideos: exports.modelServiceVideoConnectionSchema.optional().nullable(),
    serviceImages: exports.modelServiceImageConnectionSchema.optional().nullable(),
    serviceReviews: exports.modelServiceReviewConnectionSchema.optional().nullable(),
    aiDiagnostics: exports.modelAIDiagnosticsConnectionSchema.optional().nullable(),
    customizations: exports.modelCustomizationConnectionSchema.optional().nullable(),
    expenses: exports.modelExpenseConnectionSchema.optional().nullable(),
    favoriteProviders: exports.modelFavoriteProviderConnectionSchema
        .optional()
        .nullable(),
    userHistories: exports.modelUserHistoryConnectionSchema.optional().nullable(),
    providerAwards: exports.modelProviderAwardConnectionSchema.optional().nullable(),
    referrals: exports.modelReferralConnectionSchema.optional().nullable(),
    contracts: exports.modelContractConnectionSchema.optional().nullable(),
    jobTrackings: exports.modelJobTrackingConnectionSchema.optional().nullable(),
    duration: zod_1.z.string().optional().nullable(),
    Materials: zod_1.z.string().optional().nullable(),
    MaterialCosts: zod_1.z.number().optional().nullable(),
    BookingRequirements: zod_1.z.string().optional().nullable(),
    price_max: zod_1.z.number(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    invoiceServicesId: zod_1.z.string().optional().nullable(),
    servicePackageServicesId: zod_1.z.string().optional().nullable(),
    subCategoryServicesId: zod_1.z.string().optional().nullable(),
    providerServicesOfferedId: zod_1.z.string().optional().nullable(),
}));
exports.providerSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Provider"),
    id: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    dob: zod_1.z.string().optional().nullable(),
    gender: exports.genderSchema.optional().nullable(),
    phone: zod_1.z.string().optional().nullable(),
    address: zod_1.z.string().optional().nullable(),
    city: zod_1.z.string().optional().nullable(),
    state: zod_1.z.string().optional().nullable(),
    country: zod_1.z.string().optional().nullable(),
    zipCode: zod_1.z.string().optional().nullable(),
    profileImage: zod_1.z.string().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    lastLogin: zod_1.z.string().optional().nullable(),
    accountType: exports.accountTypeSchema.optional().nullable(),
    notificationPreference: exports.notificationPreferenceSchema.optional().nullable(),
    languagePreference: zod_1.z.string().optional().nullable(),
    currencyPreference: zod_1.z.string().optional().nullable(),
    timezone: zod_1.z.string().optional().nullable(),
    chatbotRequests: zod_1.z.number().optional().nullable(),
    servicesOffered: exports.modelServiceConnectionSchema.optional().nullable(),
    teamMembers: exports.modelTeamMemberConnectionSchema.optional().nullable(),
    availability: exports.modelAvailabilityConnectionSchema.optional().nullable(),
    reviews: exports.modelReviewConnectionSchema.optional().nullable(),
    certifications: exports.modelCertificationConnectionSchema.optional().nullable(),
    qualifications: exports.modelQualificationConnectionSchema.optional().nullable(),
    specializations: exports.modelSpecializationConnectionSchema.optional().nullable(),
    providerBookings: exports.modelBookingConnectionSchema.optional().nullable(),
    providerMessages: exports.modelMessageThreadConnectionSchema.optional().nullable(),
    providerContracts: exports.modelContractConnectionSchema.optional().nullable(),
    providerInvoices: exports.modelInvoiceConnectionSchema.optional().nullable(),
    providerTips: exports.modelTipConnectionSchema.optional().nullable(),
    providerReferrals: exports.modelReferralConnectionSchema.optional().nullable(),
    providerHistories: exports.modelProviderHistoryConnectionSchema
        .optional()
        .nullable(),
    providerNotifications: exports.modelProviderNotificationConnectionSchema
        .optional()
        .nullable(),
    providerBookmarks: exports.modelProviderBookmarkConnectionSchema
        .optional()
        .nullable(),
    providerReports: exports.modelProviderReportConnectionSchema.optional().nullable(),
    providerAvailability: exports.modelProviderAvailabilityConnectionSchema
        .optional()
        .nullable(),
    providerCertification: exports.modelProviderCertificationConnectionSchema
        .optional()
        .nullable(),
    favoriteProviders: exports.modelFavoriteProviderConnectionSchema
        .optional()
        .nullable(),
    providerAwards: exports.modelProviderAwardConnectionSchema.optional().nullable(),
    jobTracking: exports.modelJobTrackingConnectionSchema.optional().nullable(),
    expenses: exports.modelExpenseConnectionSchema.optional().nullable(),
    currentLocation: exports.locationSchema.optional().nullable(),
    isInstantBookingAvailable: zod_1.z.boolean().optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    nicheServiceProvidersId: zod_1.z.string().optional().nullable(),
    providerCurrentLocationId: zod_1.z.string().optional().nullable(),
}));
exports.modelReviewConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelReviewConnection"),
    items: zod_1.z.array(exports.reviewSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelBookingConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelBookingConnection"),
    items: zod_1.z.array(exports.bookingSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.subCategorySchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("SubCategory"),
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    MainCategory: exports.mainCategorySchema.optional().nullable(),
    Services: exports.modelServiceConnectionSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    mainCategorySubCategoriesId: zod_1.z.string().optional().nullable(),
}));
exports.modelServicePromotionConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelServicePromotionConnection"),
    items: zod_1.z.array(exports.servicePromotionSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelProviderReportConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelProviderReportConnection"),
    items: zod_1.z.array(exports.providerReportSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelUserReportConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelUserReportConnection"),
    items: zod_1.z.array(exports.userReportSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelUserInvoiceConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelUserInvoiceConnection"),
    items: zod_1.z.array(exports.userInvoiceSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelProviderBookmarkConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelProviderBookmarkConnection"),
    items: zod_1.z.array(exports.providerBookmarkSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelUserBookmarkConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelUserBookmarkConnection"),
    items: zod_1.z.array(exports.userBookmarkSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelProviderNotificationConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelProviderNotificationConnection"),
    items: zod_1.z.array(exports.providerNotificationSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelUserNotificationConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelUserNotificationConnection"),
    items: zod_1.z.array(exports.userNotificationSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelServiceDiscountConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelServiceDiscountConnection"),
    items: zod_1.z.array(exports.serviceDiscountSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelProviderAvailabilityConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelProviderAvailabilityConnection"),
    items: zod_1.z.array(exports.providerAvailabilitySchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelUserPreferenceConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelUserPreferenceConnection"),
    items: zod_1.z.array(exports.userPreferenceSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelProviderCertificationConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelProviderCertificationConnection"),
    items: zod_1.z.array(exports.providerCertificationSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelServiceVideoConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelServiceVideoConnection"),
    items: zod_1.z.array(exports.serviceVideoSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelServiceImageConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelServiceImageConnection"),
    items: zod_1.z.array(exports.serviceImageSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelServiceReviewConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelServiceReviewConnection"),
    items: zod_1.z.array(exports.serviceReviewSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelAIDiagnosticsConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelAIDiagnosticsConnection"),
    items: zod_1.z.array(exports.aIDiagnosticsSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelCustomizationConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelCustomizationConnection"),
    items: zod_1.z.array(exports.customizationSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelExpenseConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelExpenseConnection"),
    items: zod_1.z.array(exports.expenseSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelFavoriteProviderConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelFavoriteProviderConnection"),
    items: zod_1.z.array(exports.favoriteProviderSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelUserHistoryConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelUserHistoryConnection"),
    items: zod_1.z.array(exports.userHistorySchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelProviderAwardConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelProviderAwardConnection"),
    items: zod_1.z.array(exports.providerAwardSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelReferralConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelReferralConnection"),
    items: zod_1.z.array(exports.referralSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelContractConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelContractConnection"),
    items: zod_1.z.array(exports.contractSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelJobTrackingConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelJobTrackingConnection"),
    items: zod_1.z.array(exports.jobTrackingSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelServiceConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelServiceConnection"),
    items: zod_1.z.array(exports.serviceSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelTeamMemberConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelTeamMemberConnection"),
    items: zod_1.z.array(exports.teamMemberSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelAvailabilityConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelAvailabilityConnection"),
    items: zod_1.z.array(exports.availabilitySchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelCertificationConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelCertificationConnection"),
    items: zod_1.z.array(exports.certificationSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelQualificationConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelQualificationConnection"),
    items: zod_1.z.array(exports.qualificationSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelSpecializationConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelSpecializationConnection"),
    items: zod_1.z.array(exports.specializationSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelMessageThreadConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelMessageThreadConnection"),
    items: zod_1.z.array(exports.messageThreadSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelInvoiceConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelInvoiceConnection"),
    items: zod_1.z.array(exports.invoiceSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelTipConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelTipConnection"),
    items: zod_1.z.array(exports.tipSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.teamMemberSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("TeamMember"),
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    role: zod_1.z.string().optional().nullable(),
    currentLocation: exports.locationSchema.optional().nullable(),
    jobSiteDuration: zod_1.z.string().optional().nullable(),
    communicationLog: exports.modelMessageConnectionSchema.optional().nullable(),
    assignedJobs: exports.modelJobConnectionSchema.optional().nullable(),
    providerID: zod_1.z.string(),
    Provider: exports.providerSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    providerTeamMembersId: zod_1.z.string().optional().nullable(),
    teamMemberCurrentLocationId: zod_1.z.string().optional().nullable(),
}));
exports.availabilitySchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Availability"),
    id: zod_1.z.string(),
    startTime: zod_1.z.string(),
    endTime: zod_1.z.string(),
    Provider: exports.providerSchema.optional().nullable(),
    avalabilityDate: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    providerAvailabilityId: zod_1.z.string().optional().nullable(),
}));
exports.reviewSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Review"),
    id: zod_1.z.string(),
    Provider: exports.providerSchema.optional().nullable(),
    user: exports.userSchema.optional().nullable(),
    service: exports.serviceSchema.optional().nullable(),
    rating: zod_1.z.number(),
    comment: zod_1.z.string().optional().nullable(),
    date: zod_1.z.string(),
    response: exports.reviewResponseSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceReviewsId: zod_1.z.string().optional().nullable(),
    providerReviewsId: zod_1.z.string().optional().nullable(),
    userReviewsId: zod_1.z.string().optional().nullable(),
    reviewResponseId: zod_1.z.string().optional().nullable(),
}));
exports.userSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("User"),
    id: zod_1.z.string(),
    email: zod_1.z.string(),
    password: zod_1.z.string(),
    firstName: zod_1.z.string(),
    lastName: zod_1.z.string(),
    dob: zod_1.z.string().optional().nullable(),
    gender: exports.genderSchema.optional().nullable(),
    phone: zod_1.z.string().optional().nullable(),
    address: zod_1.z.string().optional().nullable(),
    city: zod_1.z.string().optional().nullable(),
    state: zod_1.z.string().optional().nullable(),
    country: zod_1.z.string().optional().nullable(),
    zipCode: zod_1.z.string().optional().nullable(),
    profileImage: zod_1.z.string().optional().nullable(),
    isActive: zod_1.z.boolean().optional().nullable(),
    isVerified: zod_1.z.boolean().optional().nullable(),
    lastLogin: zod_1.z.string().optional().nullable(),
    accountType: exports.accountTypeSchema.optional().nullable(),
    notificationPreference: exports.notificationPreferenceSchema.optional().nullable(),
    languagePreference: zod_1.z.string().optional().nullable(),
    currencyPreference: zod_1.z.string().optional().nullable(),
    timezone: zod_1.z.string().optional().nullable(),
    chatbotRequests: zod_1.z.number().optional().nullable(),
    bookings: exports.modelBookingConnectionSchema.optional().nullable(),
    messages: exports.modelMessageThreadConnectionSchema.optional().nullable(),
    reviews: exports.modelReviewConnectionSchema.optional().nullable(),
    wallet: exports.walletSchema.optional().nullable(),
    transactions: exports.modelTransactionConnectionSchema.optional().nullable(),
    feedbacks: exports.modelFeedbackConnectionSchema.optional().nullable(),
    subscriptions: exports.modelPLMBRSubscriptionConnectionSchema.optional().nullable(),
    aiChatBots: exports.modelAIChatBotConnectionSchema.optional().nullable(),
    aiChatLogs: exports.modelAIChatLogConnectionSchema.optional().nullable(),
    jobTrackings: exports.modelJobTrackingConnectionSchema.optional().nullable(),
    reports: exports.modelReportConnectionSchema.optional().nullable(),
    loyaltyPrograms: exports.modelLoyaltyProgramConnectionSchema.optional().nullable(),
    rewards: exports.modelRewardConnectionSchema.optional().nullable(),
    contracts: exports.modelContractConnectionSchema.optional().nullable(),
    invoices: exports.modelInvoiceConnectionSchema.optional().nullable(),
    paymentMethods: exports.modelPaymentMethodConnectionSchema.optional().nullable(),
    tips: exports.modelTipConnectionSchema.optional().nullable(),
    referrals: exports.modelReferralConnectionSchema.optional().nullable(),
    userHistories: exports.modelUserHistoryConnectionSchema.optional().nullable(),
    favoriteProviders: exports.modelFavoriteProviderConnectionSchema
        .optional()
        .nullable(),
    expenses: exports.modelExpenseConnectionSchema.optional().nullable(),
    customizations: exports.modelCustomizationConnectionSchema.optional().nullable(),
    serviceReviews: exports.modelServiceReviewConnectionSchema.optional().nullable(),
    userNotifications: exports.modelUserNotificationConnectionSchema
        .optional()
        .nullable(),
    userBookmarks: exports.modelUserBookmarkConnectionSchema.optional().nullable(),
    userInvoices: exports.modelUserInvoiceConnectionSchema.optional().nullable(),
    userReports: exports.modelUserReportConnectionSchema.optional().nullable(),
    providerBookmarks: exports.modelProviderBookmarkConnectionSchema
        .optional()
        .nullable(),
    userPreference: exports.modelUserPreferenceConnectionSchema.optional().nullable(),
    verifications: exports.modelVerificationConnectionSchema.optional().nullable(),
    preferredContactTime: zod_1.z.string().optional().nullable(),
    serviceInterestedIn: zod_1.z.string().optional().nullable(),
    curentLocation: exports.locationSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    userWalletId: zod_1.z.string().optional().nullable(),
    userCurentLocationId: zod_1.z.string().optional().nullable(),
}));
exports.reviewResponseSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ReviewResponse"),
    id: zod_1.z.string(),
    review: exports.reviewSchema.optional().nullable(),
    responseText: zod_1.z.string(),
    responseDate: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    reviewResponseReviewId: zod_1.z.string().optional().nullable(),
}));
exports.walletSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Wallet"),
    id: zod_1.z.string(),
    ownerID: zod_1.z.string(),
    balance: zod_1.z.number(),
    currency: zod_1.z.string(),
    transactions: exports.modelTransactionConnectionSchema.optional().nullable(),
    lastUpdated: zod_1.z.string().optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
}));
exports.modelTransactionConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelTransactionConnection"),
    items: zod_1.z.array(exports.transactionSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelAIChatBotConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelAIChatBotConnection"),
    items: zod_1.z.array(exports.aIChatBotSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelAIChatLogConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelAIChatLogConnection"),
    items: zod_1.z.array(exports.aIChatLogSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelReportConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelReportConnection"),
    items: zod_1.z.array(exports.reportSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelLoyaltyProgramConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelLoyaltyProgramConnection"),
    items: zod_1.z.array(exports.loyaltyProgramSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelRewardConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelRewardConnection"),
    items: zod_1.z.array(exports.rewardSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelPaymentMethodConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelPaymentMethodConnection"),
    items: zod_1.z.array(exports.paymentMethodSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelVerificationConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelVerificationConnection"),
    items: zod_1.z.array(exports.verificationSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.bookingSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Booking"),
    id: zod_1.z.string(),
    date: zod_1.z.string(),
    startTime: zod_1.z.string(),
    endTime: zod_1.z.string(),
    status: exports.bookingStatusSchema.optional().nullable(),
    service: exports.serviceSchema.optional().nullable(),
    provider: exports.providerSchema.optional().nullable(),
    user: exports.userSchema.optional().nullable(),
    location: zod_1.z.string().optional().nullable(),
    notes: zod_1.z.string().optional().nullable(),
    price: zod_1.z.number(),
    isInstantBooking: zod_1.z.boolean().optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceBookingsId: zod_1.z.string().optional().nullable(),
    providerProviderBookingsId: zod_1.z.string().optional().nullable(),
    userBookingsId: zod_1.z.string().optional().nullable(),
}));
exports.messageThreadSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("MessageThread"),
    id: zod_1.z.string(),
    provider: exports.providerSchema.optional().nullable(),
    user: exports.userSchema.optional().nullable(),
    messages: exports.modelMessageContentConnectionSchema.optional().nullable(),
    lastMessageDate: zod_1.z.string().optional().nullable(),
    lastMessageContent: zod_1.z.string().optional().nullable(),
    status: exports.messageStatusSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    providerProviderMessagesId: zod_1.z.string().optional().nullable(),
    userMessagesId: zod_1.z.string().optional().nullable(),
}));
exports.modelMessageContentConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelMessageContentConnection"),
    items: zod_1.z.array(exports.messageContentSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.messageContentSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("MessageContent"),
    id: zod_1.z.string(),
    thread: exports.messageThreadSchema.optional().nullable(),
    sender: zod_1.z.string().optional().nullable(),
    content: zod_1.z.string(),
    timestamp: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    messageThreadMessagesId: zod_1.z.string().optional().nullable(),
}));
exports.transactionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Transaction"),
    id: zod_1.z.string(),
    wallet: exports.walletSchema.optional().nullable(),
    amount: zod_1.z.number(),
    type: exports.transactionTypeSchema.optional().nullable(),
    description: zod_1.z.string().optional().nullable(),
    date: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    walletTransactionsId: zod_1.z.string().optional().nullable(),
    userTransactionsId: zod_1.z.string().optional().nullable(),
}));
exports.aIChatBotSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("AIChatBot"),
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    version: zod_1.z.string(),
    diagnostics: exports.modelAIDiagnosticsConnectionSchema.optional().nullable(),
    chatLogs: exports.modelAIChatLogConnectionSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    userAiChatBotsId: zod_1.z.string().optional().nullable(),
}));
exports.aIDiagnosticsSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("AIDiagnostics"),
    id: zod_1.z.string(),
    aiChatBot: exports.aIChatBotSchema.optional().nullable(),
    diagnosticData: zod_1.z.string(),
    date: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    aIChatBotDiagnosticsId: zod_1.z.string().optional().nullable(),
    serviceAiDiagnosticsId: zod_1.z.string().optional().nullable(),
}));
exports.aIChatLogSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("AIChatLog"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    aiChatBot: exports.aIChatBotSchema.optional().nullable(),
    message: zod_1.z.string(),
    response: zod_1.z.string(),
    date: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    aIChatBotChatLogsId: zod_1.z.string().optional().nullable(),
    userAiChatLogsId: zod_1.z.string().optional().nullable(),
}));
exports.jobTrackingSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("JobTracking"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    provider: exports.providerSchema.optional().nullable(),
    service: exports.serviceSchema.optional().nullable(),
    status: exports.jobStatusSchema.optional().nullable(),
    startDate: zod_1.z.string(),
    endDate: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceJobTrackingsId: zod_1.z.string().optional().nullable(),
    providerJobTrackingId: zod_1.z.string().optional().nullable(),
    userJobTrackingsId: zod_1.z.string().optional().nullable(),
}));
exports.reportSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Report"),
    id: zod_1.z.string(),
    reporter: exports.userSchema.optional().nullable(),
    reportedEntity: zod_1.z.string(),
    description: zod_1.z.string(),
    dateReported: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    userReportsId: zod_1.z.string().optional().nullable(),
}));
exports.loyaltyProgramSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("LoyaltyProgram"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    points: zod_1.z.number(),
    rewards: exports.modelRewardConnectionSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    userLoyaltyProgramsId: zod_1.z.string().optional().nullable(),
}));
exports.rewardSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Reward"),
    id: zod_1.z.string(),
    rewardName: zod_1.z.string(),
    description: zod_1.z.string(),
    value: zod_1.z.number(),
    referrals: exports.modelReferralConnectionSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    loyaltyProgramRewardsId: zod_1.z.string().optional().nullable(),
    userRewardsId: zod_1.z.string().optional().nullable(),
}));
exports.referralSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Referral"),
    id: zod_1.z.string(),
    referrer: exports.userSchema.optional().nullable(),
    referred: exports.userSchema.optional().nullable(),
    dateReferred: zod_1.z.string(),
    reward: exports.rewardSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    rewardReferralsId: zod_1.z.string().optional().nullable(),
    serviceReferralsId: zod_1.z.string().optional().nullable(),
    providerProviderReferralsId: zod_1.z.string().optional().nullable(),
    userReferralsId: zod_1.z.string().optional().nullable(),
}));
exports.contractSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Contract"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    provider: exports.providerSchema.optional().nullable(),
    service: exports.serviceSchema.optional().nullable(),
    startDate: zod_1.z.string(),
    endDate: zod_1.z.string(),
    terms: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceContractsId: zod_1.z.string().optional().nullable(),
    providerProviderContractsId: zod_1.z.string().optional().nullable(),
    userContractsId: zod_1.z.string().optional().nullable(),
}));
exports.invoiceSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Invoice"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    provider: exports.providerSchema.optional().nullable(),
    amount: zod_1.z.number(),
    dateIssued: zod_1.z.string(),
    dueDate: zod_1.z.string(),
    status: exports.invoiceStatusSchema.optional().nullable(),
    services: exports.modelServiceConnectionSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    providerProviderInvoicesId: zod_1.z.string().optional().nullable(),
    userInvoicesId: zod_1.z.string().optional().nullable(),
}));
exports.paymentMethodSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("PaymentMethod"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    cardNumber: zod_1.z.string(),
    expiryDate: zod_1.z.string(),
    cardType: exports.cardTypeSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    userPaymentMethodsId: zod_1.z.string().optional().nullable(),
}));
exports.tipSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Tip"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    provider: exports.providerSchema.optional().nullable(),
    amount: zod_1.z.number(),
    date: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    providerProviderTipsId: zod_1.z.string().optional().nullable(),
    userTipsId: zod_1.z.string().optional().nullable(),
}));
exports.userHistorySchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("UserHistory"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    action: zod_1.z.string(),
    date: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceUserHistoriesId: zod_1.z.string().optional().nullable(),
    userUserHistoriesId: zod_1.z.string().optional().nullable(),
}));
exports.favoriteProviderSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("FavoriteProvider"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    provider: exports.providerSchema.optional().nullable(),
    dateAdded: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceFavoriteProvidersId: zod_1.z.string().optional().nullable(),
    providerFavoriteProvidersId: zod_1.z.string().optional().nullable(),
    userFavoriteProvidersId: zod_1.z.string().optional().nullable(),
}));
exports.expenseSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Expense"),
    id: zod_1.z.string(),
    provider: exports.providerSchema.optional().nullable(),
    amount: zod_1.z.number(),
    description: zod_1.z.string(),
    date: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceExpensesId: zod_1.z.string().optional().nullable(),
    providerExpensesId: zod_1.z.string().optional().nullable(),
    userExpensesId: zod_1.z.string().optional().nullable(),
}));
exports.customizationSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Customization"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    customizationType: zod_1.z.string(),
    customizationValue: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceCustomizationsId: zod_1.z.string().optional().nullable(),
    userCustomizationsId: zod_1.z.string().optional().nullable(),
}));
exports.serviceReviewSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ServiceReview"),
    id: zod_1.z.string(),
    service: exports.serviceSchema.optional().nullable(),
    user: exports.userSchema.optional().nullable(),
    rating: zod_1.z.number(),
    comment: zod_1.z.string(),
    date: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceServiceReviewsId: zod_1.z.string().optional().nullable(),
    userServiceReviewsId: zod_1.z.string().optional().nullable(),
}));
exports.userNotificationSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("UserNotification"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    content: zod_1.z.string(),
    dateSent: zod_1.z.string(),
    status: exports.notificationStatusSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceUserNotificationsId: zod_1.z.string().optional().nullable(),
    userUserNotificationsId: zod_1.z.string().optional().nullable(),
}));
exports.userBookmarkSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("UserBookmark"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    service: exports.serviceSchema.optional().nullable(),
    dateBookmarked: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceUserBookmarksId: zod_1.z.string().optional().nullable(),
    userUserBookmarksId: zod_1.z.string().optional().nullable(),
}));
exports.userInvoiceSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("UserInvoice"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    amount: zod_1.z.number(),
    dateIssued: zod_1.z.string(),
    dueDate: zod_1.z.string(),
    status: exports.invoiceStatusSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceUserInvoicesId: zod_1.z.string().optional().nullable(),
    userUserInvoicesId: zod_1.z.string().optional().nullable(),
}));
exports.userReportSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("UserReport"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    description: zod_1.z.string(),
    dateReported: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceUserReportsId: zod_1.z.string().optional().nullable(),
    userUserReportsId: zod_1.z.string().optional().nullable(),
}));
exports.providerBookmarkSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ProviderBookmark"),
    id: zod_1.z.string(),
    provider: exports.providerSchema.optional().nullable(),
    user: exports.userSchema.optional().nullable(),
    dateBookmarked: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceProviderBookmarksId: zod_1.z.string().optional().nullable(),
    providerProviderBookmarksId: zod_1.z.string().optional().nullable(),
    userProviderBookmarksId: zod_1.z.string().optional().nullable(),
}));
exports.userPreferenceSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("UserPreference"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    preferenceType: zod_1.z.string(),
    preferenceValue: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceUserPreferencesId: zod_1.z.string().optional().nullable(),
    userUserPreferenceId: zod_1.z.string().optional().nullable(),
}));
exports.verificationSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Verification"),
    id: zod_1.z.string(),
    user: exports.userSchema.optional().nullable(),
    verificationCode: zod_1.z.string(),
    dateSent: zod_1.z.string(),
    status: exports.verificationStatusSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    userVerificationsId: zod_1.z.string().optional().nullable(),
}));
exports.certificationSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Certification"),
    id: zod_1.z.string(),
    certificationName: zod_1.z.string(),
    issuedBy: zod_1.z.string().optional().nullable(),
    validFrom: zod_1.z.string().optional().nullable(),
    validUntil: zod_1.z.string().optional().nullable(),
    Provider: exports.providerSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    providerCertificationsId: zod_1.z.string().optional().nullable(),
}));
exports.qualificationSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Qualification"),
    id: zod_1.z.string(),
    qualificationName: zod_1.z.string(),
    institution: zod_1.z.string().optional().nullable(),
    yearObtained: zod_1.z.number().optional().nullable(),
    Provider: exports.providerSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    providerQualificationsId: zod_1.z.string().optional().nullable(),
}));
exports.specializationSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("Specialization"),
    id: zod_1.z.string(),
    specializationName: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    Provider: exports.providerSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    providerSpecializationsId: zod_1.z.string().optional().nullable(),
}));
exports.providerNotificationSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ProviderNotification"),
    id: zod_1.z.string(),
    provider: exports.providerSchema.optional().nullable(),
    content: zod_1.z.string(),
    dateSent: zod_1.z.string(),
    status: exports.notificationStatusSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceProviderNotificationsId: zod_1.z.string().optional().nullable(),
    providerProviderNotificationsId: zod_1.z.string().optional().nullable(),
}));
exports.providerReportSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ProviderReport"),
    id: zod_1.z.string(),
    provider: exports.providerSchema.optional().nullable(),
    description: zod_1.z.string(),
    dateReported: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceProviderReportsId: zod_1.z.string().optional().nullable(),
    providerProviderReportsId: zod_1.z.string().optional().nullable(),
}));
exports.providerAvailabilitySchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ProviderAvailability"),
    id: zod_1.z.string(),
    provider: exports.providerSchema.optional().nullable(),
    startDate: zod_1.z.string(),
    endDate: zod_1.z.string(),
    isScheduled: zod_1.z.boolean().optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceProviderAvailabilitiesId: zod_1.z.string().optional().nullable(),
    providerProviderAvailabilityId: zod_1.z.string().optional().nullable(),
}));
exports.providerCertificationSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ProviderCertification"),
    id: zod_1.z.string(),
    provider: exports.providerSchema.optional().nullable(),
    certificationName: zod_1.z.string(),
    issuedBy: zod_1.z.string(),
    validFrom: zod_1.z.string(),
    validUntil: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceProviderCertificationsId: zod_1.z.string().optional().nullable(),
    providerProviderCertificationId: zod_1.z.string().optional().nullable(),
}));
exports.providerAwardSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ProviderAward"),
    id: zod_1.z.string(),
    provider: exports.providerSchema.optional().nullable(),
    awardName: zod_1.z.string(),
    awardedBy: zod_1.z.string(),
    dateAwarded: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceProviderAwardsId: zod_1.z.string().optional().nullable(),
    providerProviderAwardsId: zod_1.z.string().optional().nullable(),
}));
exports.mainCategorySchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("MainCategory"),
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    descrption: zod_1.z.string().optional().nullable(),
    SubCategories: exports.modelSubCategoryConnectionSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
}));
exports.modelSubCategoryConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelSubCategoryConnection"),
    items: zod_1.z.array(exports.subCategorySchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.serviceDiscountSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ServiceDiscount"),
    id: zod_1.z.string(),
    service: exports.serviceSchema.optional().nullable(),
    discountPercentage: zod_1.z.number(),
    startDate: zod_1.z.string(),
    endDate: zod_1.z.string(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceServiceDiscountsId: zod_1.z.string().optional().nullable(),
}));
exports.serviceVideoSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ServiceVideo"),
    id: zod_1.z.string(),
    service: exports.serviceSchema.optional().nullable(),
    videoURL: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceServiceVideosId: zod_1.z.string().optional().nullable(),
}));
exports.serviceImageSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ServiceImage"),
    id: zod_1.z.string(),
    service: exports.serviceSchema.optional().nullable(),
    imageURL: zod_1.z.string(),
    description: zod_1.z.string().optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
    serviceServiceImagesId: zod_1.z.string().optional().nullable(),
}));
exports.nicheServiceSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("NicheService"),
    id: zod_1.z.string(),
    serviceName: zod_1.z.string(),
    description: zod_1.z.string(),
    providers: exports.modelProviderConnectionSchema.optional().nullable(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
}));
exports.modelProviderConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelProviderConnection"),
    items: zod_1.z.array(exports.providerSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.servicePackageSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ServicePackage"),
    id: zod_1.z.string(),
    packageName: zod_1.z.string(),
    services: exports.modelServiceConnectionSchema.optional().nullable(),
    discount: zod_1.z.number(),
    createdAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    _version: zod_1.z.number(),
    _deleted: zod_1.z.boolean().optional().nullable(),
    _lastChangedAt: zod_1.z.number(),
}));
exports.modelNicheServiceConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelNicheServiceConnection"),
    items: zod_1.z.array(exports.nicheServiceSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelServicePackageConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelServicePackageConnection"),
    items: zod_1.z.array(exports.servicePackageSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelMainCategoryConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelMainCategoryConnection"),
    items: zod_1.z.array(exports.mainCategorySchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelWalletConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelWalletConnection"),
    items: zod_1.z.array(exports.walletSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelReviewResponseConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelReviewResponseConnection"),
    items: zod_1.z.array(exports.reviewResponseSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));
exports.modelUserConnectionSchema = zod_1.z.lazy(() => zod_1.z.object({
    __typename: zod_1.z.literal("ModelUserConnection"),
    items: zod_1.z.array(exports.userSchema.nullable()),
    nextToken: zod_1.z.string().optional().nullable(),
    startedAt: zod_1.z.number().optional().nullable(),
}));

// Generated by ts-to-zod
import { z } from "zod";
import {
  ModelAttributeTypes,
  Gender,
  AccountType,
  NotificationPreference,
  JobStatus,
  BookingStatus,
  MessageStatus,
  TransactionType,
  InvoiceStatus,
  CardType,
  NotificationStatus,
  VerificationStatus,
  ModelServicePromotionConditionInput,
  ModelProviderReportConditionInput,
  ModelUserReportConditionInput,
  ModelUserInvoiceConditionInput,
  ModelProviderBookmarkConditionInput,
  ModelUserBookmarkConditionInput,
  ModelProviderNotificationConditionInput,
  ModelUserNotificationConditionInput,
  ModelServiceDiscountConditionInput,
  ModelProviderAvailabilityConditionInput,
  ModelUserPreferenceConditionInput,
  ModelProviderCertificationConditionInput,
  ModelServiceVideoConditionInput,
  ModelServiceImageConditionInput,
  ModelServiceReviewConditionInput,
  ModelAIDiagnosticsConditionInput,
  ModelCustomizationConditionInput,
  ModelExpenseConditionInput,
  ModelFavoriteProviderConditionInput,
  ModelUserHistoryConditionInput,
  ModelProviderAwardConditionInput,
  ModelReferralConditionInput,
  ModelTipConditionInput,
  ModelPaymentMethodConditionInput,
  ModelInvoiceConditionInput,
  ModelContractConditionInput,
  ModelNicheServiceConditionInput,
  ModelServicePackageConditionInput,
  ModelRewardConditionInput,
  ModelLoyaltyProgramConditionInput,
  ModelVerificationConditionInput,
  ModelAnalyticsConditionInput,
  ModelPromoCodeConditionInput,
  ModelReportConditionInput,
  ModelJobTrackingConditionInput,
  ModelAIChatLogConditionInput,
  ModelAIChatBotConditionInput,
  ModelMainCategoryConditionInput,
  ModelSubCategoryConditionInput,
  ModelPLMBRSubscriptionConditionInput,
  ModelUserSettingsConditionInput,
  ModelProviderSettingsConditionInput,
  ModelPortfolioConditionInput,
  ModelServiceVariantConditionInput,
  ModelServiceHighlightConditionInput,
  ModelServiceTagConditionInput,
  ModelServiceFAQConditionInput,
  ModelFeedbackConditionInput,
  EquipmentCategory,
  EquipmentAvailabilityStatus,
  ModelEquipmentConditionInput,
  ModelWalletConditionInput,
  ModelTransactionConditionInput,
  ModelReviewConditionInput,
  ModelReviewResponseConditionInput,
  ModelMessageThreadConditionInput,
  ModelMessageContentConditionInput,
  ModelBookingConditionInput,
  ModelTeamMemberConditionInput,
  ModelLocationConditionInput,
  ModelMessageConditionInput,
  ModelJobConditionInput,
  ModelServiceConditionInput,
  ModelProviderConditionInput,
  ModelAvailabilityConditionInput,
  ModelProviderReviewConditionInput,
  ModelCertificationConditionInput,
  ModelQualificationConditionInput,
  ModelSpecializationConditionInput,
  ModelProviderHistoryConditionInput,
  ModelUserConditionInput,
  ModelTasksFilterInput,
  ModelServicePromotionFilterInput,
  ModelProviderReportFilterInput,
  ModelUserReportFilterInput,
  ModelUserInvoiceFilterInput,
  ModelProviderBookmarkFilterInput,
  ModelUserBookmarkFilterInput,
  ModelProviderNotificationFilterInput,
  ModelUserNotificationFilterInput,
  ModelServiceDiscountFilterInput,
  ModelProviderAvailabilityFilterInput,
  ModelUserPreferenceFilterInput,
  ModelProviderCertificationFilterInput,
  ModelServiceVideoFilterInput,
  ModelServiceImageFilterInput,
  ModelServiceReviewFilterInput,
  ModelAIDiagnosticsFilterInput,
  ModelCustomizationFilterInput,
  ModelExpenseFilterInput,
  ModelFavoriteProviderFilterInput,
  ModelUserHistoryFilterInput,
  ModelProviderAwardFilterInput,
  ModelReferralFilterInput,
  ModelTipFilterInput,
  ModelPaymentMethodFilterInput,
  ModelInvoiceFilterInput,
  ModelContractFilterInput,
  ModelNicheServiceFilterInput,
  ModelServicePackageFilterInput,
  ModelRewardFilterInput,
  ModelLoyaltyProgramFilterInput,
  ModelVerificationFilterInput,
  ModelAnalyticsFilterInput,
  ModelPromoCodeFilterInput,
  ModelReportFilterInput,
  ModelJobTrackingFilterInput,
  ModelAIChatLogFilterInput,
  ModelAIChatBotFilterInput,
  ModelMainCategoryFilterInput,
  ModelSubCategoryFilterInput,
  ModelPLMBRSubscriptionFilterInput,
  ModelUserSettingsFilterInput,
  ModelProviderSettingsFilterInput,
  ModelPortfolioFilterInput,
  ModelServiceVariantFilterInput,
  ModelServiceHighlightFilterInput,
  ModelServiceTagFilterInput,
  ModelServiceFAQFilterInput,
  ModelFeedbackFilterInput,
  ModelEquipmentFilterInput,
  ModelWalletFilterInput,
  ModelTransactionFilterInput,
  ModelReviewFilterInput,
  ModelReviewResponseFilterInput,
  ModelMessageThreadFilterInput,
  ModelMessageContentFilterInput,
  ModelBookingFilterInput,
  ModelTeamMemberFilterInput,
  ModelLocationFilterInput,
  ModelMessageFilterInput,
  ModelJobFilterInput,
  ModelServiceFilterInput,
  ModelProviderFilterInput,
  ModelAvailabilityFilterInput,
  ModelProviderReviewFilterInput,
  ModelCertificationFilterInput,
  ModelQualificationFilterInput,
  ModelSpecializationFilterInput,
  ModelProviderHistoryFilterInput,
  ModelUserFilterInput,
  ModelSubscriptionTasksFilterInput,
  ModelSubscriptionServicePromotionFilterInput,
  ModelSubscriptionProviderReportFilterInput,
  ModelSubscriptionUserReportFilterInput,
  ModelSubscriptionUserInvoiceFilterInput,
  ModelSubscriptionProviderBookmarkFilterInput,
  ModelSubscriptionUserBookmarkFilterInput,
  ModelSubscriptionProviderNotificationFilterInput,
  ModelSubscriptionUserNotificationFilterInput,
  ModelSubscriptionServiceDiscountFilterInput,
  ModelSubscriptionProviderAvailabilityFilterInput,
  ModelSubscriptionUserPreferenceFilterInput,
  ModelSubscriptionProviderCertificationFilterInput,
  ModelSubscriptionServiceVideoFilterInput,
  ModelSubscriptionServiceImageFilterInput,
  ModelSubscriptionServiceReviewFilterInput,
  ModelSubscriptionAIDiagnosticsFilterInput,
  ModelSubscriptionCustomizationFilterInput,
  ModelSubscriptionExpenseFilterInput,
  ModelSubscriptionFavoriteProviderFilterInput,
  ModelSubscriptionUserHistoryFilterInput,
  ModelSubscriptionProviderAwardFilterInput,
  ModelSubscriptionReferralFilterInput,
  ModelSubscriptionTipFilterInput,
  ModelSubscriptionPaymentMethodFilterInput,
  ModelSubscriptionInvoiceFilterInput,
  ModelSubscriptionContractFilterInput,
  ModelSubscriptionNicheServiceFilterInput,
  ModelSubscriptionServicePackageFilterInput,
  ModelSubscriptionRewardFilterInput,
  ModelSubscriptionLoyaltyProgramFilterInput,
  ModelSubscriptionVerificationFilterInput,
  ModelSubscriptionAnalyticsFilterInput,
  ModelSubscriptionPromoCodeFilterInput,
  ModelSubscriptionReportFilterInput,
  ModelSubscriptionJobTrackingFilterInput,
  ModelSubscriptionAIChatLogFilterInput,
  ModelSubscriptionAIChatBotFilterInput,
  ModelSubscriptionMainCategoryFilterInput,
  ModelSubscriptionSubCategoryFilterInput,
  ModelSubscriptionPLMBRSubscriptionFilterInput,
  ModelSubscriptionUserSettingsFilterInput,
  ModelSubscriptionProviderSettingsFilterInput,
  ModelSubscriptionPortfolioFilterInput,
  ModelSubscriptionServiceVariantFilterInput,
  ModelSubscriptionServiceHighlightFilterInput,
  ModelSubscriptionServiceTagFilterInput,
  ModelSubscriptionServiceFAQFilterInput,
  ModelSubscriptionFeedbackFilterInput,
  ModelSubscriptionEquipmentFilterInput,
  ModelSubscriptionWalletFilterInput,
  ModelSubscriptionTransactionFilterInput,
  ModelSubscriptionReviewFilterInput,
  ModelSubscriptionReviewResponseFilterInput,
  ModelSubscriptionMessageThreadFilterInput,
  ModelSubscriptionMessageContentFilterInput,
  ModelSubscriptionBookingFilterInput,
  ModelSubscriptionTeamMemberFilterInput,
  ModelSubscriptionLocationFilterInput,
  ModelSubscriptionMessageFilterInput,
  ModelSubscriptionJobFilterInput,
  ModelSubscriptionServiceFilterInput,
  ModelSubscriptionProviderFilterInput,
  ModelSubscriptionAvailabilityFilterInput,
  ModelSubscriptionProviderReviewFilterInput,
  ModelSubscriptionCertificationFilterInput,
  ModelSubscriptionQualificationFilterInput,
  ModelSubscriptionSpecializationFilterInput,
  ModelSubscriptionProviderHistoryFilterInput,
  ModelSubscriptionUserFilterInput,
  ModelTasksConditionInput,
  Tasks,
  Service,
  Provider,
  ModelReviewConnection,
  ModelBookingConnection,
  SubCategory,
  ModelServicePromotionConnection,
  ModelProviderReportConnection,
  ModelUserReportConnection,
  ModelUserInvoiceConnection,
  ModelProviderBookmarkConnection,
  ModelUserBookmarkConnection,
  ModelProviderNotificationConnection,
  ModelUserNotificationConnection,
  ModelServiceDiscountConnection,
  ModelProviderAvailabilityConnection,
  ModelUserPreferenceConnection,
  ModelProviderCertificationConnection,
  ModelServiceVideoConnection,
  ModelServiceImageConnection,
  ModelServiceReviewConnection,
  ModelAIDiagnosticsConnection,
  ModelCustomizationConnection,
  ModelExpenseConnection,
  ModelFavoriteProviderConnection,
  ModelUserHistoryConnection,
  ModelProviderAwardConnection,
  ModelReferralConnection,
  ModelContractConnection,
  ModelJobTrackingConnection,
  ModelServiceConnection,
  ModelTeamMemberConnection,
  ModelAvailabilityConnection,
  ModelCertificationConnection,
  ModelQualificationConnection,
  ModelSpecializationConnection,
  ModelMessageThreadConnection,
  ModelInvoiceConnection,
  ModelTipConnection,
  TeamMember,
  Availability,
  Review,
  User,
  ReviewResponse,
  Wallet,
  ModelTransactionConnection,
  ModelAIChatBotConnection,
  ModelAIChatLogConnection,
  ModelReportConnection,
  ModelLoyaltyProgramConnection,
  ModelRewardConnection,
  ModelPaymentMethodConnection,
  ModelVerificationConnection,
  Booking,
  MessageThread,
  ModelMessageContentConnection,
  MessageContent,
  Transaction,
  AIChatBot,
  AIDiagnostics,
  AIChatLog,
  JobTracking,
  Report,
  LoyaltyProgram,
  Reward,
  Referral,
  Contract,
  Invoice,
  PaymentMethod,
  Tip,
  UserHistory,
  FavoriteProvider,
  Expense,
  Customization,
  ServiceReview,
  UserNotification,
  UserBookmark,
  UserInvoice,
  UserReport,
  ProviderBookmark,
  UserPreference,
  Verification,
  Certification,
  Qualification,
  Specialization,
  ProviderNotification,
  ProviderReport,
  ProviderAvailability,
  ProviderCertification,
  ProviderAward,
  MainCategory,
  ModelSubCategoryConnection,
  ServicePromotion,
  ServiceDiscount,
  ServiceVideo,
  ServiceImage,
  NicheService,
  ModelProviderConnection,
  ServicePackage,
  ModelTasksConnection,
  ModelNicheServiceConnection,
  ModelServicePackageConnection,
  ModelMainCategoryConnection,
  ModelWalletConnection,
  ModelReviewResponseConnection,
  ModelUserConnection,
} from "./../src/API";

export const createTasksInputSchema = z.object({
  id: z.string().optional().nullable(),
  taskName: z.string(),
  taskTime: z.number(),
  _version: z.number().optional().nullable(),
  tasksServiceId: z.string().optional().nullable(),
});

export const modelAttributeTypesSchema = z.nativeEnum(ModelAttributeTypes);

export const modelSizeInputSchema = z.object({
  ne: z.number().optional().nullable(),
  eq: z.number().optional().nullable(),
  le: z.number().optional().nullable(),
  lt: z.number().optional().nullable(),
  ge: z.number().optional().nullable(),
  gt: z.number().optional().nullable(),
  between: z.array(z.number().nullable()).optional().nullable(),
});

export const modelIntInputSchema = z.object({
  ne: z.number().optional().nullable(),
  eq: z.number().optional().nullable(),
  le: z.number().optional().nullable(),
  lt: z.number().optional().nullable(),
  ge: z.number().optional().nullable(),
  gt: z.number().optional().nullable(),
  between: z.array(z.number().nullable()).optional().nullable(),
  attributeExists: z.boolean().optional().nullable(),
  attributeType: modelAttributeTypesSchema.optional().nullable(),
});

export const modelBooleanInputSchema = z.object({
  ne: z.boolean().optional().nullable(),
  eq: z.boolean().optional().nullable(),
  attributeExists: z.boolean().optional().nullable(),
  attributeType: modelAttributeTypesSchema.optional().nullable(),
});

export const modelIDInputSchema = z.object({
  ne: z.string().optional().nullable(),
  eq: z.string().optional().nullable(),
  le: z.string().optional().nullable(),
  lt: z.string().optional().nullable(),
  ge: z.string().optional().nullable(),
  gt: z.string().optional().nullable(),
  contains: z.string().optional().nullable(),
  notContains: z.string().optional().nullable(),
  between: z.array(z.string().nullable()).optional().nullable(),
  beginsWith: z.string().optional().nullable(),
  attributeExists: z.boolean().optional().nullable(),
  attributeType: modelAttributeTypesSchema.optional().nullable(),
  size: modelSizeInputSchema.optional().nullable(),
});

export const genderSchema = z.nativeEnum(Gender);

export const accountTypeSchema = z.nativeEnum(AccountType);

export const notificationPreferenceSchema = z.nativeEnum(
  NotificationPreference,
);

export const locationSchema = z.object({
  __typename: z.literal("Location"),
  id: z.string(),
  latitude: z.number(),
  longitude: z.number(),
  timestamp: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
});

export const messageSchema = z.object({
  __typename: z.literal("Message"),
  id: z.string(),
  sender: z.string(),
  content: z.string(),
  timestamp: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
  teamMemberCommunicationLogId: z.string().optional().nullable(),
});

export const jobStatusSchema = z.nativeEnum(JobStatus);

export const bookingStatusSchema = z.nativeEnum(BookingStatus);

export const messageStatusSchema = z.nativeEnum(MessageStatus);

export const transactionTypeSchema = z.nativeEnum(TransactionType);

export const feedbackSchema = z.object({
  __typename: z.literal("Feedback"),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
  userFeedbacksId: z.string().optional().nullable(),
});

export const pLMBRSubscriptionSchema = z.object({
  __typename: z.literal("PLMBRSubscription"),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
  userSubscriptionsId: z.string().optional().nullable(),
});

export const invoiceStatusSchema = z.nativeEnum(InvoiceStatus);

export const cardTypeSchema = z.nativeEnum(CardType);

export const notificationStatusSchema = z.nativeEnum(NotificationStatus);

export const verificationStatusSchema = z.nativeEnum(VerificationStatus);

export const providerHistorySchema = z.object({
  __typename: z.literal("ProviderHistory"),
  id: z.string(),
  providerID: z.string(),
  event: z.string(),
  date: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
  providerProviderHistoriesId: z.string().optional().nullable(),
});

export const updateTasksInputSchema = z.object({
  id: z.string(),
  taskName: z.string().optional().nullable(),
  taskTime: z.number().optional().nullable(),
  _version: z.number().optional().nullable(),
  tasksServiceId: z.string().optional().nullable(),
});

export const deleteTasksInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createServicePromotionInputSchema = z.object({
  id: z.string().optional().nullable(),
  description: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  discountPercentage: z.number(),
  _version: z.number().optional().nullable(),
  serviceServicePromotionsId: z.string().optional().nullable(),
});

export const modelStringInputSchema = z.object({
  ne: z.string().optional().nullable(),
  eq: z.string().optional().nullable(),
  le: z.string().optional().nullable(),
  lt: z.string().optional().nullable(),
  ge: z.string().optional().nullable(),
  gt: z.string().optional().nullable(),
  contains: z.string().optional().nullable(),
  notContains: z.string().optional().nullable(),
  between: z.array(z.string().nullable()).optional().nullable(),
  beginsWith: z.string().optional().nullable(),
  attributeExists: z.boolean().optional().nullable(),
  attributeType: modelAttributeTypesSchema.optional().nullable(),
  size: modelSizeInputSchema.optional().nullable(),
});

export const modelFloatInputSchema = z.object({
  ne: z.number().optional().nullable(),
  eq: z.number().optional().nullable(),
  le: z.number().optional().nullable(),
  lt: z.number().optional().nullable(),
  ge: z.number().optional().nullable(),
  gt: z.number().optional().nullable(),
  between: z.array(z.number().nullable()).optional().nullable(),
  attributeExists: z.boolean().optional().nullable(),
  attributeType: modelAttributeTypesSchema.optional().nullable(),
});

export const modelServicePromotionConditionInputSchema: z.ZodSchema<ModelServicePromotionConditionInput> =
  z.lazy(() =>
    z.object({
      description: modelStringInputSchema.optional().nullable(),
      startDate: modelStringInputSchema.optional().nullable(),
      endDate: modelStringInputSchema.optional().nullable(),
      discountPercentage: modelFloatInputSchema.optional().nullable(),
      and: z
        .array(modelServicePromotionConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServicePromotionConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServicePromotionConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceServicePromotionsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateServicePromotionInputSchema = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.string().optional().nullable(),
  endDate: z.string().optional().nullable(),
  discountPercentage: z.number().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceServicePromotionsId: z.string().optional().nullable(),
});

export const deleteServicePromotionInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createProviderReportInputSchema = z.object({
  id: z.string().optional().nullable(),
  description: z.string(),
  dateReported: z.string(),
  _version: z.number().optional().nullable(),
  serviceProviderReportsId: z.string().optional().nullable(),
  providerProviderReportsId: z.string().optional().nullable(),
});

export const modelProviderReportConditionInputSchema: z.ZodSchema<ModelProviderReportConditionInput> =
  z.lazy(() =>
    z.object({
      description: modelStringInputSchema.optional().nullable(),
      dateReported: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderReportConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderReportConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderReportConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceProviderReportsId: modelIDInputSchema.optional().nullable(),
      providerProviderReportsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateProviderReportInputSchema = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  dateReported: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceProviderReportsId: z.string().optional().nullable(),
  providerProviderReportsId: z.string().optional().nullable(),
});

export const deleteProviderReportInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createUserReportInputSchema = z.object({
  id: z.string().optional().nullable(),
  description: z.string(),
  dateReported: z.string(),
  _version: z.number().optional().nullable(),
  serviceUserReportsId: z.string().optional().nullable(),
  userUserReportsId: z.string().optional().nullable(),
});

export const modelUserReportConditionInputSchema: z.ZodSchema<ModelUserReportConditionInput> =
  z.lazy(() =>
    z.object({
      description: modelStringInputSchema.optional().nullable(),
      dateReported: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelUserReportConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserReportConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserReportConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceUserReportsId: modelIDInputSchema.optional().nullable(),
      userUserReportsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateUserReportInputSchema = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  dateReported: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceUserReportsId: z.string().optional().nullable(),
  userUserReportsId: z.string().optional().nullable(),
});

export const deleteUserReportInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createUserInvoiceInputSchema = z.object({
  id: z.string().optional().nullable(),
  amount: z.number(),
  dateIssued: z.string(),
  dueDate: z.string(),
  status: invoiceStatusSchema.optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceUserInvoicesId: z.string().optional().nullable(),
  userUserInvoicesId: z.string().optional().nullable(),
});

export const modelInvoiceStatusInputSchema = z.object({
  eq: invoiceStatusSchema.optional().nullable(),
  ne: invoiceStatusSchema.optional().nullable(),
});

export const modelUserInvoiceConditionInputSchema: z.ZodSchema<ModelUserInvoiceConditionInput> =
  z.lazy(() =>
    z.object({
      amount: modelFloatInputSchema.optional().nullable(),
      dateIssued: modelStringInputSchema.optional().nullable(),
      dueDate: modelStringInputSchema.optional().nullable(),
      status: modelInvoiceStatusInputSchema.optional().nullable(),
      and: z
        .array(modelUserInvoiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserInvoiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserInvoiceConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceUserInvoicesId: modelIDInputSchema.optional().nullable(),
      userUserInvoicesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateUserInvoiceInputSchema = z.object({
  id: z.string(),
  amount: z.number().optional().nullable(),
  dateIssued: z.string().optional().nullable(),
  dueDate: z.string().optional().nullable(),
  status: invoiceStatusSchema.optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceUserInvoicesId: z.string().optional().nullable(),
  userUserInvoicesId: z.string().optional().nullable(),
});

export const deleteUserInvoiceInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createProviderBookmarkInputSchema = z.object({
  id: z.string().optional().nullable(),
  dateBookmarked: z.string(),
  _version: z.number().optional().nullable(),
  serviceProviderBookmarksId: z.string().optional().nullable(),
  providerProviderBookmarksId: z.string().optional().nullable(),
  userProviderBookmarksId: z.string().optional().nullable(),
});

export const modelProviderBookmarkConditionInputSchema: z.ZodSchema<ModelProviderBookmarkConditionInput> =
  z.lazy(() =>
    z.object({
      dateBookmarked: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderBookmarkConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderBookmarkConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderBookmarkConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceProviderBookmarksId: modelIDInputSchema.optional().nullable(),
      providerProviderBookmarksId: modelIDInputSchema.optional().nullable(),
      userProviderBookmarksId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateProviderBookmarkInputSchema = z.object({
  id: z.string(),
  dateBookmarked: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceProviderBookmarksId: z.string().optional().nullable(),
  providerProviderBookmarksId: z.string().optional().nullable(),
  userProviderBookmarksId: z.string().optional().nullable(),
});

export const deleteProviderBookmarkInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createUserBookmarkInputSchema = z.object({
  id: z.string().optional().nullable(),
  dateBookmarked: z.string(),
  _version: z.number().optional().nullable(),
  serviceUserBookmarksId: z.string().optional().nullable(),
  userUserBookmarksId: z.string().optional().nullable(),
});

export const modelUserBookmarkConditionInputSchema: z.ZodSchema<ModelUserBookmarkConditionInput> =
  z.lazy(() =>
    z.object({
      dateBookmarked: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelUserBookmarkConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserBookmarkConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserBookmarkConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceUserBookmarksId: modelIDInputSchema.optional().nullable(),
      userUserBookmarksId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateUserBookmarkInputSchema = z.object({
  id: z.string(),
  dateBookmarked: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceUserBookmarksId: z.string().optional().nullable(),
  userUserBookmarksId: z.string().optional().nullable(),
});

export const deleteUserBookmarkInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createProviderNotificationInputSchema = z.object({
  id: z.string().optional().nullable(),
  content: z.string(),
  dateSent: z.string(),
  status: notificationStatusSchema.optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceProviderNotificationsId: z.string().optional().nullable(),
  providerProviderNotificationsId: z.string().optional().nullable(),
});

export const modelNotificationStatusInputSchema = z.object({
  eq: notificationStatusSchema.optional().nullable(),
  ne: notificationStatusSchema.optional().nullable(),
});

export const modelProviderNotificationConditionInputSchema: z.ZodSchema<ModelProviderNotificationConditionInput> =
  z.lazy(() =>
    z.object({
      content: modelStringInputSchema.optional().nullable(),
      dateSent: modelStringInputSchema.optional().nullable(),
      status: modelNotificationStatusInputSchema.optional().nullable(),
      and: z
        .array(modelProviderNotificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderNotificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderNotificationConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceProviderNotificationsId: modelIDInputSchema.optional().nullable(),
      providerProviderNotificationsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateProviderNotificationInputSchema = z.object({
  id: z.string(),
  content: z.string().optional().nullable(),
  dateSent: z.string().optional().nullable(),
  status: notificationStatusSchema.optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceProviderNotificationsId: z.string().optional().nullable(),
  providerProviderNotificationsId: z.string().optional().nullable(),
});

export const deleteProviderNotificationInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createUserNotificationInputSchema = z.object({
  id: z.string().optional().nullable(),
  content: z.string(),
  dateSent: z.string(),
  status: notificationStatusSchema.optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceUserNotificationsId: z.string().optional().nullable(),
  userUserNotificationsId: z.string().optional().nullable(),
});

export const modelUserNotificationConditionInputSchema: z.ZodSchema<ModelUserNotificationConditionInput> =
  z.lazy(() =>
    z.object({
      content: modelStringInputSchema.optional().nullable(),
      dateSent: modelStringInputSchema.optional().nullable(),
      status: modelNotificationStatusInputSchema.optional().nullable(),
      and: z
        .array(modelUserNotificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserNotificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserNotificationConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceUserNotificationsId: modelIDInputSchema.optional().nullable(),
      userUserNotificationsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateUserNotificationInputSchema = z.object({
  id: z.string(),
  content: z.string().optional().nullable(),
  dateSent: z.string().optional().nullable(),
  status: notificationStatusSchema.optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceUserNotificationsId: z.string().optional().nullable(),
  userUserNotificationsId: z.string().optional().nullable(),
});

export const deleteUserNotificationInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createServiceDiscountInputSchema = z.object({
  id: z.string().optional().nullable(),
  discountPercentage: z.number(),
  startDate: z.string(),
  endDate: z.string(),
  _version: z.number().optional().nullable(),
  serviceServiceDiscountsId: z.string().optional().nullable(),
});

export const modelServiceDiscountConditionInputSchema: z.ZodSchema<ModelServiceDiscountConditionInput> =
  z.lazy(() =>
    z.object({
      discountPercentage: modelFloatInputSchema.optional().nullable(),
      startDate: modelStringInputSchema.optional().nullable(),
      endDate: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServiceDiscountConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceDiscountConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceDiscountConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceServiceDiscountsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateServiceDiscountInputSchema = z.object({
  id: z.string(),
  discountPercentage: z.number().optional().nullable(),
  startDate: z.string().optional().nullable(),
  endDate: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceServiceDiscountsId: z.string().optional().nullable(),
});

export const deleteServiceDiscountInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createProviderAvailabilityInputSchema = z.object({
  id: z.string().optional().nullable(),
  startDate: z.string(),
  endDate: z.string(),
  isScheduled: z.boolean().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceProviderAvailabilitiesId: z.string().optional().nullable(),
  providerProviderAvailabilityId: z.string().optional().nullable(),
});

export const modelProviderAvailabilityConditionInputSchema: z.ZodSchema<ModelProviderAvailabilityConditionInput> =
  z.lazy(() =>
    z.object({
      startDate: modelStringInputSchema.optional().nullable(),
      endDate: modelStringInputSchema.optional().nullable(),
      isScheduled: modelBooleanInputSchema.optional().nullable(),
      and: z
        .array(modelProviderAvailabilityConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderAvailabilityConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderAvailabilityConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceProviderAvailabilitiesId: modelIDInputSchema.optional().nullable(),
      providerProviderAvailabilityId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateProviderAvailabilityInputSchema = z.object({
  id: z.string(),
  startDate: z.string().optional().nullable(),
  endDate: z.string().optional().nullable(),
  isScheduled: z.boolean().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceProviderAvailabilitiesId: z.string().optional().nullable(),
  providerProviderAvailabilityId: z.string().optional().nullable(),
});

export const deleteProviderAvailabilityInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createUserPreferenceInputSchema = z.object({
  id: z.string().optional().nullable(),
  preferenceType: z.string(),
  preferenceValue: z.string(),
  _version: z.number().optional().nullable(),
  serviceUserPreferencesId: z.string().optional().nullable(),
  userUserPreferenceId: z.string().optional().nullable(),
});

export const modelUserPreferenceConditionInputSchema: z.ZodSchema<ModelUserPreferenceConditionInput> =
  z.lazy(() =>
    z.object({
      preferenceType: modelStringInputSchema.optional().nullable(),
      preferenceValue: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelUserPreferenceConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserPreferenceConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserPreferenceConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceUserPreferencesId: modelIDInputSchema.optional().nullable(),
      userUserPreferenceId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateUserPreferenceInputSchema = z.object({
  id: z.string(),
  preferenceType: z.string().optional().nullable(),
  preferenceValue: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceUserPreferencesId: z.string().optional().nullable(),
  userUserPreferenceId: z.string().optional().nullable(),
});

export const deleteUserPreferenceInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createProviderCertificationInputSchema = z.object({
  id: z.string().optional().nullable(),
  certificationName: z.string(),
  issuedBy: z.string(),
  validFrom: z.string(),
  validUntil: z.string(),
  _version: z.number().optional().nullable(),
  serviceProviderCertificationsId: z.string().optional().nullable(),
  providerProviderCertificationId: z.string().optional().nullable(),
});

export const modelProviderCertificationConditionInputSchema: z.ZodSchema<ModelProviderCertificationConditionInput> =
  z.lazy(() =>
    z.object({
      certificationName: modelStringInputSchema.optional().nullable(),
      issuedBy: modelStringInputSchema.optional().nullable(),
      validFrom: modelStringInputSchema.optional().nullable(),
      validUntil: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderCertificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderCertificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderCertificationConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceProviderCertificationsId: modelIDInputSchema.optional().nullable(),
      providerProviderCertificationId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateProviderCertificationInputSchema = z.object({
  id: z.string(),
  certificationName: z.string().optional().nullable(),
  issuedBy: z.string().optional().nullable(),
  validFrom: z.string().optional().nullable(),
  validUntil: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceProviderCertificationsId: z.string().optional().nullable(),
  providerProviderCertificationId: z.string().optional().nullable(),
});

export const deleteProviderCertificationInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createServiceVideoInputSchema = z.object({
  id: z.string().optional().nullable(),
  videoURL: z.string(),
  description: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceServiceVideosId: z.string().optional().nullable(),
});

export const modelServiceVideoConditionInputSchema: z.ZodSchema<ModelServiceVideoConditionInput> =
  z.lazy(() =>
    z.object({
      videoURL: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServiceVideoConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceVideoConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceVideoConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceServiceVideosId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateServiceVideoInputSchema = z.object({
  id: z.string(),
  videoURL: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceServiceVideosId: z.string().optional().nullable(),
});

export const deleteServiceVideoInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createServiceImageInputSchema = z.object({
  id: z.string().optional().nullable(),
  imageURL: z.string(),
  description: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceServiceImagesId: z.string().optional().nullable(),
});

export const modelServiceImageConditionInputSchema: z.ZodSchema<ModelServiceImageConditionInput> =
  z.lazy(() =>
    z.object({
      imageURL: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServiceImageConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceImageConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceImageConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceServiceImagesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateServiceImageInputSchema = z.object({
  id: z.string(),
  imageURL: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceServiceImagesId: z.string().optional().nullable(),
});

export const deleteServiceImageInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createServiceReviewInputSchema = z.object({
  id: z.string().optional().nullable(),
  rating: z.number(),
  comment: z.string(),
  date: z.string(),
  _version: z.number().optional().nullable(),
  serviceServiceReviewsId: z.string().optional().nullable(),
  userServiceReviewsId: z.string().optional().nullable(),
});

export const modelServiceReviewConditionInputSchema: z.ZodSchema<ModelServiceReviewConditionInput> =
  z.lazy(() =>
    z.object({
      rating: modelIntInputSchema.optional().nullable(),
      comment: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServiceReviewConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceReviewConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceReviewConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceServiceReviewsId: modelIDInputSchema.optional().nullable(),
      userServiceReviewsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateServiceReviewInputSchema = z.object({
  id: z.string(),
  rating: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceServiceReviewsId: z.string().optional().nullable(),
  userServiceReviewsId: z.string().optional().nullable(),
});

export const deleteServiceReviewInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createAIDiagnosticsInputSchema = z.object({
  id: z.string().optional().nullable(),
  diagnosticData: z.string(),
  date: z.string(),
  _version: z.number().optional().nullable(),
  aIChatBotDiagnosticsId: z.string().optional().nullable(),
  serviceAiDiagnosticsId: z.string().optional().nullable(),
});

export const modelAIDiagnosticsConditionInputSchema: z.ZodSchema<ModelAIDiagnosticsConditionInput> =
  z.lazy(() =>
    z.object({
      diagnosticData: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelAIDiagnosticsConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelAIDiagnosticsConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelAIDiagnosticsConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      aIChatBotDiagnosticsId: modelIDInputSchema.optional().nullable(),
      serviceAiDiagnosticsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateAIDiagnosticsInputSchema = z.object({
  id: z.string(),
  diagnosticData: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  aIChatBotDiagnosticsId: z.string().optional().nullable(),
  serviceAiDiagnosticsId: z.string().optional().nullable(),
});

export const deleteAIDiagnosticsInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createCustomizationInputSchema = z.object({
  id: z.string().optional().nullable(),
  customizationType: z.string(),
  customizationValue: z.string(),
  _version: z.number().optional().nullable(),
  serviceCustomizationsId: z.string().optional().nullable(),
  userCustomizationsId: z.string().optional().nullable(),
});

export const modelCustomizationConditionInputSchema: z.ZodSchema<ModelCustomizationConditionInput> =
  z.lazy(() =>
    z.object({
      customizationType: modelStringInputSchema.optional().nullable(),
      customizationValue: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelCustomizationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelCustomizationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelCustomizationConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceCustomizationsId: modelIDInputSchema.optional().nullable(),
      userCustomizationsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateCustomizationInputSchema = z.object({
  id: z.string(),
  customizationType: z.string().optional().nullable(),
  customizationValue: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceCustomizationsId: z.string().optional().nullable(),
  userCustomizationsId: z.string().optional().nullable(),
});

export const deleteCustomizationInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createExpenseInputSchema = z.object({
  id: z.string().optional().nullable(),
  amount: z.number(),
  description: z.string(),
  date: z.string(),
  _version: z.number().optional().nullable(),
  serviceExpensesId: z.string().optional().nullable(),
  providerExpensesId: z.string().optional().nullable(),
  userExpensesId: z.string().optional().nullable(),
});

export const modelExpenseConditionInputSchema: z.ZodSchema<ModelExpenseConditionInput> =
  z.lazy(() =>
    z.object({
      amount: modelFloatInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelExpenseConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelExpenseConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelExpenseConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceExpensesId: modelIDInputSchema.optional().nullable(),
      providerExpensesId: modelIDInputSchema.optional().nullable(),
      userExpensesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateExpenseInputSchema = z.object({
  id: z.string(),
  amount: z.number().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceExpensesId: z.string().optional().nullable(),
  providerExpensesId: z.string().optional().nullable(),
  userExpensesId: z.string().optional().nullable(),
});

export const deleteExpenseInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createFavoriteProviderInputSchema = z.object({
  id: z.string().optional().nullable(),
  dateAdded: z.string(),
  _version: z.number().optional().nullable(),
  serviceFavoriteProvidersId: z.string().optional().nullable(),
  providerFavoriteProvidersId: z.string().optional().nullable(),
  userFavoriteProvidersId: z.string().optional().nullable(),
});

export const modelFavoriteProviderConditionInputSchema: z.ZodSchema<ModelFavoriteProviderConditionInput> =
  z.lazy(() =>
    z.object({
      dateAdded: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelFavoriteProviderConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelFavoriteProviderConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelFavoriteProviderConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceFavoriteProvidersId: modelIDInputSchema.optional().nullable(),
      providerFavoriteProvidersId: modelIDInputSchema.optional().nullable(),
      userFavoriteProvidersId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateFavoriteProviderInputSchema = z.object({
  id: z.string(),
  dateAdded: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceFavoriteProvidersId: z.string().optional().nullable(),
  providerFavoriteProvidersId: z.string().optional().nullable(),
  userFavoriteProvidersId: z.string().optional().nullable(),
});

export const deleteFavoriteProviderInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createUserHistoryInputSchema = z.object({
  id: z.string().optional().nullable(),
  action: z.string(),
  date: z.string(),
  _version: z.number().optional().nullable(),
  serviceUserHistoriesId: z.string().optional().nullable(),
  userUserHistoriesId: z.string().optional().nullable(),
});

export const modelUserHistoryConditionInputSchema: z.ZodSchema<ModelUserHistoryConditionInput> =
  z.lazy(() =>
    z.object({
      action: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelUserHistoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserHistoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserHistoryConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceUserHistoriesId: modelIDInputSchema.optional().nullable(),
      userUserHistoriesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateUserHistoryInputSchema = z.object({
  id: z.string(),
  action: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceUserHistoriesId: z.string().optional().nullable(),
  userUserHistoriesId: z.string().optional().nullable(),
});

export const deleteUserHistoryInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createProviderAwardInputSchema = z.object({
  id: z.string().optional().nullable(),
  awardName: z.string(),
  awardedBy: z.string(),
  dateAwarded: z.string(),
  _version: z.number().optional().nullable(),
  serviceProviderAwardsId: z.string().optional().nullable(),
  providerProviderAwardsId: z.string().optional().nullable(),
});

export const modelProviderAwardConditionInputSchema: z.ZodSchema<ModelProviderAwardConditionInput> =
  z.lazy(() =>
    z.object({
      awardName: modelStringInputSchema.optional().nullable(),
      awardedBy: modelStringInputSchema.optional().nullable(),
      dateAwarded: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderAwardConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderAwardConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderAwardConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceProviderAwardsId: modelIDInputSchema.optional().nullable(),
      providerProviderAwardsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateProviderAwardInputSchema = z.object({
  id: z.string(),
  awardName: z.string().optional().nullable(),
  awardedBy: z.string().optional().nullable(),
  dateAwarded: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceProviderAwardsId: z.string().optional().nullable(),
  providerProviderAwardsId: z.string().optional().nullable(),
});

export const deleteProviderAwardInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createReferralInputSchema = z.object({
  id: z.string().optional().nullable(),
  dateReferred: z.string(),
  _version: z.number().optional().nullable(),
  rewardReferralsId: z.string().optional().nullable(),
  serviceReferralsId: z.string().optional().nullable(),
  providerProviderReferralsId: z.string().optional().nullable(),
  userReferralsId: z.string().optional().nullable(),
});

export const modelReferralConditionInputSchema: z.ZodSchema<ModelReferralConditionInput> =
  z.lazy(() =>
    z.object({
      dateReferred: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelReferralConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelReferralConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelReferralConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      rewardReferralsId: modelIDInputSchema.optional().nullable(),
      serviceReferralsId: modelIDInputSchema.optional().nullable(),
      providerProviderReferralsId: modelIDInputSchema.optional().nullable(),
      userReferralsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateReferralInputSchema = z.object({
  id: z.string(),
  dateReferred: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  rewardReferralsId: z.string().optional().nullable(),
  serviceReferralsId: z.string().optional().nullable(),
  providerProviderReferralsId: z.string().optional().nullable(),
  userReferralsId: z.string().optional().nullable(),
});

export const deleteReferralInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createTipInputSchema = z.object({
  id: z.string().optional().nullable(),
  amount: z.number(),
  date: z.string(),
  _version: z.number().optional().nullable(),
  providerProviderTipsId: z.string().optional().nullable(),
  userTipsId: z.string().optional().nullable(),
});

export const modelTipConditionInputSchema: z.ZodSchema<ModelTipConditionInput> =
  z.lazy(() =>
    z.object({
      amount: modelFloatInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelTipConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelTipConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelTipConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      providerProviderTipsId: modelIDInputSchema.optional().nullable(),
      userTipsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateTipInputSchema = z.object({
  id: z.string(),
  amount: z.number().optional().nullable(),
  date: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  providerProviderTipsId: z.string().optional().nullable(),
  userTipsId: z.string().optional().nullable(),
});

export const deleteTipInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createPaymentMethodInputSchema = z.object({
  id: z.string().optional().nullable(),
  cardNumber: z.string(),
  expiryDate: z.string(),
  cardType: cardTypeSchema.optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeCardId: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  userPaymentMethodsId: z.string().optional().nullable(),
});

export const modelCardTypeInputSchema = z.object({
  eq: cardTypeSchema.optional().nullable(),
  ne: cardTypeSchema.optional().nullable(),
});

export const modelPaymentMethodConditionInputSchema: z.ZodSchema<ModelPaymentMethodConditionInput> =
  z.lazy(() =>
    z.object({
      cardNumber: modelStringInputSchema.optional().nullable(),
      expiryDate: modelStringInputSchema.optional().nullable(),
      cardType: modelCardTypeInputSchema.optional().nullable(),
      stripeCustomerId: modelStringInputSchema.optional().nullable(),
      stripeCardId: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelPaymentMethodConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelPaymentMethodConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelPaymentMethodConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      userPaymentMethodsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updatePaymentMethodInputSchema = z.object({
  id: z.string(),
  cardNumber: z.string().optional().nullable(),
  expiryDate: z.string().optional().nullable(),
  cardType: cardTypeSchema.optional().nullable(),
  stripeCustomerId: z.string().optional().nullable(),
  stripeCardId: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  userPaymentMethodsId: z.string().optional().nullable(),
});

export const deletePaymentMethodInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createInvoiceInputSchema = z.object({
  id: z.string().optional().nullable(),
  amount: z.number(),
  dateIssued: z.string(),
  dueDate: z.string(),
  status: invoiceStatusSchema.optional().nullable(),
  _version: z.number().optional().nullable(),
  providerProviderInvoicesId: z.string().optional().nullable(),
  userInvoicesId: z.string().optional().nullable(),
});

export const modelInvoiceConditionInputSchema: z.ZodSchema<ModelInvoiceConditionInput> =
  z.lazy(() =>
    z.object({
      amount: modelFloatInputSchema.optional().nullable(),
      dateIssued: modelStringInputSchema.optional().nullable(),
      dueDate: modelStringInputSchema.optional().nullable(),
      status: modelInvoiceStatusInputSchema.optional().nullable(),
      and: z
        .array(modelInvoiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelInvoiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelInvoiceConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      providerProviderInvoicesId: modelIDInputSchema.optional().nullable(),
      userInvoicesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateInvoiceInputSchema = z.object({
  id: z.string(),
  amount: z.number().optional().nullable(),
  dateIssued: z.string().optional().nullable(),
  dueDate: z.string().optional().nullable(),
  status: invoiceStatusSchema.optional().nullable(),
  _version: z.number().optional().nullable(),
  providerProviderInvoicesId: z.string().optional().nullable(),
  userInvoicesId: z.string().optional().nullable(),
});

export const deleteInvoiceInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createContractInputSchema = z.object({
  id: z.string().optional().nullable(),
  startDate: z.string(),
  endDate: z.string(),
  terms: z.string(),
  _version: z.number().optional().nullable(),
  serviceContractsId: z.string().optional().nullable(),
  providerProviderContractsId: z.string().optional().nullable(),
  userContractsId: z.string().optional().nullable(),
});

export const modelContractConditionInputSchema: z.ZodSchema<ModelContractConditionInput> =
  z.lazy(() =>
    z.object({
      startDate: modelStringInputSchema.optional().nullable(),
      endDate: modelStringInputSchema.optional().nullable(),
      terms: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelContractConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelContractConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelContractConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceContractsId: modelIDInputSchema.optional().nullable(),
      providerProviderContractsId: modelIDInputSchema.optional().nullable(),
      userContractsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateContractInputSchema = z.object({
  id: z.string(),
  startDate: z.string().optional().nullable(),
  endDate: z.string().optional().nullable(),
  terms: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceContractsId: z.string().optional().nullable(),
  providerProviderContractsId: z.string().optional().nullable(),
  userContractsId: z.string().optional().nullable(),
});

export const deleteContractInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createNicheServiceInputSchema = z.object({
  id: z.string().optional().nullable(),
  serviceName: z.string(),
  description: z.string(),
  _version: z.number().optional().nullable(),
});

export const modelNicheServiceConditionInputSchema: z.ZodSchema<ModelNicheServiceConditionInput> =
  z.lazy(() =>
    z.object({
      serviceName: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelNicheServiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelNicheServiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelNicheServiceConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const updateNicheServiceInputSchema = z.object({
  id: z.string(),
  serviceName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const deleteNicheServiceInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createServicePackageInputSchema = z.object({
  id: z.string().optional().nullable(),
  packageName: z.string(),
  discount: z.number(),
  _version: z.number().optional().nullable(),
});

export const modelServicePackageConditionInputSchema: z.ZodSchema<ModelServicePackageConditionInput> =
  z.lazy(() =>
    z.object({
      packageName: modelStringInputSchema.optional().nullable(),
      discount: modelFloatInputSchema.optional().nullable(),
      and: z
        .array(modelServicePackageConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServicePackageConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServicePackageConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const updateServicePackageInputSchema = z.object({
  id: z.string(),
  packageName: z.string().optional().nullable(),
  discount: z.number().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const deleteServicePackageInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createRewardInputSchema = z.object({
  id: z.string().optional().nullable(),
  rewardName: z.string(),
  description: z.string(),
  value: z.number(),
  _version: z.number().optional().nullable(),
  loyaltyProgramRewardsId: z.string().optional().nullable(),
  userRewardsId: z.string().optional().nullable(),
});

export const modelRewardConditionInputSchema: z.ZodSchema<ModelRewardConditionInput> =
  z.lazy(() =>
    z.object({
      rewardName: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      value: modelFloatInputSchema.optional().nullable(),
      and: z
        .array(modelRewardConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelRewardConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelRewardConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      loyaltyProgramRewardsId: modelIDInputSchema.optional().nullable(),
      userRewardsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateRewardInputSchema = z.object({
  id: z.string(),
  rewardName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  value: z.number().optional().nullable(),
  _version: z.number().optional().nullable(),
  loyaltyProgramRewardsId: z.string().optional().nullable(),
  userRewardsId: z.string().optional().nullable(),
});

export const deleteRewardInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createLoyaltyProgramInputSchema = z.object({
  id: z.string().optional().nullable(),
  points: z.number(),
  _version: z.number().optional().nullable(),
  userLoyaltyProgramsId: z.string().optional().nullable(),
});

export const modelLoyaltyProgramConditionInputSchema: z.ZodSchema<ModelLoyaltyProgramConditionInput> =
  z.lazy(() =>
    z.object({
      points: modelIntInputSchema.optional().nullable(),
      and: z
        .array(modelLoyaltyProgramConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelLoyaltyProgramConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelLoyaltyProgramConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      userLoyaltyProgramsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateLoyaltyProgramInputSchema = z.object({
  id: z.string(),
  points: z.number().optional().nullable(),
  _version: z.number().optional().nullable(),
  userLoyaltyProgramsId: z.string().optional().nullable(),
});

export const deleteLoyaltyProgramInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createVerificationInputSchema = z.object({
  id: z.string().optional().nullable(),
  verificationCode: z.string(),
  dateSent: z.string(),
  status: verificationStatusSchema.optional().nullable(),
  _version: z.number().optional().nullable(),
  userVerificationsId: z.string().optional().nullable(),
});

export const modelVerificationStatusInputSchema = z.object({
  eq: verificationStatusSchema.optional().nullable(),
  ne: verificationStatusSchema.optional().nullable(),
});

export const modelVerificationConditionInputSchema: z.ZodSchema<ModelVerificationConditionInput> =
  z.lazy(() =>
    z.object({
      verificationCode: modelStringInputSchema.optional().nullable(),
      dateSent: modelStringInputSchema.optional().nullable(),
      status: modelVerificationStatusInputSchema.optional().nullable(),
      and: z
        .array(modelVerificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelVerificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelVerificationConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      userVerificationsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateVerificationInputSchema = z.object({
  id: z.string(),
  verificationCode: z.string().optional().nullable(),
  dateSent: z.string().optional().nullable(),
  status: verificationStatusSchema.optional().nullable(),
  _version: z.number().optional().nullable(),
  userVerificationsId: z.string().optional().nullable(),
});

export const deleteVerificationInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createAnalyticsInputSchema = z.object({
  id: z.string().optional().nullable(),
  userCount: z.number(),
  providerCount: z.number(),
  serviceCount: z.number(),
  date: z.string(),
  _version: z.number().optional().nullable(),
});

export const modelAnalyticsConditionInputSchema: z.ZodSchema<ModelAnalyticsConditionInput> =
  z.lazy(() =>
    z.object({
      userCount: modelIntInputSchema.optional().nullable(),
      providerCount: modelIntInputSchema.optional().nullable(),
      serviceCount: modelIntInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelAnalyticsConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelAnalyticsConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelAnalyticsConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const analyticsSchema = z.object({
  __typename: z.literal("Analytics"),
  id: z.string(),
  userCount: z.number(),
  providerCount: z.number(),
  serviceCount: z.number(),
  date: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
});

export const updateAnalyticsInputSchema = z.object({
  id: z.string(),
  userCount: z.number().optional().nullable(),
  providerCount: z.number().optional().nullable(),
  serviceCount: z.number().optional().nullable(),
  date: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const deleteAnalyticsInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createPromoCodeInputSchema = z.object({
  id: z.string().optional().nullable(),
  code: z.string(),
  discount: z.number(),
  validFrom: z.string(),
  validUntil: z.string(),
  _version: z.number().optional().nullable(),
});

export const modelPromoCodeConditionInputSchema: z.ZodSchema<ModelPromoCodeConditionInput> =
  z.lazy(() =>
    z.object({
      code: modelStringInputSchema.optional().nullable(),
      discount: modelFloatInputSchema.optional().nullable(),
      validFrom: modelStringInputSchema.optional().nullable(),
      validUntil: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelPromoCodeConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelPromoCodeConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelPromoCodeConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const promoCodeSchema = z.object({
  __typename: z.literal("PromoCode"),
  id: z.string(),
  code: z.string(),
  discount: z.number(),
  validFrom: z.string(),
  validUntil: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
});

export const updatePromoCodeInputSchema = z.object({
  id: z.string(),
  code: z.string().optional().nullable(),
  discount: z.number().optional().nullable(),
  validFrom: z.string().optional().nullable(),
  validUntil: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const deletePromoCodeInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createReportInputSchema = z.object({
  id: z.string().optional().nullable(),
  reportedEntity: z.string(),
  description: z.string(),
  dateReported: z.string(),
  _version: z.number().optional().nullable(),
  userReportsId: z.string().optional().nullable(),
});

export const modelReportConditionInputSchema: z.ZodSchema<ModelReportConditionInput> =
  z.lazy(() =>
    z.object({
      reportedEntity: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      dateReported: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelReportConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelReportConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelReportConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      userReportsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateReportInputSchema = z.object({
  id: z.string(),
  reportedEntity: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  dateReported: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  userReportsId: z.string().optional().nullable(),
});

export const deleteReportInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createJobTrackingInputSchema = z.object({
  id: z.string().optional().nullable(),
  status: jobStatusSchema.optional().nullable(),
  startDate: z.string(),
  endDate: z.string(),
  _version: z.number().optional().nullable(),
  serviceJobTrackingsId: z.string().optional().nullable(),
  providerJobTrackingId: z.string().optional().nullable(),
  userJobTrackingsId: z.string().optional().nullable(),
});

export const modelJobStatusInputSchema = z.object({
  eq: jobStatusSchema.optional().nullable(),
  ne: jobStatusSchema.optional().nullable(),
});

export const modelJobTrackingConditionInputSchema: z.ZodSchema<ModelJobTrackingConditionInput> =
  z.lazy(() =>
    z.object({
      status: modelJobStatusInputSchema.optional().nullable(),
      startDate: modelStringInputSchema.optional().nullable(),
      endDate: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelJobTrackingConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelJobTrackingConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelJobTrackingConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceJobTrackingsId: modelIDInputSchema.optional().nullable(),
      providerJobTrackingId: modelIDInputSchema.optional().nullable(),
      userJobTrackingsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateJobTrackingInputSchema = z.object({
  id: z.string(),
  status: jobStatusSchema.optional().nullable(),
  startDate: z.string().optional().nullable(),
  endDate: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceJobTrackingsId: z.string().optional().nullable(),
  providerJobTrackingId: z.string().optional().nullable(),
  userJobTrackingsId: z.string().optional().nullable(),
});

export const deleteJobTrackingInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createAIChatLogInputSchema = z.object({
  id: z.string().optional().nullable(),
  message: z.string(),
  response: z.string(),
  date: z.string(),
  _version: z.number().optional().nullable(),
  aIChatBotChatLogsId: z.string().optional().nullable(),
  userAiChatLogsId: z.string().optional().nullable(),
});

export const modelAIChatLogConditionInputSchema: z.ZodSchema<ModelAIChatLogConditionInput> =
  z.lazy(() =>
    z.object({
      message: modelStringInputSchema.optional().nullable(),
      response: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelAIChatLogConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelAIChatLogConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelAIChatLogConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      aIChatBotChatLogsId: modelIDInputSchema.optional().nullable(),
      userAiChatLogsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateAIChatLogInputSchema = z.object({
  id: z.string(),
  message: z.string().optional().nullable(),
  response: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  aIChatBotChatLogsId: z.string().optional().nullable(),
  userAiChatLogsId: z.string().optional().nullable(),
});

export const deleteAIChatLogInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createAIChatBotInputSchema = z.object({
  id: z.string().optional().nullable(),
  name: z.string(),
  version: z.string(),
  _version: z.number().optional().nullable(),
  userAiChatBotsId: z.string().optional().nullable(),
});

export const modelAIChatBotConditionInputSchema: z.ZodSchema<ModelAIChatBotConditionInput> =
  z.lazy(() =>
    z.object({
      name: modelStringInputSchema.optional().nullable(),
      version: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelAIChatBotConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelAIChatBotConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelAIChatBotConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      userAiChatBotsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateAIChatBotInputSchema = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  version: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  userAiChatBotsId: z.string().optional().nullable(),
});

export const deleteAIChatBotInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createMainCategoryInputSchema = z.object({
  id: z.string().optional().nullable(),
  name: z.string(),
  descrption: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const modelMainCategoryConditionInputSchema: z.ZodSchema<ModelMainCategoryConditionInput> =
  z.lazy(() =>
    z.object({
      name: modelStringInputSchema.optional().nullable(),
      descrption: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelMainCategoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelMainCategoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelMainCategoryConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const updateMainCategoryInputSchema = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  descrption: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const deleteMainCategoryInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createSubCategoryInputSchema = z.object({
  id: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  mainCategorySubCategoriesId: z.string().optional().nullable(),
});

export const modelSubCategoryConditionInputSchema: z.ZodSchema<ModelSubCategoryConditionInput> =
  z.lazy(() =>
    z.object({
      name: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubCategoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubCategoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelSubCategoryConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      mainCategorySubCategoriesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateSubCategoryInputSchema = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  mainCategorySubCategoriesId: z.string().optional().nullable(),
});

export const deleteSubCategoryInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createPLMBRSubscriptionInputSchema = z.object({
  id: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  userSubscriptionsId: z.string().optional().nullable(),
});

export const modelPLMBRSubscriptionConditionInputSchema: z.ZodSchema<ModelPLMBRSubscriptionConditionInput> =
  z.lazy(() =>
    z.object({
      and: z
        .array(modelPLMBRSubscriptionConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelPLMBRSubscriptionConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelPLMBRSubscriptionConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      userSubscriptionsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updatePLMBRSubscriptionInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
  userSubscriptionsId: z.string().optional().nullable(),
});

export const deletePLMBRSubscriptionInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createUserSettingsInputSchema = z.object({
  id: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const modelUserSettingsConditionInputSchema: z.ZodSchema<ModelUserSettingsConditionInput> =
  z.lazy(() =>
    z.object({
      and: z
        .array(modelUserSettingsConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserSettingsConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserSettingsConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const userSettingsSchema = z.object({
  __typename: z.literal("UserSettings"),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
});

export const updateUserSettingsInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const deleteUserSettingsInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createProviderSettingsInputSchema = z.object({
  id: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const modelProviderSettingsConditionInputSchema: z.ZodSchema<ModelProviderSettingsConditionInput> =
  z.lazy(() =>
    z.object({
      and: z
        .array(modelProviderSettingsConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderSettingsConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderSettingsConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const providerSettingsSchema = z.object({
  __typename: z.literal("ProviderSettings"),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
});

export const updateProviderSettingsInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const deleteProviderSettingsInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createPortfolioInputSchema = z.object({
  id: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const modelPortfolioConditionInputSchema: z.ZodSchema<ModelPortfolioConditionInput> =
  z.lazy(() =>
    z.object({
      and: z
        .array(modelPortfolioConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelPortfolioConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelPortfolioConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const portfolioSchema = z.object({
  __typename: z.literal("Portfolio"),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
});

export const updatePortfolioInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const deletePortfolioInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createServiceVariantInputSchema = z.object({
  id: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const modelServiceVariantConditionInputSchema: z.ZodSchema<ModelServiceVariantConditionInput> =
  z.lazy(() =>
    z.object({
      and: z
        .array(modelServiceVariantConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceVariantConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceVariantConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const serviceVariantSchema = z.object({
  __typename: z.literal("ServiceVariant"),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
});

export const updateServiceVariantInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const deleteServiceVariantInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createServiceHighlightInputSchema = z.object({
  id: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const modelServiceHighlightConditionInputSchema: z.ZodSchema<ModelServiceHighlightConditionInput> =
  z.lazy(() =>
    z.object({
      and: z
        .array(modelServiceHighlightConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceHighlightConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceHighlightConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const serviceHighlightSchema = z.object({
  __typename: z.literal("ServiceHighlight"),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
});

export const updateServiceHighlightInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const deleteServiceHighlightInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createServiceTagInputSchema = z.object({
  id: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const modelServiceTagConditionInputSchema: z.ZodSchema<ModelServiceTagConditionInput> =
  z.lazy(() =>
    z.object({
      and: z
        .array(modelServiceTagConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceTagConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceTagConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const serviceTagSchema = z.object({
  __typename: z.literal("ServiceTag"),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
});

export const updateServiceTagInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const deleteServiceTagInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createServiceFAQInputSchema = z.object({
  id: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const modelServiceFAQConditionInputSchema: z.ZodSchema<ModelServiceFAQConditionInput> =
  z.lazy(() =>
    z.object({
      and: z
        .array(modelServiceFAQConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceFAQConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceFAQConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const serviceFAQSchema = z.object({
  __typename: z.literal("ServiceFAQ"),
  id: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
});

export const updateServiceFAQInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const deleteServiceFAQInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createFeedbackInputSchema = z.object({
  id: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  userFeedbacksId: z.string().optional().nullable(),
});

export const modelFeedbackConditionInputSchema: z.ZodSchema<ModelFeedbackConditionInput> =
  z.lazy(() =>
    z.object({
      and: z
        .array(modelFeedbackConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelFeedbackConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelFeedbackConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      userFeedbacksId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateFeedbackInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
  userFeedbacksId: z.string().optional().nullable(),
});

export const deleteFeedbackInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const equipmentCategorySchema = z.nativeEnum(EquipmentCategory);

export const equipmentAvailabilityStatusSchema = z.nativeEnum(
  EquipmentAvailabilityStatus,
);

export const modelEquipmentCategoryInputSchema = z.object({
  eq: equipmentCategorySchema.optional().nullable(),
  ne: equipmentCategorySchema.optional().nullable(),
});

export const modelEquipmentAvailabilityStatusInputSchema = z.object({
  eq: equipmentAvailabilityStatusSchema.optional().nullable(),
  ne: equipmentAvailabilityStatusSchema.optional().nullable(),
});

export const modelEquipmentConditionInputSchema: z.ZodSchema<ModelEquipmentConditionInput> =
  z.lazy(() =>
    z.object({
      providerID: modelIDInputSchema.optional().nullable(),
      name: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      category: modelEquipmentCategoryInputSchema.optional().nullable(),
      availabilityStatus: modelEquipmentAvailabilityStatusInputSchema
        .optional()
        .nullable(),
      purchaseDate: modelStringInputSchema.optional().nullable(),
      maintenanceDate: modelStringInputSchema.optional().nullable(),
      image: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelEquipmentConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelEquipmentConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelEquipmentConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const equipmentSchema = z.object({
  __typename: z.literal("Equipment"),
  id: z.string(),
  providerID: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  category: equipmentCategorySchema.optional().nullable(),
  availabilityStatus: equipmentAvailabilityStatusSchema.optional().nullable(),
  purchaseDate: z.string().optional().nullable(),
  maintenanceDate: z.string().optional().nullable(),
  image: z.string().optional().nullable(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
});

export const updateEquipmentInputSchema = z.object({
  id: z.string(),
  providerID: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  category: equipmentCategorySchema.optional().nullable(),
  availabilityStatus: equipmentAvailabilityStatusSchema.optional().nullable(),
  purchaseDate: z.string().optional().nullable(),
  maintenanceDate: z.string().optional().nullable(),
  image: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const deleteEquipmentInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createWalletInputSchema = z.object({
  id: z.string().optional().nullable(),
  ownerID: z.string(),
  balance: z.number(),
  currency: z.string(),
  lastUpdated: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const modelWalletConditionInputSchema: z.ZodSchema<ModelWalletConditionInput> =
  z.lazy(() =>
    z.object({
      ownerID: modelIDInputSchema.optional().nullable(),
      balance: modelFloatInputSchema.optional().nullable(),
      currency: modelStringInputSchema.optional().nullable(),
      lastUpdated: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelWalletConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelWalletConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelWalletConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const updateWalletInputSchema = z.object({
  id: z.string(),
  ownerID: z.string().optional().nullable(),
  balance: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  lastUpdated: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const deleteWalletInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createTransactionInputSchema = z.object({
  id: z.string().optional().nullable(),
  amount: z.number(),
  type: transactionTypeSchema.optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.string(),
  _version: z.number().optional().nullable(),
  walletTransactionsId: z.string().optional().nullable(),
  userTransactionsId: z.string().optional().nullable(),
});

export const modelTransactionTypeInputSchema = z.object({
  eq: transactionTypeSchema.optional().nullable(),
  ne: transactionTypeSchema.optional().nullable(),
});

export const modelTransactionConditionInputSchema: z.ZodSchema<ModelTransactionConditionInput> =
  z.lazy(() =>
    z.object({
      amount: modelFloatInputSchema.optional().nullable(),
      type: modelTransactionTypeInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelTransactionConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelTransactionConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelTransactionConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      walletTransactionsId: modelIDInputSchema.optional().nullable(),
      userTransactionsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateTransactionInputSchema = z.object({
  id: z.string(),
  amount: z.number().optional().nullable(),
  type: transactionTypeSchema.optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  walletTransactionsId: z.string().optional().nullable(),
  userTransactionsId: z.string().optional().nullable(),
});

export const deleteTransactionInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createReviewInputSchema = z.object({
  id: z.string().optional().nullable(),
  rating: z.number(),
  comment: z.string().optional().nullable(),
  date: z.string(),
  _version: z.number().optional().nullable(),
  serviceReviewsId: z.string().optional().nullable(),
  providerReviewsId: z.string().optional().nullable(),
  userReviewsId: z.string().optional().nullable(),
  reviewResponseId: z.string().optional().nullable(),
});

export const modelReviewConditionInputSchema: z.ZodSchema<ModelReviewConditionInput> =
  z.lazy(() =>
    z.object({
      rating: modelIntInputSchema.optional().nullable(),
      comment: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelReviewConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelReviewConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelReviewConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceReviewsId: modelIDInputSchema.optional().nullable(),
      providerReviewsId: modelIDInputSchema.optional().nullable(),
      userReviewsId: modelIDInputSchema.optional().nullable(),
      reviewResponseId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateReviewInputSchema = z.object({
  id: z.string(),
  rating: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceReviewsId: z.string().optional().nullable(),
  providerReviewsId: z.string().optional().nullable(),
  userReviewsId: z.string().optional().nullable(),
  reviewResponseId: z.string().optional().nullable(),
});

export const deleteReviewInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createReviewResponseInputSchema = z.object({
  id: z.string().optional().nullable(),
  responseText: z.string(),
  responseDate: z.string(),
  _version: z.number().optional().nullable(),
  reviewResponseReviewId: z.string().optional().nullable(),
});

export const modelReviewResponseConditionInputSchema: z.ZodSchema<ModelReviewResponseConditionInput> =
  z.lazy(() =>
    z.object({
      responseText: modelStringInputSchema.optional().nullable(),
      responseDate: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelReviewResponseConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelReviewResponseConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelReviewResponseConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      reviewResponseReviewId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateReviewResponseInputSchema = z.object({
  id: z.string(),
  responseText: z.string().optional().nullable(),
  responseDate: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  reviewResponseReviewId: z.string().optional().nullable(),
});

export const deleteReviewResponseInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createMessageThreadInputSchema = z.object({
  id: z.string().optional().nullable(),
  lastMessageDate: z.string().optional().nullable(),
  lastMessageContent: z.string().optional().nullable(),
  status: messageStatusSchema.optional().nullable(),
  _version: z.number().optional().nullable(),
  providerProviderMessagesId: z.string().optional().nullable(),
  userMessagesId: z.string().optional().nullable(),
});

export const modelMessageStatusInputSchema = z.object({
  eq: messageStatusSchema.optional().nullable(),
  ne: messageStatusSchema.optional().nullable(),
});

export const modelMessageThreadConditionInputSchema: z.ZodSchema<ModelMessageThreadConditionInput> =
  z.lazy(() =>
    z.object({
      lastMessageDate: modelStringInputSchema.optional().nullable(),
      lastMessageContent: modelStringInputSchema.optional().nullable(),
      status: modelMessageStatusInputSchema.optional().nullable(),
      and: z
        .array(modelMessageThreadConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelMessageThreadConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelMessageThreadConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      providerProviderMessagesId: modelIDInputSchema.optional().nullable(),
      userMessagesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateMessageThreadInputSchema = z.object({
  id: z.string(),
  lastMessageDate: z.string().optional().nullable(),
  lastMessageContent: z.string().optional().nullable(),
  status: messageStatusSchema.optional().nullable(),
  _version: z.number().optional().nullable(),
  providerProviderMessagesId: z.string().optional().nullable(),
  userMessagesId: z.string().optional().nullable(),
});

export const deleteMessageThreadInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createMessageContentInputSchema = z.object({
  id: z.string().optional().nullable(),
  sender: z.string().optional().nullable(),
  content: z.string(),
  timestamp: z.string(),
  _version: z.number().optional().nullable(),
  messageThreadMessagesId: z.string().optional().nullable(),
});

export const modelMessageContentConditionInputSchema: z.ZodSchema<ModelMessageContentConditionInput> =
  z.lazy(() =>
    z.object({
      sender: modelStringInputSchema.optional().nullable(),
      content: modelStringInputSchema.optional().nullable(),
      timestamp: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelMessageContentConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelMessageContentConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelMessageContentConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      messageThreadMessagesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateMessageContentInputSchema = z.object({
  id: z.string(),
  sender: z.string().optional().nullable(),
  content: z.string().optional().nullable(),
  timestamp: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  messageThreadMessagesId: z.string().optional().nullable(),
});

export const deleteMessageContentInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createBookingInputSchema = z.object({
  id: z.string().optional().nullable(),
  date: z.string(),
  startTime: z.string(),
  endTime: z.string(),
  status: bookingStatusSchema.optional().nullable(),
  location: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  price: z.number(),
  isInstantBooking: z.boolean().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceBookingsId: z.string().optional().nullable(),
  providerProviderBookingsId: z.string().optional().nullable(),
  userBookingsId: z.string().optional().nullable(),
});

export const modelBookingStatusInputSchema = z.object({
  eq: bookingStatusSchema.optional().nullable(),
  ne: bookingStatusSchema.optional().nullable(),
});

export const modelBookingConditionInputSchema: z.ZodSchema<ModelBookingConditionInput> =
  z.lazy(() =>
    z.object({
      date: modelStringInputSchema.optional().nullable(),
      startTime: modelStringInputSchema.optional().nullable(),
      endTime: modelStringInputSchema.optional().nullable(),
      status: modelBookingStatusInputSchema.optional().nullable(),
      location: modelStringInputSchema.optional().nullable(),
      notes: modelStringInputSchema.optional().nullable(),
      price: modelFloatInputSchema.optional().nullable(),
      isInstantBooking: modelBooleanInputSchema.optional().nullable(),
      and: z
        .array(modelBookingConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelBookingConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelBookingConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      serviceBookingsId: modelIDInputSchema.optional().nullable(),
      providerProviderBookingsId: modelIDInputSchema.optional().nullable(),
      userBookingsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateBookingInputSchema = z.object({
  id: z.string(),
  date: z.string().optional().nullable(),
  startTime: z.string().optional().nullable(),
  endTime: z.string().optional().nullable(),
  status: bookingStatusSchema.optional().nullable(),
  location: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  price: z.number().optional().nullable(),
  isInstantBooking: z.boolean().optional().nullable(),
  _version: z.number().optional().nullable(),
  serviceBookingsId: z.string().optional().nullable(),
  providerProviderBookingsId: z.string().optional().nullable(),
  userBookingsId: z.string().optional().nullable(),
});

export const deleteBookingInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createTeamMemberInputSchema = z.object({
  id: z.string().optional().nullable(),
  name: z.string(),
  role: z.string().optional().nullable(),
  jobSiteDuration: z.string().optional().nullable(),
  providerID: z.string(),
  _version: z.number().optional().nullable(),
  providerTeamMembersId: z.string().optional().nullable(),
  teamMemberCurrentLocationId: z.string().optional().nullable(),
});

export const modelTeamMemberConditionInputSchema: z.ZodSchema<ModelTeamMemberConditionInput> =
  z.lazy(() =>
    z.object({
      name: modelStringInputSchema.optional().nullable(),
      role: modelStringInputSchema.optional().nullable(),
      jobSiteDuration: modelStringInputSchema.optional().nullable(),
      providerID: modelIDInputSchema.optional().nullable(),
      and: z
        .array(modelTeamMemberConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelTeamMemberConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelTeamMemberConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      providerTeamMembersId: modelIDInputSchema.optional().nullable(),
      teamMemberCurrentLocationId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateTeamMemberInputSchema = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  jobSiteDuration: z.string().optional().nullable(),
  providerID: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  providerTeamMembersId: z.string().optional().nullable(),
  teamMemberCurrentLocationId: z.string().optional().nullable(),
});

export const deleteTeamMemberInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createLocationInputSchema = z.object({
  id: z.string().optional().nullable(),
  latitude: z.number(),
  longitude: z.number(),
  timestamp: z.string(),
  _version: z.number().optional().nullable(),
});

export const modelLocationConditionInputSchema: z.ZodSchema<ModelLocationConditionInput> =
  z.lazy(() =>
    z.object({
      latitude: modelFloatInputSchema.optional().nullable(),
      longitude: modelFloatInputSchema.optional().nullable(),
      timestamp: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelLocationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelLocationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelLocationConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const updateLocationInputSchema = z.object({
  id: z.string(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  timestamp: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const deleteLocationInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createMessageInputSchema = z.object({
  id: z.string().optional().nullable(),
  sender: z.string(),
  content: z.string(),
  timestamp: z.string(),
  _version: z.number().optional().nullable(),
  teamMemberCommunicationLogId: z.string().optional().nullable(),
});

export const modelMessageConditionInputSchema: z.ZodSchema<ModelMessageConditionInput> =
  z.lazy(() =>
    z.object({
      sender: modelStringInputSchema.optional().nullable(),
      content: modelStringInputSchema.optional().nullable(),
      timestamp: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelMessageConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelMessageConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelMessageConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      teamMemberCommunicationLogId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateMessageInputSchema = z.object({
  id: z.string(),
  sender: z.string().optional().nullable(),
  content: z.string().optional().nullable(),
  timestamp: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  teamMemberCommunicationLogId: z.string().optional().nullable(),
});

export const deleteMessageInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createJobInputSchema = z.object({
  id: z.string().optional().nullable(),
  description: z.string(),
  location: z.string(),
  startTime: z.string().optional().nullable(),
  endTime: z.string().optional().nullable(),
  status: jobStatusSchema.optional().nullable(),
  _version: z.number().optional().nullable(),
  teamMemberAssignedJobsId: z.string().optional().nullable(),
});

export const modelJobConditionInputSchema: z.ZodSchema<ModelJobConditionInput> =
  z.lazy(() =>
    z.object({
      description: modelStringInputSchema.optional().nullable(),
      location: modelStringInputSchema.optional().nullable(),
      startTime: modelStringInputSchema.optional().nullable(),
      endTime: modelStringInputSchema.optional().nullable(),
      status: modelJobStatusInputSchema.optional().nullable(),
      and: z
        .array(modelJobConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelJobConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelJobConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      teamMemberAssignedJobsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateJobInputSchema = z.object({
  id: z.string(),
  description: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startTime: z.string().optional().nullable(),
  endTime: z.string().optional().nullable(),
  status: jobStatusSchema.optional().nullable(),
  _version: z.number().optional().nullable(),
  teamMemberAssignedJobsId: z.string().optional().nullable(),
});

export const deleteJobInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createServiceInputSchema = z.object({
  id: z.string().optional().nullable(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price_min: z.number(),
  duration: z.string().optional().nullable(),
  Materials: z.string().optional().nullable(),
  MaterialCosts: z.number().optional().nullable(),
  BookingRequirements: z.string().optional().nullable(),
  price_max: z.number(),
  _version: z.number().optional().nullable(),
  invoiceServicesId: z.string().optional().nullable(),
  servicePackageServicesId: z.string().optional().nullable(),
  subCategoryServicesId: z.string().optional().nullable(),
  providerServicesOfferedId: z.string().optional().nullable(),
  serviceTasksId: z.string().optional().nullable(),
});

export const modelServiceConditionInputSchema: z.ZodSchema<ModelServiceConditionInput> =
  z.lazy(() =>
    z.object({
      name: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      price_min: modelFloatInputSchema.optional().nullable(),
      duration: modelStringInputSchema.optional().nullable(),
      Materials: modelStringInputSchema.optional().nullable(),
      MaterialCosts: modelFloatInputSchema.optional().nullable(),
      BookingRequirements: modelStringInputSchema.optional().nullable(),
      price_max: modelFloatInputSchema.optional().nullable(),
      and: z
        .array(modelServiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      invoiceServicesId: modelIDInputSchema.optional().nullable(),
      servicePackageServicesId: modelIDInputSchema.optional().nullable(),
      subCategoryServicesId: modelIDInputSchema.optional().nullable(),
      providerServicesOfferedId: modelIDInputSchema.optional().nullable(),
      serviceTasksId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateServiceInputSchema = z.object({
  id: z.string(),
  name: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  price_min: z.number().optional().nullable(),
  duration: z.string().optional().nullable(),
  Materials: z.string().optional().nullable(),
  MaterialCosts: z.number().optional().nullable(),
  BookingRequirements: z.string().optional().nullable(),
  price_max: z.number().optional().nullable(),
  _version: z.number().optional().nullable(),
  invoiceServicesId: z.string().optional().nullable(),
  servicePackageServicesId: z.string().optional().nullable(),
  subCategoryServicesId: z.string().optional().nullable(),
  providerServicesOfferedId: z.string().optional().nullable(),
  serviceTasksId: z.string().optional().nullable(),
});

export const deleteServiceInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createProviderInputSchema = z.object({
  id: z.string().optional().nullable(),
  email: z.string(),
  password: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  dob: z.string().optional().nullable(),
  gender: genderSchema.optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  profileImage: z.string().optional().nullable(),
  isActive: z.boolean().optional().nullable(),
  isVerified: z.boolean().optional().nullable(),
  lastLogin: z.string().optional().nullable(),
  accountType: accountTypeSchema.optional().nullable(),
  notificationPreference: notificationPreferenceSchema.optional().nullable(),
  languagePreference: z.string().optional().nullable(),
  currencyPreference: z.string().optional().nullable(),
  timezone: z.string().optional().nullable(),
  chatbotRequests: z.number().optional().nullable(),
  isInstantBookingAvailable: z.boolean().optional().nullable(),
  isEmailVerified: z.boolean().optional().nullable(),
  _version: z.number().optional().nullable(),
  nicheServiceProvidersId: z.string().optional().nullable(),
  providerCurrentLocationId: z.string().optional().nullable(),
  providerTasksId: z.string().optional().nullable(),
});

export const modelGenderInputSchema = z.object({
  eq: genderSchema.optional().nullable(),
  ne: genderSchema.optional().nullable(),
});

export const modelAccountTypeInputSchema = z.object({
  eq: accountTypeSchema.optional().nullable(),
  ne: accountTypeSchema.optional().nullable(),
});

export const modelNotificationPreferenceInputSchema = z.object({
  eq: notificationPreferenceSchema.optional().nullable(),
  ne: notificationPreferenceSchema.optional().nullable(),
});

export const modelProviderConditionInputSchema: z.ZodSchema<ModelProviderConditionInput> =
  z.lazy(() =>
    z.object({
      email: modelStringInputSchema.optional().nullable(),
      password: modelStringInputSchema.optional().nullable(),
      firstName: modelStringInputSchema.optional().nullable(),
      lastName: modelStringInputSchema.optional().nullable(),
      dob: modelStringInputSchema.optional().nullable(),
      gender: modelGenderInputSchema.optional().nullable(),
      phone: modelStringInputSchema.optional().nullable(),
      address: modelStringInputSchema.optional().nullable(),
      city: modelStringInputSchema.optional().nullable(),
      state: modelStringInputSchema.optional().nullable(),
      country: modelStringInputSchema.optional().nullable(),
      zipCode: modelStringInputSchema.optional().nullable(),
      profileImage: modelStringInputSchema.optional().nullable(),
      isActive: modelBooleanInputSchema.optional().nullable(),
      isVerified: modelBooleanInputSchema.optional().nullable(),
      lastLogin: modelStringInputSchema.optional().nullable(),
      accountType: modelAccountTypeInputSchema.optional().nullable(),
      notificationPreference: modelNotificationPreferenceInputSchema
        .optional()
        .nullable(),
      languagePreference: modelStringInputSchema.optional().nullable(),
      currencyPreference: modelStringInputSchema.optional().nullable(),
      timezone: modelStringInputSchema.optional().nullable(),
      chatbotRequests: modelIntInputSchema.optional().nullable(),
      isInstantBookingAvailable: modelBooleanInputSchema.optional().nullable(),
      isEmailVerified: modelBooleanInputSchema.optional().nullable(),
      and: z
        .array(modelProviderConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      nicheServiceProvidersId: modelIDInputSchema.optional().nullable(),
      providerCurrentLocationId: modelIDInputSchema.optional().nullable(),
      providerTasksId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateProviderInputSchema = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  dob: z.string().optional().nullable(),
  gender: genderSchema.optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  profileImage: z.string().optional().nullable(),
  isActive: z.boolean().optional().nullable(),
  isVerified: z.boolean().optional().nullable(),
  lastLogin: z.string().optional().nullable(),
  accountType: accountTypeSchema.optional().nullable(),
  notificationPreference: notificationPreferenceSchema.optional().nullable(),
  languagePreference: z.string().optional().nullable(),
  currencyPreference: z.string().optional().nullable(),
  timezone: z.string().optional().nullable(),
  chatbotRequests: z.number().optional().nullable(),
  isInstantBookingAvailable: z.boolean().optional().nullable(),
  isEmailVerified: z.boolean().optional().nullable(),
  _version: z.number().optional().nullable(),
  nicheServiceProvidersId: z.string().optional().nullable(),
  providerCurrentLocationId: z.string().optional().nullable(),
  providerTasksId: z.string().optional().nullable(),
});

export const deleteProviderInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createAvailabilityInputSchema = z.object({
  id: z.string().optional().nullable(),
  startTime: z.string(),
  endTime: z.string(),
  avalabilityDate: z.string(),
  _version: z.number().optional().nullable(),
  providerAvailabilityId: z.string().optional().nullable(),
});

export const modelAvailabilityConditionInputSchema: z.ZodSchema<ModelAvailabilityConditionInput> =
  z.lazy(() =>
    z.object({
      startTime: modelStringInputSchema.optional().nullable(),
      endTime: modelStringInputSchema.optional().nullable(),
      avalabilityDate: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelAvailabilityConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelAvailabilityConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelAvailabilityConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      providerAvailabilityId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateAvailabilityInputSchema = z.object({
  id: z.string(),
  startTime: z.string().optional().nullable(),
  endTime: z.string().optional().nullable(),
  avalabilityDate: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  providerAvailabilityId: z.string().optional().nullable(),
});

export const deleteAvailabilityInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createProviderReviewInputSchema = z.object({
  id: z.string().optional().nullable(),
  providerID: z.string(),
  userID: z.string(),
  rating: z.number(),
  comment: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const modelProviderReviewConditionInputSchema: z.ZodSchema<ModelProviderReviewConditionInput> =
  z.lazy(() =>
    z.object({
      providerID: modelIDInputSchema.optional().nullable(),
      userID: modelIDInputSchema.optional().nullable(),
      rating: modelIntInputSchema.optional().nullable(),
      comment: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderReviewConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderReviewConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderReviewConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
    }),
  );

export const providerReviewSchema = z.object({
  __typename: z.literal("ProviderReview"),
  id: z.string(),
  providerID: z.string(),
  userID: z.string(),
  rating: z.number(),
  comment: z.string().optional().nullable(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
});

export const updateProviderReviewInputSchema = z.object({
  id: z.string(),
  providerID: z.string().optional().nullable(),
  userID: z.string().optional().nullable(),
  rating: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const deleteProviderReviewInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createCertificationInputSchema = z.object({
  id: z.string().optional().nullable(),
  certificationName: z.string(),
  issuedBy: z.string().optional().nullable(),
  validFrom: z.string().optional().nullable(),
  validUntil: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  providerCertificationsId: z.string().optional().nullable(),
});

export const modelCertificationConditionInputSchema: z.ZodSchema<ModelCertificationConditionInput> =
  z.lazy(() =>
    z.object({
      certificationName: modelStringInputSchema.optional().nullable(),
      issuedBy: modelStringInputSchema.optional().nullable(),
      validFrom: modelStringInputSchema.optional().nullable(),
      validUntil: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelCertificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelCertificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelCertificationConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      providerCertificationsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateCertificationInputSchema = z.object({
  id: z.string(),
  certificationName: z.string().optional().nullable(),
  issuedBy: z.string().optional().nullable(),
  validFrom: z.string().optional().nullable(),
  validUntil: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  providerCertificationsId: z.string().optional().nullable(),
});

export const deleteCertificationInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createQualificationInputSchema = z.object({
  id: z.string().optional().nullable(),
  qualificationName: z.string(),
  institution: z.string().optional().nullable(),
  yearObtained: z.number().optional().nullable(),
  _version: z.number().optional().nullable(),
  providerQualificationsId: z.string().optional().nullable(),
});

export const modelQualificationConditionInputSchema: z.ZodSchema<ModelQualificationConditionInput> =
  z.lazy(() =>
    z.object({
      qualificationName: modelStringInputSchema.optional().nullable(),
      institution: modelStringInputSchema.optional().nullable(),
      yearObtained: modelIntInputSchema.optional().nullable(),
      and: z
        .array(modelQualificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelQualificationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelQualificationConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      providerQualificationsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateQualificationInputSchema = z.object({
  id: z.string(),
  qualificationName: z.string().optional().nullable(),
  institution: z.string().optional().nullable(),
  yearObtained: z.number().optional().nullable(),
  _version: z.number().optional().nullable(),
  providerQualificationsId: z.string().optional().nullable(),
});

export const deleteQualificationInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createSpecializationInputSchema = z.object({
  id: z.string().optional().nullable(),
  specializationName: z.string(),
  description: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  providerSpecializationsId: z.string().optional().nullable(),
});

export const modelSpecializationConditionInputSchema: z.ZodSchema<ModelSpecializationConditionInput> =
  z.lazy(() =>
    z.object({
      specializationName: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelSpecializationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSpecializationConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelSpecializationConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      providerSpecializationsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateSpecializationInputSchema = z.object({
  id: z.string(),
  specializationName: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  providerSpecializationsId: z.string().optional().nullable(),
});

export const deleteSpecializationInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createProviderHistoryInputSchema = z.object({
  id: z.string().optional().nullable(),
  providerID: z.string(),
  event: z.string(),
  date: z.string(),
  description: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  providerProviderHistoriesId: z.string().optional().nullable(),
});

export const modelProviderHistoryConditionInputSchema: z.ZodSchema<ModelProviderHistoryConditionInput> =
  z.lazy(() =>
    z.object({
      providerID: modelIDInputSchema.optional().nullable(),
      event: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderHistoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderHistoryConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderHistoryConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      providerProviderHistoriesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateProviderHistoryInputSchema = z.object({
  id: z.string(),
  providerID: z.string().optional().nullable(),
  event: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
  providerProviderHistoriesId: z.string().optional().nullable(),
});

export const deleteProviderHistoryInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const createUserInputSchema = z.object({
  id: z.string().optional().nullable(),
  email: z.string(),
  password: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  dob: z.string().optional().nullable(),
  gender: genderSchema.optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  profileImage: z.string().optional().nullable(),
  isActive: z.boolean().optional().nullable(),
  isVerified: z.boolean().optional().nullable(),
  lastLogin: z.string().optional().nullable(),
  accountType: accountTypeSchema.optional().nullable(),
  notificationPreference: notificationPreferenceSchema.optional().nullable(),
  languagePreference: z.string().optional().nullable(),
  currencyPreference: z.string().optional().nullable(),
  timezone: z.string().optional().nullable(),
  chatbotRequests: z.number().optional().nullable(),
  preferredContactTime: z.string().optional().nullable(),
  serviceInterestedIn: z.string().optional().nullable(),
  isEmailVerified: z.boolean().optional().nullable(),
  _version: z.number().optional().nullable(),
  userWalletId: z.string().optional().nullable(),
  userCurentLocationId: z.string().optional().nullable(),
});

export const modelUserConditionInputSchema: z.ZodSchema<ModelUserConditionInput> =
  z.lazy(() =>
    z.object({
      email: modelStringInputSchema.optional().nullable(),
      password: modelStringInputSchema.optional().nullable(),
      firstName: modelStringInputSchema.optional().nullable(),
      lastName: modelStringInputSchema.optional().nullable(),
      dob: modelStringInputSchema.optional().nullable(),
      gender: modelGenderInputSchema.optional().nullable(),
      phone: modelStringInputSchema.optional().nullable(),
      address: modelStringInputSchema.optional().nullable(),
      city: modelStringInputSchema.optional().nullable(),
      state: modelStringInputSchema.optional().nullable(),
      country: modelStringInputSchema.optional().nullable(),
      zipCode: modelStringInputSchema.optional().nullable(),
      profileImage: modelStringInputSchema.optional().nullable(),
      isActive: modelBooleanInputSchema.optional().nullable(),
      isVerified: modelBooleanInputSchema.optional().nullable(),
      lastLogin: modelStringInputSchema.optional().nullable(),
      accountType: modelAccountTypeInputSchema.optional().nullable(),
      notificationPreference: modelNotificationPreferenceInputSchema
        .optional()
        .nullable(),
      languagePreference: modelStringInputSchema.optional().nullable(),
      currencyPreference: modelStringInputSchema.optional().nullable(),
      timezone: modelStringInputSchema.optional().nullable(),
      chatbotRequests: modelIntInputSchema.optional().nullable(),
      preferredContactTime: modelStringInputSchema.optional().nullable(),
      serviceInterestedIn: modelStringInputSchema.optional().nullable(),
      isEmailVerified: modelBooleanInputSchema.optional().nullable(),
      and: z
        .array(modelUserConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      userWalletId: modelIDInputSchema.optional().nullable(),
      userCurentLocationId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const updateUserInputSchema = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  firstName: z.string().optional().nullable(),
  lastName: z.string().optional().nullable(),
  dob: z.string().optional().nullable(),
  gender: genderSchema.optional().nullable(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  profileImage: z.string().optional().nullable(),
  isActive: z.boolean().optional().nullable(),
  isVerified: z.boolean().optional().nullable(),
  lastLogin: z.string().optional().nullable(),
  accountType: accountTypeSchema.optional().nullable(),
  notificationPreference: notificationPreferenceSchema.optional().nullable(),
  languagePreference: z.string().optional().nullable(),
  currencyPreference: z.string().optional().nullable(),
  timezone: z.string().optional().nullable(),
  chatbotRequests: z.number().optional().nullable(),
  preferredContactTime: z.string().optional().nullable(),
  serviceInterestedIn: z.string().optional().nullable(),
  isEmailVerified: z.boolean().optional().nullable(),
  _version: z.number().optional().nullable(),
  userWalletId: z.string().optional().nullable(),
  userCurentLocationId: z.string().optional().nullable(),
});

export const deleteUserInputSchema = z.object({
  id: z.string(),
  _version: z.number().optional().nullable(),
});

export const modelTasksFilterInputSchema: z.ZodSchema<ModelTasksFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      taskName: modelStringInputSchema.optional().nullable(),
      taskTime: modelIntInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelTasksFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z.array(modelTasksFilterInputSchema.nullable()).optional().nullable(),
      not: modelTasksFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      tasksServiceId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelServicePromotionFilterInputSchema: z.ZodSchema<ModelServicePromotionFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      startDate: modelStringInputSchema.optional().nullable(),
      endDate: modelStringInputSchema.optional().nullable(),
      discountPercentage: modelFloatInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServicePromotionFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServicePromotionFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServicePromotionFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceServicePromotionsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelProviderReportFilterInputSchema: z.ZodSchema<ModelProviderReportFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      dateReported: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderReportFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceProviderReportsId: modelIDInputSchema.optional().nullable(),
      providerProviderReportsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelUserReportFilterInputSchema: z.ZodSchema<ModelUserReportFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      dateReported: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelUserReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserReportFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceUserReportsId: modelIDInputSchema.optional().nullable(),
      userUserReportsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelUserInvoiceFilterInputSchema: z.ZodSchema<ModelUserInvoiceFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      amount: modelFloatInputSchema.optional().nullable(),
      dateIssued: modelStringInputSchema.optional().nullable(),
      dueDate: modelStringInputSchema.optional().nullable(),
      status: modelInvoiceStatusInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelUserInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserInvoiceFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceUserInvoicesId: modelIDInputSchema.optional().nullable(),
      userUserInvoicesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelProviderBookmarkFilterInputSchema: z.ZodSchema<ModelProviderBookmarkFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      dateBookmarked: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderBookmarkFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceProviderBookmarksId: modelIDInputSchema.optional().nullable(),
      providerProviderBookmarksId: modelIDInputSchema.optional().nullable(),
      userProviderBookmarksId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelUserBookmarkFilterInputSchema: z.ZodSchema<ModelUserBookmarkFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      dateBookmarked: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelUserBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserBookmarkFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceUserBookmarksId: modelIDInputSchema.optional().nullable(),
      userUserBookmarksId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelProviderNotificationFilterInputSchema: z.ZodSchema<ModelProviderNotificationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      content: modelStringInputSchema.optional().nullable(),
      dateSent: modelStringInputSchema.optional().nullable(),
      status: modelNotificationStatusInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderNotificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderNotificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderNotificationFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceProviderNotificationsId: modelIDInputSchema.optional().nullable(),
      providerProviderNotificationsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelUserNotificationFilterInputSchema: z.ZodSchema<ModelUserNotificationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      content: modelStringInputSchema.optional().nullable(),
      dateSent: modelStringInputSchema.optional().nullable(),
      status: modelNotificationStatusInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelUserNotificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserNotificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserNotificationFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceUserNotificationsId: modelIDInputSchema.optional().nullable(),
      userUserNotificationsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelServiceDiscountFilterInputSchema: z.ZodSchema<ModelServiceDiscountFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      discountPercentage: modelFloatInputSchema.optional().nullable(),
      startDate: modelStringInputSchema.optional().nullable(),
      endDate: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServiceDiscountFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceDiscountFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceDiscountFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceServiceDiscountsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelProviderAvailabilityFilterInputSchema: z.ZodSchema<ModelProviderAvailabilityFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      startDate: modelStringInputSchema.optional().nullable(),
      endDate: modelStringInputSchema.optional().nullable(),
      isScheduled: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderAvailabilityFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderAvailabilityFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderAvailabilityFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceProviderAvailabilitiesId: modelIDInputSchema.optional().nullable(),
      providerProviderAvailabilityId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelUserPreferenceFilterInputSchema: z.ZodSchema<ModelUserPreferenceFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      preferenceType: modelStringInputSchema.optional().nullable(),
      preferenceValue: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelUserPreferenceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserPreferenceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserPreferenceFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceUserPreferencesId: modelIDInputSchema.optional().nullable(),
      userUserPreferenceId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelProviderCertificationFilterInputSchema: z.ZodSchema<ModelProviderCertificationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      certificationName: modelStringInputSchema.optional().nullable(),
      issuedBy: modelStringInputSchema.optional().nullable(),
      validFrom: modelStringInputSchema.optional().nullable(),
      validUntil: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderCertificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderCertificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderCertificationFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceProviderCertificationsId: modelIDInputSchema.optional().nullable(),
      providerProviderCertificationId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelServiceVideoFilterInputSchema: z.ZodSchema<ModelServiceVideoFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      videoURL: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServiceVideoFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceVideoFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceVideoFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceServiceVideosId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelServiceImageFilterInputSchema: z.ZodSchema<ModelServiceImageFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      imageURL: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServiceImageFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceImageFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceImageFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceServiceImagesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelServiceReviewFilterInputSchema: z.ZodSchema<ModelServiceReviewFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      rating: modelIntInputSchema.optional().nullable(),
      comment: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServiceReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceReviewFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceServiceReviewsId: modelIDInputSchema.optional().nullable(),
      userServiceReviewsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelAIDiagnosticsFilterInputSchema: z.ZodSchema<ModelAIDiagnosticsFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      diagnosticData: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelAIDiagnosticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelAIDiagnosticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelAIDiagnosticsFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      aIChatBotDiagnosticsId: modelIDInputSchema.optional().nullable(),
      serviceAiDiagnosticsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelCustomizationFilterInputSchema: z.ZodSchema<ModelCustomizationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      customizationType: modelStringInputSchema.optional().nullable(),
      customizationValue: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelCustomizationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelCustomizationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelCustomizationFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceCustomizationsId: modelIDInputSchema.optional().nullable(),
      userCustomizationsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelExpenseFilterInputSchema: z.ZodSchema<ModelExpenseFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      amount: modelFloatInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelExpenseFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelExpenseFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelExpenseFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceExpensesId: modelIDInputSchema.optional().nullable(),
      providerExpensesId: modelIDInputSchema.optional().nullable(),
      userExpensesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelFavoriteProviderFilterInputSchema: z.ZodSchema<ModelFavoriteProviderFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      dateAdded: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelFavoriteProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelFavoriteProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelFavoriteProviderFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceFavoriteProvidersId: modelIDInputSchema.optional().nullable(),
      providerFavoriteProvidersId: modelIDInputSchema.optional().nullable(),
      userFavoriteProvidersId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelUserHistoryFilterInputSchema: z.ZodSchema<ModelUserHistoryFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      action: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelUserHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserHistoryFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceUserHistoriesId: modelIDInputSchema.optional().nullable(),
      userUserHistoriesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelProviderAwardFilterInputSchema: z.ZodSchema<ModelProviderAwardFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      awardName: modelStringInputSchema.optional().nullable(),
      awardedBy: modelStringInputSchema.optional().nullable(),
      dateAwarded: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderAwardFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderAwardFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderAwardFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceProviderAwardsId: modelIDInputSchema.optional().nullable(),
      providerProviderAwardsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelReferralFilterInputSchema: z.ZodSchema<ModelReferralFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      dateReferred: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelReferralFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelReferralFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelReferralFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      rewardReferralsId: modelIDInputSchema.optional().nullable(),
      serviceReferralsId: modelIDInputSchema.optional().nullable(),
      providerProviderReferralsId: modelIDInputSchema.optional().nullable(),
      userReferralsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelTipFilterInputSchema: z.ZodSchema<ModelTipFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      amount: modelFloatInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z.array(modelTipFilterInputSchema.nullable()).optional().nullable(),
      or: z.array(modelTipFilterInputSchema.nullable()).optional().nullable(),
      not: modelTipFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      providerProviderTipsId: modelIDInputSchema.optional().nullable(),
      userTipsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelPaymentMethodFilterInputSchema: z.ZodSchema<ModelPaymentMethodFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      cardNumber: modelStringInputSchema.optional().nullable(),
      expiryDate: modelStringInputSchema.optional().nullable(),
      cardType: modelCardTypeInputSchema.optional().nullable(),
      stripeCustomerId: modelStringInputSchema.optional().nullable(),
      stripeCardId: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelPaymentMethodFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelPaymentMethodFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelPaymentMethodFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      userPaymentMethodsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelInvoiceFilterInputSchema: z.ZodSchema<ModelInvoiceFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      amount: modelFloatInputSchema.optional().nullable(),
      dateIssued: modelStringInputSchema.optional().nullable(),
      dueDate: modelStringInputSchema.optional().nullable(),
      status: modelInvoiceStatusInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelInvoiceFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      providerProviderInvoicesId: modelIDInputSchema.optional().nullable(),
      userInvoicesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelContractFilterInputSchema: z.ZodSchema<ModelContractFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      startDate: modelStringInputSchema.optional().nullable(),
      endDate: modelStringInputSchema.optional().nullable(),
      terms: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelContractFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelContractFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelContractFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceContractsId: modelIDInputSchema.optional().nullable(),
      providerProviderContractsId: modelIDInputSchema.optional().nullable(),
      userContractsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelNicheServiceFilterInputSchema: z.ZodSchema<ModelNicheServiceFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      serviceName: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelNicheServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelNicheServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelNicheServiceFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelServicePackageFilterInputSchema: z.ZodSchema<ModelServicePackageFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      packageName: modelStringInputSchema.optional().nullable(),
      discount: modelFloatInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServicePackageFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServicePackageFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServicePackageFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelRewardFilterInputSchema: z.ZodSchema<ModelRewardFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      rewardName: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      value: modelFloatInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelRewardFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelRewardFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelRewardFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      loyaltyProgramRewardsId: modelIDInputSchema.optional().nullable(),
      userRewardsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelLoyaltyProgramFilterInputSchema: z.ZodSchema<ModelLoyaltyProgramFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      points: modelIntInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelLoyaltyProgramFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelLoyaltyProgramFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelLoyaltyProgramFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      userLoyaltyProgramsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelVerificationFilterInputSchema: z.ZodSchema<ModelVerificationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      verificationCode: modelStringInputSchema.optional().nullable(),
      dateSent: modelStringInputSchema.optional().nullable(),
      status: modelVerificationStatusInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelVerificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelVerificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelVerificationFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      userVerificationsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelAnalyticsFilterInputSchema: z.ZodSchema<ModelAnalyticsFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      userCount: modelIntInputSchema.optional().nullable(),
      providerCount: modelIntInputSchema.optional().nullable(),
      serviceCount: modelIntInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelAnalyticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelAnalyticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelAnalyticsFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelAnalyticsConnectionSchema = z.object({
  __typename: z.literal("ModelAnalyticsConnection"),
  items: z.array(analyticsSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const modelPromoCodeFilterInputSchema: z.ZodSchema<ModelPromoCodeFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      code: modelStringInputSchema.optional().nullable(),
      discount: modelFloatInputSchema.optional().nullable(),
      validFrom: modelStringInputSchema.optional().nullable(),
      validUntil: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelPromoCodeFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelPromoCodeFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelPromoCodeFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelPromoCodeConnectionSchema = z.object({
  __typename: z.literal("ModelPromoCodeConnection"),
  items: z.array(promoCodeSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const modelReportFilterInputSchema: z.ZodSchema<ModelReportFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      reportedEntity: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      dateReported: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelReportFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      userReportsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelJobTrackingFilterInputSchema: z.ZodSchema<ModelJobTrackingFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      status: modelJobStatusInputSchema.optional().nullable(),
      startDate: modelStringInputSchema.optional().nullable(),
      endDate: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelJobTrackingFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelJobTrackingFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelJobTrackingFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceJobTrackingsId: modelIDInputSchema.optional().nullable(),
      providerJobTrackingId: modelIDInputSchema.optional().nullable(),
      userJobTrackingsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelAIChatLogFilterInputSchema: z.ZodSchema<ModelAIChatLogFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      message: modelStringInputSchema.optional().nullable(),
      response: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelAIChatLogFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelAIChatLogFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelAIChatLogFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      aIChatBotChatLogsId: modelIDInputSchema.optional().nullable(),
      userAiChatLogsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelAIChatBotFilterInputSchema: z.ZodSchema<ModelAIChatBotFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      name: modelStringInputSchema.optional().nullable(),
      version: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelAIChatBotFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelAIChatBotFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelAIChatBotFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      userAiChatBotsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelMainCategoryFilterInputSchema: z.ZodSchema<ModelMainCategoryFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      name: modelStringInputSchema.optional().nullable(),
      descrption: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelMainCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelMainCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelMainCategoryFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubCategoryFilterInputSchema: z.ZodSchema<ModelSubCategoryFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      name: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelSubCategoryFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      mainCategorySubCategoriesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelPLMBRSubscriptionFilterInputSchema: z.ZodSchema<ModelPLMBRSubscriptionFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelPLMBRSubscriptionFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelPLMBRSubscriptionFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelPLMBRSubscriptionFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      userSubscriptionsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelUserSettingsFilterInputSchema: z.ZodSchema<ModelUserSettingsFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelUserSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelUserSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelUserSettingsFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelUserSettingsConnectionSchema = z.object({
  __typename: z.literal("ModelUserSettingsConnection"),
  items: z.array(userSettingsSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const modelProviderSettingsFilterInputSchema: z.ZodSchema<ModelProviderSettingsFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderSettingsFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelProviderSettingsConnectionSchema = z.object({
  __typename: z.literal("ModelProviderSettingsConnection"),
  items: z.array(providerSettingsSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const modelPortfolioFilterInputSchema: z.ZodSchema<ModelPortfolioFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelPortfolioFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelPortfolioFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelPortfolioFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelPortfolioConnectionSchema = z.object({
  __typename: z.literal("ModelPortfolioConnection"),
  items: z.array(portfolioSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const modelServiceVariantFilterInputSchema: z.ZodSchema<ModelServiceVariantFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServiceVariantFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceVariantFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceVariantFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelServiceVariantConnectionSchema = z.object({
  __typename: z.literal("ModelServiceVariantConnection"),
  items: z.array(serviceVariantSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const modelServiceHighlightFilterInputSchema: z.ZodSchema<ModelServiceHighlightFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServiceHighlightFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceHighlightFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceHighlightFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelServiceHighlightConnectionSchema = z.object({
  __typename: z.literal("ModelServiceHighlightConnection"),
  items: z.array(serviceHighlightSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const modelServiceTagFilterInputSchema: z.ZodSchema<ModelServiceTagFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServiceTagFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceTagFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceTagFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelServiceTagConnectionSchema = z.object({
  __typename: z.literal("ModelServiceTagConnection"),
  items: z.array(serviceTagSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const modelServiceFAQFilterInputSchema: z.ZodSchema<ModelServiceFAQFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServiceFAQFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceFAQFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceFAQFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelServiceFAQConnectionSchema = z.object({
  __typename: z.literal("ModelServiceFAQConnection"),
  items: z.array(serviceFAQSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const modelFeedbackFilterInputSchema: z.ZodSchema<ModelFeedbackFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelFeedbackFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelFeedbackFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelFeedbackFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      userFeedbacksId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelEquipmentFilterInputSchema: z.ZodSchema<ModelEquipmentFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      providerID: modelIDInputSchema.optional().nullable(),
      name: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      category: modelEquipmentCategoryInputSchema.optional().nullable(),
      availabilityStatus: modelEquipmentAvailabilityStatusInputSchema
        .optional()
        .nullable(),
      purchaseDate: modelStringInputSchema.optional().nullable(),
      maintenanceDate: modelStringInputSchema.optional().nullable(),
      image: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelEquipmentFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelEquipmentFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelEquipmentFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelEquipmentConnectionSchema = z.object({
  __typename: z.literal("ModelEquipmentConnection"),
  items: z.array(equipmentSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const modelWalletFilterInputSchema: z.ZodSchema<ModelWalletFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      ownerID: modelIDInputSchema.optional().nullable(),
      balance: modelFloatInputSchema.optional().nullable(),
      currency: modelStringInputSchema.optional().nullable(),
      lastUpdated: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelWalletFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelWalletFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelWalletFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelTransactionFilterInputSchema: z.ZodSchema<ModelTransactionFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      amount: modelFloatInputSchema.optional().nullable(),
      type: modelTransactionTypeInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelTransactionFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelTransactionFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelTransactionFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      walletTransactionsId: modelIDInputSchema.optional().nullable(),
      userTransactionsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelReviewFilterInputSchema: z.ZodSchema<ModelReviewFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      rating: modelIntInputSchema.optional().nullable(),
      comment: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelReviewFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceReviewsId: modelIDInputSchema.optional().nullable(),
      providerReviewsId: modelIDInputSchema.optional().nullable(),
      userReviewsId: modelIDInputSchema.optional().nullable(),
      reviewResponseId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelReviewResponseFilterInputSchema: z.ZodSchema<ModelReviewResponseFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      responseText: modelStringInputSchema.optional().nullable(),
      responseDate: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelReviewResponseFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelReviewResponseFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelReviewResponseFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      reviewResponseReviewId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelMessageThreadFilterInputSchema: z.ZodSchema<ModelMessageThreadFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      lastMessageDate: modelStringInputSchema.optional().nullable(),
      lastMessageContent: modelStringInputSchema.optional().nullable(),
      status: modelMessageStatusInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelMessageThreadFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelMessageThreadFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelMessageThreadFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      providerProviderMessagesId: modelIDInputSchema.optional().nullable(),
      userMessagesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelMessageContentFilterInputSchema: z.ZodSchema<ModelMessageContentFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      sender: modelStringInputSchema.optional().nullable(),
      content: modelStringInputSchema.optional().nullable(),
      timestamp: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelMessageContentFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelMessageContentFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelMessageContentFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      messageThreadMessagesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelBookingFilterInputSchema: z.ZodSchema<ModelBookingFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      startTime: modelStringInputSchema.optional().nullable(),
      endTime: modelStringInputSchema.optional().nullable(),
      status: modelBookingStatusInputSchema.optional().nullable(),
      location: modelStringInputSchema.optional().nullable(),
      notes: modelStringInputSchema.optional().nullable(),
      price: modelFloatInputSchema.optional().nullable(),
      isInstantBooking: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelBookingFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelBookingFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelBookingFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceBookingsId: modelIDInputSchema.optional().nullable(),
      providerProviderBookingsId: modelIDInputSchema.optional().nullable(),
      userBookingsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelTeamMemberFilterInputSchema: z.ZodSchema<ModelTeamMemberFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      name: modelStringInputSchema.optional().nullable(),
      role: modelStringInputSchema.optional().nullable(),
      jobSiteDuration: modelStringInputSchema.optional().nullable(),
      providerID: modelIDInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelTeamMemberFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelTeamMemberFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelTeamMemberFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      providerTeamMembersId: modelIDInputSchema.optional().nullable(),
      teamMemberCurrentLocationId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelLocationFilterInputSchema: z.ZodSchema<ModelLocationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      latitude: modelFloatInputSchema.optional().nullable(),
      longitude: modelFloatInputSchema.optional().nullable(),
      timestamp: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelLocationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelLocationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelLocationFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelLocationConnectionSchema = z.object({
  __typename: z.literal("ModelLocationConnection"),
  items: z.array(locationSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const modelMessageFilterInputSchema: z.ZodSchema<ModelMessageFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      sender: modelStringInputSchema.optional().nullable(),
      content: modelStringInputSchema.optional().nullable(),
      timestamp: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelMessageFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelMessageFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelMessageFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      teamMemberCommunicationLogId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelJobFilterInputSchema: z.ZodSchema<ModelJobFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      location: modelStringInputSchema.optional().nullable(),
      startTime: modelStringInputSchema.optional().nullable(),
      endTime: modelStringInputSchema.optional().nullable(),
      status: modelJobStatusInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z.array(modelJobFilterInputSchema.nullable()).optional().nullable(),
      or: z.array(modelJobFilterInputSchema.nullable()).optional().nullable(),
      not: modelJobFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      teamMemberAssignedJobsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelServiceFilterInputSchema: z.ZodSchema<ModelServiceFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      name: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      price_min: modelFloatInputSchema.optional().nullable(),
      duration: modelStringInputSchema.optional().nullable(),
      Materials: modelStringInputSchema.optional().nullable(),
      MaterialCosts: modelFloatInputSchema.optional().nullable(),
      BookingRequirements: modelStringInputSchema.optional().nullable(),
      price_max: modelFloatInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelServiceFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      invoiceServicesId: modelIDInputSchema.optional().nullable(),
      servicePackageServicesId: modelIDInputSchema.optional().nullable(),
      subCategoryServicesId: modelIDInputSchema.optional().nullable(),
      providerServicesOfferedId: modelIDInputSchema.optional().nullable(),
      serviceTasksId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelProviderFilterInputSchema: z.ZodSchema<ModelProviderFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      email: modelStringInputSchema.optional().nullable(),
      password: modelStringInputSchema.optional().nullable(),
      firstName: modelStringInputSchema.optional().nullable(),
      lastName: modelStringInputSchema.optional().nullable(),
      dob: modelStringInputSchema.optional().nullable(),
      gender: modelGenderInputSchema.optional().nullable(),
      phone: modelStringInputSchema.optional().nullable(),
      address: modelStringInputSchema.optional().nullable(),
      city: modelStringInputSchema.optional().nullable(),
      state: modelStringInputSchema.optional().nullable(),
      country: modelStringInputSchema.optional().nullable(),
      zipCode: modelStringInputSchema.optional().nullable(),
      profileImage: modelStringInputSchema.optional().nullable(),
      isActive: modelBooleanInputSchema.optional().nullable(),
      isVerified: modelBooleanInputSchema.optional().nullable(),
      lastLogin: modelStringInputSchema.optional().nullable(),
      accountType: modelAccountTypeInputSchema.optional().nullable(),
      notificationPreference: modelNotificationPreferenceInputSchema
        .optional()
        .nullable(),
      languagePreference: modelStringInputSchema.optional().nullable(),
      currencyPreference: modelStringInputSchema.optional().nullable(),
      timezone: modelStringInputSchema.optional().nullable(),
      chatbotRequests: modelIntInputSchema.optional().nullable(),
      isInstantBookingAvailable: modelBooleanInputSchema.optional().nullable(),
      isEmailVerified: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      nicheServiceProvidersId: modelIDInputSchema.optional().nullable(),
      providerCurrentLocationId: modelIDInputSchema.optional().nullable(),
      providerTasksId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelAvailabilityFilterInputSchema: z.ZodSchema<ModelAvailabilityFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      startTime: modelStringInputSchema.optional().nullable(),
      endTime: modelStringInputSchema.optional().nullable(),
      avalabilityDate: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelAvailabilityFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelAvailabilityFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelAvailabilityFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      providerAvailabilityId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelProviderReviewFilterInputSchema: z.ZodSchema<ModelProviderReviewFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      providerID: modelIDInputSchema.optional().nullable(),
      userID: modelIDInputSchema.optional().nullable(),
      rating: modelIntInputSchema.optional().nullable(),
      comment: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderReviewFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelProviderReviewConnectionSchema = z.object({
  __typename: z.literal("ModelProviderReviewConnection"),
  items: z.array(providerReviewSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const modelCertificationFilterInputSchema: z.ZodSchema<ModelCertificationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      certificationName: modelStringInputSchema.optional().nullable(),
      issuedBy: modelStringInputSchema.optional().nullable(),
      validFrom: modelStringInputSchema.optional().nullable(),
      validUntil: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelCertificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelCertificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelCertificationFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      providerCertificationsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelQualificationFilterInputSchema: z.ZodSchema<ModelQualificationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      qualificationName: modelStringInputSchema.optional().nullable(),
      institution: modelStringInputSchema.optional().nullable(),
      yearObtained: modelIntInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelQualificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelQualificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelQualificationFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      providerQualificationsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelSpecializationFilterInputSchema: z.ZodSchema<ModelSpecializationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      specializationName: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelSpecializationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSpecializationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelSpecializationFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      providerSpecializationsId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelProviderHistoryFilterInputSchema: z.ZodSchema<ModelProviderHistoryFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      providerID: modelIDInputSchema.optional().nullable(),
      event: modelStringInputSchema.optional().nullable(),
      date: modelStringInputSchema.optional().nullable(),
      description: modelStringInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z
        .array(modelProviderHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelProviderHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelProviderHistoryFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      providerProviderHistoriesId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelUserFilterInputSchema: z.ZodSchema<ModelUserFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelIDInputSchema.optional().nullable(),
      email: modelStringInputSchema.optional().nullable(),
      password: modelStringInputSchema.optional().nullable(),
      firstName: modelStringInputSchema.optional().nullable(),
      lastName: modelStringInputSchema.optional().nullable(),
      dob: modelStringInputSchema.optional().nullable(),
      gender: modelGenderInputSchema.optional().nullable(),
      phone: modelStringInputSchema.optional().nullable(),
      address: modelStringInputSchema.optional().nullable(),
      city: modelStringInputSchema.optional().nullable(),
      state: modelStringInputSchema.optional().nullable(),
      country: modelStringInputSchema.optional().nullable(),
      zipCode: modelStringInputSchema.optional().nullable(),
      profileImage: modelStringInputSchema.optional().nullable(),
      isActive: modelBooleanInputSchema.optional().nullable(),
      isVerified: modelBooleanInputSchema.optional().nullable(),
      lastLogin: modelStringInputSchema.optional().nullable(),
      accountType: modelAccountTypeInputSchema.optional().nullable(),
      notificationPreference: modelNotificationPreferenceInputSchema
        .optional()
        .nullable(),
      languagePreference: modelStringInputSchema.optional().nullable(),
      currencyPreference: modelStringInputSchema.optional().nullable(),
      timezone: modelStringInputSchema.optional().nullable(),
      chatbotRequests: modelIntInputSchema.optional().nullable(),
      preferredContactTime: modelStringInputSchema.optional().nullable(),
      serviceInterestedIn: modelStringInputSchema.optional().nullable(),
      isEmailVerified: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      and: z.array(modelUserFilterInputSchema.nullable()).optional().nullable(),
      or: z.array(modelUserFilterInputSchema.nullable()).optional().nullable(),
      not: modelUserFilterInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      userWalletId: modelIDInputSchema.optional().nullable(),
      userCurentLocationId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionIDInputSchema = z.object({
  ne: z.string().optional().nullable(),
  eq: z.string().optional().nullable(),
  le: z.string().optional().nullable(),
  lt: z.string().optional().nullable(),
  ge: z.string().optional().nullable(),
  gt: z.string().optional().nullable(),
  contains: z.string().optional().nullable(),
  notContains: z.string().optional().nullable(),
  between: z.array(z.string().nullable()).optional().nullable(),
  beginsWith: z.string().optional().nullable(),
  in: z.array(z.string().nullable()).optional().nullable(),
  notIn: z.array(z.string().nullable()).optional().nullable(),
});

export const modelSubscriptionStringInputSchema = z.object({
  ne: z.string().optional().nullable(),
  eq: z.string().optional().nullable(),
  le: z.string().optional().nullable(),
  lt: z.string().optional().nullable(),
  ge: z.string().optional().nullable(),
  gt: z.string().optional().nullable(),
  contains: z.string().optional().nullable(),
  notContains: z.string().optional().nullable(),
  between: z.array(z.string().nullable()).optional().nullable(),
  beginsWith: z.string().optional().nullable(),
  in: z.array(z.string().nullable()).optional().nullable(),
  notIn: z.array(z.string().nullable()).optional().nullable(),
});

export const modelSubscriptionIntInputSchema = z.object({
  ne: z.number().optional().nullable(),
  eq: z.number().optional().nullable(),
  le: z.number().optional().nullable(),
  lt: z.number().optional().nullable(),
  ge: z.number().optional().nullable(),
  gt: z.number().optional().nullable(),
  between: z.array(z.number().nullable()).optional().nullable(),
  in: z.array(z.number().nullable()).optional().nullable(),
  notIn: z.array(z.number().nullable()).optional().nullable(),
});

export const modelSubscriptionTasksFilterInputSchema: z.ZodSchema<ModelSubscriptionTasksFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      taskName: modelSubscriptionStringInputSchema.optional().nullable(),
      taskTime: modelSubscriptionIntInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionTasksFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionTasksFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      tasksServiceId: modelSubscriptionIDInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionFloatInputSchema = z.object({
  ne: z.number().optional().nullable(),
  eq: z.number().optional().nullable(),
  le: z.number().optional().nullable(),
  lt: z.number().optional().nullable(),
  ge: z.number().optional().nullable(),
  gt: z.number().optional().nullable(),
  between: z.array(z.number().nullable()).optional().nullable(),
  in: z.array(z.number().nullable()).optional().nullable(),
  notIn: z.array(z.number().nullable()).optional().nullable(),
});

export const modelSubscriptionServicePromotionFilterInputSchema: z.ZodSchema<ModelSubscriptionServicePromotionFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      startDate: modelSubscriptionStringInputSchema.optional().nullable(),
      endDate: modelSubscriptionStringInputSchema.optional().nullable(),
      discountPercentage: modelSubscriptionFloatInputSchema
        .optional()
        .nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionServicePromotionFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionServicePromotionFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionProviderReportFilterInputSchema: z.ZodSchema<ModelSubscriptionProviderReportFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      dateReported: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionProviderReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionProviderReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionUserReportFilterInputSchema: z.ZodSchema<ModelSubscriptionUserReportFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      dateReported: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionUserReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionUserReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionUserInvoiceFilterInputSchema: z.ZodSchema<ModelSubscriptionUserInvoiceFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      amount: modelSubscriptionFloatInputSchema.optional().nullable(),
      dateIssued: modelSubscriptionStringInputSchema.optional().nullable(),
      dueDate: modelSubscriptionStringInputSchema.optional().nullable(),
      status: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionUserInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionUserInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionProviderBookmarkFilterInputSchema: z.ZodSchema<ModelSubscriptionProviderBookmarkFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      dateBookmarked: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionProviderBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionProviderBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionUserBookmarkFilterInputSchema: z.ZodSchema<ModelSubscriptionUserBookmarkFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      dateBookmarked: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionUserBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionUserBookmarkFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionProviderNotificationFilterInputSchema: z.ZodSchema<ModelSubscriptionProviderNotificationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      content: modelSubscriptionStringInputSchema.optional().nullable(),
      dateSent: modelSubscriptionStringInputSchema.optional().nullable(),
      status: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(
          modelSubscriptionProviderNotificationFilterInputSchema.nullable(),
        )
        .optional()
        .nullable(),
      or: z
        .array(
          modelSubscriptionProviderNotificationFilterInputSchema.nullable(),
        )
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionUserNotificationFilterInputSchema: z.ZodSchema<ModelSubscriptionUserNotificationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      content: modelSubscriptionStringInputSchema.optional().nullable(),
      dateSent: modelSubscriptionStringInputSchema.optional().nullable(),
      status: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionUserNotificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionUserNotificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionServiceDiscountFilterInputSchema: z.ZodSchema<ModelSubscriptionServiceDiscountFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      discountPercentage: modelSubscriptionFloatInputSchema
        .optional()
        .nullable(),
      startDate: modelSubscriptionStringInputSchema.optional().nullable(),
      endDate: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionServiceDiscountFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionServiceDiscountFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionBooleanInputSchema = z.object({
  ne: z.boolean().optional().nullable(),
  eq: z.boolean().optional().nullable(),
});

export const modelSubscriptionProviderAvailabilityFilterInputSchema: z.ZodSchema<ModelSubscriptionProviderAvailabilityFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      startDate: modelSubscriptionStringInputSchema.optional().nullable(),
      endDate: modelSubscriptionStringInputSchema.optional().nullable(),
      isScheduled: modelSubscriptionBooleanInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(
          modelSubscriptionProviderAvailabilityFilterInputSchema.nullable(),
        )
        .optional()
        .nullable(),
      or: z
        .array(
          modelSubscriptionProviderAvailabilityFilterInputSchema.nullable(),
        )
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionUserPreferenceFilterInputSchema: z.ZodSchema<ModelSubscriptionUserPreferenceFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      preferenceType: modelSubscriptionStringInputSchema.optional().nullable(),
      preferenceValue: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionUserPreferenceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionUserPreferenceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionProviderCertificationFilterInputSchema: z.ZodSchema<ModelSubscriptionProviderCertificationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      certificationName: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      issuedBy: modelSubscriptionStringInputSchema.optional().nullable(),
      validFrom: modelSubscriptionStringInputSchema.optional().nullable(),
      validUntil: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(
          modelSubscriptionProviderCertificationFilterInputSchema.nullable(),
        )
        .optional()
        .nullable(),
      or: z
        .array(
          modelSubscriptionProviderCertificationFilterInputSchema.nullable(),
        )
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionServiceVideoFilterInputSchema: z.ZodSchema<ModelSubscriptionServiceVideoFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      videoURL: modelSubscriptionStringInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionServiceVideoFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionServiceVideoFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionServiceImageFilterInputSchema: z.ZodSchema<ModelSubscriptionServiceImageFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      imageURL: modelSubscriptionStringInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionServiceImageFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionServiceImageFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionServiceReviewFilterInputSchema: z.ZodSchema<ModelSubscriptionServiceReviewFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      rating: modelSubscriptionIntInputSchema.optional().nullable(),
      comment: modelSubscriptionStringInputSchema.optional().nullable(),
      date: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionServiceReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionServiceReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionAIDiagnosticsFilterInputSchema: z.ZodSchema<ModelSubscriptionAIDiagnosticsFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      diagnosticData: modelSubscriptionStringInputSchema.optional().nullable(),
      date: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionAIDiagnosticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionAIDiagnosticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionCustomizationFilterInputSchema: z.ZodSchema<ModelSubscriptionCustomizationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      customizationType: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      customizationValue: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionCustomizationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionCustomizationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionExpenseFilterInputSchema: z.ZodSchema<ModelSubscriptionExpenseFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      amount: modelSubscriptionFloatInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      date: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionExpenseFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionExpenseFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionFavoriteProviderFilterInputSchema: z.ZodSchema<ModelSubscriptionFavoriteProviderFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      dateAdded: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionFavoriteProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionFavoriteProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionUserHistoryFilterInputSchema: z.ZodSchema<ModelSubscriptionUserHistoryFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      action: modelSubscriptionStringInputSchema.optional().nullable(),
      date: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionUserHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionUserHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionProviderAwardFilterInputSchema: z.ZodSchema<ModelSubscriptionProviderAwardFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      awardName: modelSubscriptionStringInputSchema.optional().nullable(),
      awardedBy: modelSubscriptionStringInputSchema.optional().nullable(),
      dateAwarded: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionProviderAwardFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionProviderAwardFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionReferralFilterInputSchema: z.ZodSchema<ModelSubscriptionReferralFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      dateReferred: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionReferralFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionReferralFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionTipFilterInputSchema: z.ZodSchema<ModelSubscriptionTipFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      amount: modelSubscriptionFloatInputSchema.optional().nullable(),
      date: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionTipFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionTipFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionPaymentMethodFilterInputSchema: z.ZodSchema<ModelSubscriptionPaymentMethodFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      cardNumber: modelSubscriptionStringInputSchema.optional().nullable(),
      expiryDate: modelSubscriptionStringInputSchema.optional().nullable(),
      cardType: modelSubscriptionStringInputSchema.optional().nullable(),
      stripeCustomerId: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      stripeCardId: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionPaymentMethodFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionPaymentMethodFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionInvoiceFilterInputSchema: z.ZodSchema<ModelSubscriptionInvoiceFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      amount: modelSubscriptionFloatInputSchema.optional().nullable(),
      dateIssued: modelSubscriptionStringInputSchema.optional().nullable(),
      dueDate: modelSubscriptionStringInputSchema.optional().nullable(),
      status: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionInvoiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      invoiceServicesId: modelSubscriptionIDInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionContractFilterInputSchema: z.ZodSchema<ModelSubscriptionContractFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      startDate: modelSubscriptionStringInputSchema.optional().nullable(),
      endDate: modelSubscriptionStringInputSchema.optional().nullable(),
      terms: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionContractFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionContractFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionNicheServiceFilterInputSchema: z.ZodSchema<ModelSubscriptionNicheServiceFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      serviceName: modelSubscriptionStringInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionNicheServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionNicheServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      nicheServiceProvidersId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    }),
  );

export const modelSubscriptionServicePackageFilterInputSchema: z.ZodSchema<ModelSubscriptionServicePackageFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      packageName: modelSubscriptionStringInputSchema.optional().nullable(),
      discount: modelSubscriptionFloatInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionServicePackageFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionServicePackageFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      servicePackageServicesId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    }),
  );

export const modelSubscriptionRewardFilterInputSchema: z.ZodSchema<ModelSubscriptionRewardFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      rewardName: modelSubscriptionStringInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      value: modelSubscriptionFloatInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionRewardFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionRewardFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      rewardReferralsId: modelSubscriptionIDInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionLoyaltyProgramFilterInputSchema: z.ZodSchema<ModelSubscriptionLoyaltyProgramFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      points: modelSubscriptionIntInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionLoyaltyProgramFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionLoyaltyProgramFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      loyaltyProgramRewardsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    }),
  );

export const modelSubscriptionVerificationFilterInputSchema: z.ZodSchema<ModelSubscriptionVerificationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      verificationCode: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      dateSent: modelSubscriptionStringInputSchema.optional().nullable(),
      status: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionVerificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionVerificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionAnalyticsFilterInputSchema: z.ZodSchema<ModelSubscriptionAnalyticsFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      userCount: modelSubscriptionIntInputSchema.optional().nullable(),
      providerCount: modelSubscriptionIntInputSchema.optional().nullable(),
      serviceCount: modelSubscriptionIntInputSchema.optional().nullable(),
      date: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionAnalyticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionAnalyticsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionPromoCodeFilterInputSchema: z.ZodSchema<ModelSubscriptionPromoCodeFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      code: modelSubscriptionStringInputSchema.optional().nullable(),
      discount: modelSubscriptionFloatInputSchema.optional().nullable(),
      validFrom: modelSubscriptionStringInputSchema.optional().nullable(),
      validUntil: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionPromoCodeFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionPromoCodeFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionReportFilterInputSchema: z.ZodSchema<ModelSubscriptionReportFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      reportedEntity: modelSubscriptionStringInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      dateReported: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionReportFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionJobTrackingFilterInputSchema: z.ZodSchema<ModelSubscriptionJobTrackingFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      status: modelSubscriptionStringInputSchema.optional().nullable(),
      startDate: modelSubscriptionStringInputSchema.optional().nullable(),
      endDate: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionJobTrackingFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionJobTrackingFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionAIChatLogFilterInputSchema: z.ZodSchema<ModelSubscriptionAIChatLogFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      message: modelSubscriptionStringInputSchema.optional().nullable(),
      response: modelSubscriptionStringInputSchema.optional().nullable(),
      date: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionAIChatLogFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionAIChatLogFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionAIChatBotFilterInputSchema: z.ZodSchema<ModelSubscriptionAIChatBotFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      name: modelSubscriptionStringInputSchema.optional().nullable(),
      version: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionAIChatBotFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionAIChatBotFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      aIChatBotDiagnosticsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      aIChatBotChatLogsId: modelSubscriptionIDInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionMainCategoryFilterInputSchema: z.ZodSchema<ModelSubscriptionMainCategoryFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      name: modelSubscriptionStringInputSchema.optional().nullable(),
      descrption: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionMainCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionMainCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      mainCategorySubCategoriesId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    }),
  );

export const modelSubscriptionSubCategoryFilterInputSchema: z.ZodSchema<ModelSubscriptionSubCategoryFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      name: modelSubscriptionStringInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionSubCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionSubCategoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      subCategoryServicesId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    }),
  );

export const modelSubscriptionPLMBRSubscriptionFilterInputSchema: z.ZodSchema<ModelSubscriptionPLMBRSubscriptionFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionPLMBRSubscriptionFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionPLMBRSubscriptionFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionUserSettingsFilterInputSchema: z.ZodSchema<ModelSubscriptionUserSettingsFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionUserSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionUserSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionProviderSettingsFilterInputSchema: z.ZodSchema<ModelSubscriptionProviderSettingsFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionProviderSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionProviderSettingsFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionPortfolioFilterInputSchema: z.ZodSchema<ModelSubscriptionPortfolioFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionPortfolioFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionPortfolioFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionServiceVariantFilterInputSchema: z.ZodSchema<ModelSubscriptionServiceVariantFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionServiceVariantFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionServiceVariantFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionServiceHighlightFilterInputSchema: z.ZodSchema<ModelSubscriptionServiceHighlightFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionServiceHighlightFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionServiceHighlightFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionServiceTagFilterInputSchema: z.ZodSchema<ModelSubscriptionServiceTagFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionServiceTagFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionServiceTagFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionServiceFAQFilterInputSchema: z.ZodSchema<ModelSubscriptionServiceFAQFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionServiceFAQFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionServiceFAQFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionFeedbackFilterInputSchema: z.ZodSchema<ModelSubscriptionFeedbackFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionFeedbackFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionFeedbackFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionEquipmentFilterInputSchema: z.ZodSchema<ModelSubscriptionEquipmentFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      providerID: modelSubscriptionIDInputSchema.optional().nullable(),
      name: modelSubscriptionStringInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      category: modelSubscriptionStringInputSchema.optional().nullable(),
      availabilityStatus: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      purchaseDate: modelSubscriptionStringInputSchema.optional().nullable(),
      maintenanceDate: modelSubscriptionStringInputSchema.optional().nullable(),
      image: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionEquipmentFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionEquipmentFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionWalletFilterInputSchema: z.ZodSchema<ModelSubscriptionWalletFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      ownerID: modelSubscriptionIDInputSchema.optional().nullable(),
      balance: modelSubscriptionFloatInputSchema.optional().nullable(),
      currency: modelSubscriptionStringInputSchema.optional().nullable(),
      lastUpdated: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionWalletFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionWalletFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      walletTransactionsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    }),
  );

export const modelSubscriptionTransactionFilterInputSchema: z.ZodSchema<ModelSubscriptionTransactionFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      amount: modelSubscriptionFloatInputSchema.optional().nullable(),
      type: modelSubscriptionStringInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      date: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionTransactionFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionTransactionFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionReviewFilterInputSchema: z.ZodSchema<ModelSubscriptionReviewFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      rating: modelSubscriptionIntInputSchema.optional().nullable(),
      comment: modelSubscriptionStringInputSchema.optional().nullable(),
      date: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      reviewResponseId: modelSubscriptionIDInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionReviewResponseFilterInputSchema: z.ZodSchema<ModelSubscriptionReviewResponseFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      responseText: modelSubscriptionStringInputSchema.optional().nullable(),
      responseDate: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionReviewResponseFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionReviewResponseFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      reviewResponseReviewId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    }),
  );

export const modelSubscriptionMessageThreadFilterInputSchema: z.ZodSchema<ModelSubscriptionMessageThreadFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      lastMessageDate: modelSubscriptionStringInputSchema.optional().nullable(),
      lastMessageContent: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      status: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionMessageThreadFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionMessageThreadFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      messageThreadMessagesId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    }),
  );

export const modelSubscriptionMessageContentFilterInputSchema: z.ZodSchema<ModelSubscriptionMessageContentFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      sender: modelSubscriptionStringInputSchema.optional().nullable(),
      content: modelSubscriptionStringInputSchema.optional().nullable(),
      timestamp: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionMessageContentFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionMessageContentFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionBookingFilterInputSchema: z.ZodSchema<ModelSubscriptionBookingFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      date: modelSubscriptionStringInputSchema.optional().nullable(),
      startTime: modelSubscriptionStringInputSchema.optional().nullable(),
      endTime: modelSubscriptionStringInputSchema.optional().nullable(),
      status: modelSubscriptionStringInputSchema.optional().nullable(),
      location: modelSubscriptionStringInputSchema.optional().nullable(),
      notes: modelSubscriptionStringInputSchema.optional().nullable(),
      price: modelSubscriptionFloatInputSchema.optional().nullable(),
      isInstantBooking: modelSubscriptionBooleanInputSchema
        .optional()
        .nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionBookingFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionBookingFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionTeamMemberFilterInputSchema: z.ZodSchema<ModelSubscriptionTeamMemberFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      name: modelSubscriptionStringInputSchema.optional().nullable(),
      role: modelSubscriptionStringInputSchema.optional().nullable(),
      jobSiteDuration: modelSubscriptionStringInputSchema.optional().nullable(),
      providerID: modelSubscriptionIDInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionTeamMemberFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionTeamMemberFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      teamMemberCommunicationLogId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      teamMemberAssignedJobsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      teamMemberCurrentLocationId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    }),
  );

export const modelSubscriptionLocationFilterInputSchema: z.ZodSchema<ModelSubscriptionLocationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      latitude: modelSubscriptionFloatInputSchema.optional().nullable(),
      longitude: modelSubscriptionFloatInputSchema.optional().nullable(),
      timestamp: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionLocationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionLocationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionMessageFilterInputSchema: z.ZodSchema<ModelSubscriptionMessageFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      sender: modelSubscriptionStringInputSchema.optional().nullable(),
      content: modelSubscriptionStringInputSchema.optional().nullable(),
      timestamp: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionMessageFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionMessageFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionJobFilterInputSchema: z.ZodSchema<ModelSubscriptionJobFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      location: modelSubscriptionStringInputSchema.optional().nullable(),
      startTime: modelSubscriptionStringInputSchema.optional().nullable(),
      endTime: modelSubscriptionStringInputSchema.optional().nullable(),
      status: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionJobFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionJobFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionServiceFilterInputSchema: z.ZodSchema<ModelSubscriptionServiceFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      name: modelSubscriptionStringInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      price_min: modelSubscriptionFloatInputSchema.optional().nullable(),
      duration: modelSubscriptionStringInputSchema.optional().nullable(),
      Materials: modelSubscriptionStringInputSchema.optional().nullable(),
      MaterialCosts: modelSubscriptionFloatInputSchema.optional().nullable(),
      BookingRequirements: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      price_max: modelSubscriptionFloatInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionServiceFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      serviceReviewsId: modelSubscriptionIDInputSchema.optional().nullable(),
      serviceBookingsId: modelSubscriptionIDInputSchema.optional().nullable(),
      serviceServicePromotionsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceProviderReportsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceUserReportsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceUserInvoicesId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceProviderBookmarksId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceUserBookmarksId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceProviderNotificationsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceUserNotificationsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceServiceDiscountsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceProviderAvailabilitiesId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceUserPreferencesId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceProviderCertificationsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceServiceVideosId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceServiceImagesId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceServiceReviewsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceAiDiagnosticsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceCustomizationsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceExpensesId: modelSubscriptionIDInputSchema.optional().nullable(),
      serviceFavoriteProvidersId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceUserHistoriesId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceProviderAwardsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceReferralsId: modelSubscriptionIDInputSchema.optional().nullable(),
      serviceContractsId: modelSubscriptionIDInputSchema.optional().nullable(),
      serviceJobTrackingsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      serviceTasksId: modelSubscriptionIDInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionProviderFilterInputSchema: z.ZodSchema<ModelSubscriptionProviderFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      email: modelSubscriptionStringInputSchema.optional().nullable(),
      password: modelSubscriptionStringInputSchema.optional().nullable(),
      firstName: modelSubscriptionStringInputSchema.optional().nullable(),
      lastName: modelSubscriptionStringInputSchema.optional().nullable(),
      dob: modelSubscriptionStringInputSchema.optional().nullable(),
      gender: modelSubscriptionStringInputSchema.optional().nullable(),
      phone: modelSubscriptionStringInputSchema.optional().nullable(),
      address: modelSubscriptionStringInputSchema.optional().nullable(),
      city: modelSubscriptionStringInputSchema.optional().nullable(),
      state: modelSubscriptionStringInputSchema.optional().nullable(),
      country: modelSubscriptionStringInputSchema.optional().nullable(),
      zipCode: modelSubscriptionStringInputSchema.optional().nullable(),
      profileImage: modelSubscriptionStringInputSchema.optional().nullable(),
      isActive: modelSubscriptionBooleanInputSchema.optional().nullable(),
      isVerified: modelSubscriptionBooleanInputSchema.optional().nullable(),
      lastLogin: modelSubscriptionStringInputSchema.optional().nullable(),
      accountType: modelSubscriptionStringInputSchema.optional().nullable(),
      notificationPreference: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      languagePreference: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      currencyPreference: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      timezone: modelSubscriptionStringInputSchema.optional().nullable(),
      chatbotRequests: modelSubscriptionIntInputSchema.optional().nullable(),
      isInstantBookingAvailable: modelSubscriptionBooleanInputSchema
        .optional()
        .nullable(),
      isEmailVerified: modelSubscriptionBooleanInputSchema
        .optional()
        .nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionProviderFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      providerServicesOfferedId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerTeamMembersId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerAvailabilityId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerReviewsId: modelSubscriptionIDInputSchema.optional().nullable(),
      providerCertificationsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerQualificationsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerSpecializationsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerProviderBookingsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerProviderMessagesId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerProviderContractsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerProviderInvoicesId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerProviderTipsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerProviderReferralsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerProviderHistoriesId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerProviderNotificationsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerProviderBookmarksId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerProviderReportsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerProviderAvailabilityId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerProviderCertificationId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerFavoriteProvidersId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerProviderAwardsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerJobTrackingId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerExpensesId: modelSubscriptionIDInputSchema.optional().nullable(),
      providerCurrentLocationId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      providerTasksId: modelSubscriptionIDInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionAvailabilityFilterInputSchema: z.ZodSchema<ModelSubscriptionAvailabilityFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      startTime: modelSubscriptionStringInputSchema.optional().nullable(),
      endTime: modelSubscriptionStringInputSchema.optional().nullable(),
      avalabilityDate: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionAvailabilityFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionAvailabilityFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionProviderReviewFilterInputSchema: z.ZodSchema<ModelSubscriptionProviderReviewFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      providerID: modelSubscriptionIDInputSchema.optional().nullable(),
      userID: modelSubscriptionIDInputSchema.optional().nullable(),
      rating: modelSubscriptionIntInputSchema.optional().nullable(),
      comment: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionProviderReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionProviderReviewFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionCertificationFilterInputSchema: z.ZodSchema<ModelSubscriptionCertificationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      certificationName: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      issuedBy: modelSubscriptionStringInputSchema.optional().nullable(),
      validFrom: modelSubscriptionStringInputSchema.optional().nullable(),
      validUntil: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionCertificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionCertificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionQualificationFilterInputSchema: z.ZodSchema<ModelSubscriptionQualificationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      qualificationName: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      institution: modelSubscriptionStringInputSchema.optional().nullable(),
      yearObtained: modelSubscriptionIntInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionQualificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionQualificationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionSpecializationFilterInputSchema: z.ZodSchema<ModelSubscriptionSpecializationFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      specializationName: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionSpecializationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionSpecializationFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionProviderHistoryFilterInputSchema: z.ZodSchema<ModelSubscriptionProviderHistoryFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      providerID: modelSubscriptionIDInputSchema.optional().nullable(),
      event: modelSubscriptionStringInputSchema.optional().nullable(),
      date: modelSubscriptionStringInputSchema.optional().nullable(),
      description: modelSubscriptionStringInputSchema.optional().nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionProviderHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionProviderHistoryFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
    }),
  );

export const modelSubscriptionUserFilterInputSchema: z.ZodSchema<ModelSubscriptionUserFilterInput> =
  z.lazy(() =>
    z.object({
      id: modelSubscriptionIDInputSchema.optional().nullable(),
      email: modelSubscriptionStringInputSchema.optional().nullable(),
      password: modelSubscriptionStringInputSchema.optional().nullable(),
      firstName: modelSubscriptionStringInputSchema.optional().nullable(),
      lastName: modelSubscriptionStringInputSchema.optional().nullable(),
      dob: modelSubscriptionStringInputSchema.optional().nullable(),
      gender: modelSubscriptionStringInputSchema.optional().nullable(),
      phone: modelSubscriptionStringInputSchema.optional().nullable(),
      address: modelSubscriptionStringInputSchema.optional().nullable(),
      city: modelSubscriptionStringInputSchema.optional().nullable(),
      state: modelSubscriptionStringInputSchema.optional().nullable(),
      country: modelSubscriptionStringInputSchema.optional().nullable(),
      zipCode: modelSubscriptionStringInputSchema.optional().nullable(),
      profileImage: modelSubscriptionStringInputSchema.optional().nullable(),
      isActive: modelSubscriptionBooleanInputSchema.optional().nullable(),
      isVerified: modelSubscriptionBooleanInputSchema.optional().nullable(),
      lastLogin: modelSubscriptionStringInputSchema.optional().nullable(),
      accountType: modelSubscriptionStringInputSchema.optional().nullable(),
      notificationPreference: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      languagePreference: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      currencyPreference: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      timezone: modelSubscriptionStringInputSchema.optional().nullable(),
      chatbotRequests: modelSubscriptionIntInputSchema.optional().nullable(),
      preferredContactTime: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      serviceInterestedIn: modelSubscriptionStringInputSchema
        .optional()
        .nullable(),
      isEmailVerified: modelSubscriptionBooleanInputSchema
        .optional()
        .nullable(),
      createdAt: modelSubscriptionStringInputSchema.optional().nullable(),
      updatedAt: modelSubscriptionStringInputSchema.optional().nullable(),
      and: z
        .array(modelSubscriptionUserFilterInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelSubscriptionUserFilterInputSchema.nullable())
        .optional()
        .nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      userBookingsId: modelSubscriptionIDInputSchema.optional().nullable(),
      userMessagesId: modelSubscriptionIDInputSchema.optional().nullable(),
      userReviewsId: modelSubscriptionIDInputSchema.optional().nullable(),
      userTransactionsId: modelSubscriptionIDInputSchema.optional().nullable(),
      userFeedbacksId: modelSubscriptionIDInputSchema.optional().nullable(),
      userSubscriptionsId: modelSubscriptionIDInputSchema.optional().nullable(),
      userAiChatBotsId: modelSubscriptionIDInputSchema.optional().nullable(),
      userAiChatLogsId: modelSubscriptionIDInputSchema.optional().nullable(),
      userJobTrackingsId: modelSubscriptionIDInputSchema.optional().nullable(),
      userReportsId: modelSubscriptionIDInputSchema.optional().nullable(),
      userLoyaltyProgramsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      userRewardsId: modelSubscriptionIDInputSchema.optional().nullable(),
      userContractsId: modelSubscriptionIDInputSchema.optional().nullable(),
      userInvoicesId: modelSubscriptionIDInputSchema.optional().nullable(),
      userPaymentMethodsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      userTipsId: modelSubscriptionIDInputSchema.optional().nullable(),
      userReferralsId: modelSubscriptionIDInputSchema.optional().nullable(),
      userUserHistoriesId: modelSubscriptionIDInputSchema.optional().nullable(),
      userFavoriteProvidersId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      userExpensesId: modelSubscriptionIDInputSchema.optional().nullable(),
      userCustomizationsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      userServiceReviewsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      userUserNotificationsId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      userUserBookmarksId: modelSubscriptionIDInputSchema.optional().nullable(),
      userUserInvoicesId: modelSubscriptionIDInputSchema.optional().nullable(),
      userUserReportsId: modelSubscriptionIDInputSchema.optional().nullable(),
      userProviderBookmarksId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      userUserPreferenceId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
      userVerificationsId: modelSubscriptionIDInputSchema.optional().nullable(),
      userWalletId: modelSubscriptionIDInputSchema.optional().nullable(),
      userCurentLocationId: modelSubscriptionIDInputSchema
        .optional()
        .nullable(),
    }),
  );

export const modelTasksConditionInputSchema: z.ZodSchema<ModelTasksConditionInput> =
  z.lazy(() =>
    z.object({
      taskName: modelStringInputSchema.optional().nullable(),
      taskTime: modelIntInputSchema.optional().nullable(),
      and: z
        .array(modelTasksConditionInputSchema.nullable())
        .optional()
        .nullable(),
      or: z
        .array(modelTasksConditionInputSchema.nullable())
        .optional()
        .nullable(),
      not: modelTasksConditionInputSchema.optional().nullable(),
      _deleted: modelBooleanInputSchema.optional().nullable(),
      createdAt: modelStringInputSchema.optional().nullable(),
      updatedAt: modelStringInputSchema.optional().nullable(),
      tasksServiceId: modelIDInputSchema.optional().nullable(),
    }),
  );

export const createTasksMutationSchema = z.object({
  createTasks: z
    .object({
      __typename: z.literal("Tasks"),
      id: z.string(),
      taskName: z.string(),
      taskTime: z.number(),
      Service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      tasksServiceId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateTasksMutationVariablesSchema = z.object({
  input: updateTasksInputSchema,
  condition: modelTasksConditionInputSchema.optional().nullable(),
});

export const updateTasksMutationSchema = z.object({
  updateTasks: z
    .object({
      __typename: z.literal("Tasks"),
      id: z.string(),
      taskName: z.string(),
      taskTime: z.number(),
      Service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      tasksServiceId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteTasksMutationVariablesSchema = z.object({
  input: deleteTasksInputSchema,
  condition: modelTasksConditionInputSchema.optional().nullable(),
});

export const deleteTasksMutationSchema = z.object({
  deleteTasks: z
    .object({
      __typename: z.literal("Tasks"),
      id: z.string(),
      taskName: z.string(),
      taskTime: z.number(),
      Service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      tasksServiceId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createServicePromotionMutationVariablesSchema = z.object({
  input: createServicePromotionInputSchema,
  condition: modelServicePromotionConditionInputSchema.optional().nullable(),
});

export const createServicePromotionMutationSchema = z.object({
  createServicePromotion: z
    .object({
      __typename: z.literal("ServicePromotion"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      startDate: z.string(),
      endDate: z.string(),
      discountPercentage: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServicePromotionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateServicePromotionMutationVariablesSchema = z.object({
  input: updateServicePromotionInputSchema,
  condition: modelServicePromotionConditionInputSchema.optional().nullable(),
});

export const updateServicePromotionMutationSchema = z.object({
  updateServicePromotion: z
    .object({
      __typename: z.literal("ServicePromotion"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      startDate: z.string(),
      endDate: z.string(),
      discountPercentage: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServicePromotionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteServicePromotionMutationVariablesSchema = z.object({
  input: deleteServicePromotionInputSchema,
  condition: modelServicePromotionConditionInputSchema.optional().nullable(),
});

export const deleteServicePromotionMutationSchema = z.object({
  deleteServicePromotion: z
    .object({
      __typename: z.literal("ServicePromotion"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      startDate: z.string(),
      endDate: z.string(),
      discountPercentage: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServicePromotionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createProviderReportMutationVariablesSchema = z.object({
  input: createProviderReportInputSchema,
  condition: modelProviderReportConditionInputSchema.optional().nullable(),
});

export const createProviderReportMutationSchema = z.object({
  createProviderReport: z
    .object({
      __typename: z.literal("ProviderReport"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderReportsId: z.string().optional().nullable(),
      providerProviderReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateProviderReportMutationVariablesSchema = z.object({
  input: updateProviderReportInputSchema,
  condition: modelProviderReportConditionInputSchema.optional().nullable(),
});

export const updateProviderReportMutationSchema = z.object({
  updateProviderReport: z
    .object({
      __typename: z.literal("ProviderReport"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderReportsId: z.string().optional().nullable(),
      providerProviderReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteProviderReportMutationVariablesSchema = z.object({
  input: deleteProviderReportInputSchema,
  condition: modelProviderReportConditionInputSchema.optional().nullable(),
});

export const deleteProviderReportMutationSchema = z.object({
  deleteProviderReport: z
    .object({
      __typename: z.literal("ProviderReport"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderReportsId: z.string().optional().nullable(),
      providerProviderReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createUserReportMutationVariablesSchema = z.object({
  input: createUserReportInputSchema,
  condition: modelUserReportConditionInputSchema.optional().nullable(),
});

export const createUserReportMutationSchema = z.object({
  createUserReport: z
    .object({
      __typename: z.literal("UserReport"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserReportsId: z.string().optional().nullable(),
      userUserReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateUserReportMutationVariablesSchema = z.object({
  input: updateUserReportInputSchema,
  condition: modelUserReportConditionInputSchema.optional().nullable(),
});

export const updateUserReportMutationSchema = z.object({
  updateUserReport: z
    .object({
      __typename: z.literal("UserReport"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserReportsId: z.string().optional().nullable(),
      userUserReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteUserReportMutationVariablesSchema = z.object({
  input: deleteUserReportInputSchema,
  condition: modelUserReportConditionInputSchema.optional().nullable(),
});

export const deleteUserReportMutationSchema = z.object({
  deleteUserReport: z
    .object({
      __typename: z.literal("UserReport"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserReportsId: z.string().optional().nullable(),
      userUserReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createUserInvoiceMutationVariablesSchema = z.object({
  input: createUserInvoiceInputSchema,
  condition: modelUserInvoiceConditionInputSchema.optional().nullable(),
});

export const createUserInvoiceMutationSchema = z.object({
  createUserInvoice: z
    .object({
      __typename: z.literal("UserInvoice"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      dateIssued: z.string(),
      dueDate: z.string(),
      status: invoiceStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserInvoicesId: z.string().optional().nullable(),
      userUserInvoicesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateUserInvoiceMutationVariablesSchema = z.object({
  input: updateUserInvoiceInputSchema,
  condition: modelUserInvoiceConditionInputSchema.optional().nullable(),
});

export const updateUserInvoiceMutationSchema = z.object({
  updateUserInvoice: z
    .object({
      __typename: z.literal("UserInvoice"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      dateIssued: z.string(),
      dueDate: z.string(),
      status: invoiceStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserInvoicesId: z.string().optional().nullable(),
      userUserInvoicesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteUserInvoiceMutationVariablesSchema = z.object({
  input: deleteUserInvoiceInputSchema,
  condition: modelUserInvoiceConditionInputSchema.optional().nullable(),
});

export const deleteUserInvoiceMutationSchema = z.object({
  deleteUserInvoice: z
    .object({
      __typename: z.literal("UserInvoice"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      dateIssued: z.string(),
      dueDate: z.string(),
      status: invoiceStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserInvoicesId: z.string().optional().nullable(),
      userUserInvoicesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createProviderBookmarkMutationVariablesSchema = z.object({
  input: createProviderBookmarkInputSchema,
  condition: modelProviderBookmarkConditionInputSchema.optional().nullable(),
});

export const createProviderBookmarkMutationSchema = z.object({
  createProviderBookmark: z
    .object({
      __typename: z.literal("ProviderBookmark"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderBookmarksId: z.string().optional().nullable(),
      providerProviderBookmarksId: z.string().optional().nullable(),
      userProviderBookmarksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateProviderBookmarkMutationVariablesSchema = z.object({
  input: updateProviderBookmarkInputSchema,
  condition: modelProviderBookmarkConditionInputSchema.optional().nullable(),
});

export const updateProviderBookmarkMutationSchema = z.object({
  updateProviderBookmark: z
    .object({
      __typename: z.literal("ProviderBookmark"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderBookmarksId: z.string().optional().nullable(),
      providerProviderBookmarksId: z.string().optional().nullable(),
      userProviderBookmarksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteProviderBookmarkMutationVariablesSchema = z.object({
  input: deleteProviderBookmarkInputSchema,
  condition: modelProviderBookmarkConditionInputSchema.optional().nullable(),
});

export const deleteProviderBookmarkMutationSchema = z.object({
  deleteProviderBookmark: z
    .object({
      __typename: z.literal("ProviderBookmark"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderBookmarksId: z.string().optional().nullable(),
      providerProviderBookmarksId: z.string().optional().nullable(),
      userProviderBookmarksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createUserBookmarkMutationVariablesSchema = z.object({
  input: createUserBookmarkInputSchema,
  condition: modelUserBookmarkConditionInputSchema.optional().nullable(),
});

export const createUserBookmarkMutationSchema = z.object({
  createUserBookmark: z
    .object({
      __typename: z.literal("UserBookmark"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserBookmarksId: z.string().optional().nullable(),
      userUserBookmarksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateUserBookmarkMutationVariablesSchema = z.object({
  input: updateUserBookmarkInputSchema,
  condition: modelUserBookmarkConditionInputSchema.optional().nullable(),
});

export const updateUserBookmarkMutationSchema = z.object({
  updateUserBookmark: z
    .object({
      __typename: z.literal("UserBookmark"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserBookmarksId: z.string().optional().nullable(),
      userUserBookmarksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteUserBookmarkMutationVariablesSchema = z.object({
  input: deleteUserBookmarkInputSchema,
  condition: modelUserBookmarkConditionInputSchema.optional().nullable(),
});

export const deleteUserBookmarkMutationSchema = z.object({
  deleteUserBookmark: z
    .object({
      __typename: z.literal("UserBookmark"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserBookmarksId: z.string().optional().nullable(),
      userUserBookmarksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createProviderNotificationMutationVariablesSchema = z.object({
  input: createProviderNotificationInputSchema,
  condition: modelProviderNotificationConditionInputSchema
    .optional()
    .nullable(),
});

export const createProviderNotificationMutationSchema = z.object({
  createProviderNotification: z
    .object({
      __typename: z.literal("ProviderNotification"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderNotificationsId: z.string().optional().nullable(),
      providerProviderNotificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateProviderNotificationMutationVariablesSchema = z.object({
  input: updateProviderNotificationInputSchema,
  condition: modelProviderNotificationConditionInputSchema
    .optional()
    .nullable(),
});

export const updateProviderNotificationMutationSchema = z.object({
  updateProviderNotification: z
    .object({
      __typename: z.literal("ProviderNotification"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderNotificationsId: z.string().optional().nullable(),
      providerProviderNotificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteProviderNotificationMutationVariablesSchema = z.object({
  input: deleteProviderNotificationInputSchema,
  condition: modelProviderNotificationConditionInputSchema
    .optional()
    .nullable(),
});

export const deleteProviderNotificationMutationSchema = z.object({
  deleteProviderNotification: z
    .object({
      __typename: z.literal("ProviderNotification"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderNotificationsId: z.string().optional().nullable(),
      providerProviderNotificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createUserNotificationMutationVariablesSchema = z.object({
  input: createUserNotificationInputSchema,
  condition: modelUserNotificationConditionInputSchema.optional().nullable(),
});

export const createUserNotificationMutationSchema = z.object({
  createUserNotification: z
    .object({
      __typename: z.literal("UserNotification"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserNotificationsId: z.string().optional().nullable(),
      userUserNotificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateUserNotificationMutationVariablesSchema = z.object({
  input: updateUserNotificationInputSchema,
  condition: modelUserNotificationConditionInputSchema.optional().nullable(),
});

export const updateUserNotificationMutationSchema = z.object({
  updateUserNotification: z
    .object({
      __typename: z.literal("UserNotification"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserNotificationsId: z.string().optional().nullable(),
      userUserNotificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteUserNotificationMutationVariablesSchema = z.object({
  input: deleteUserNotificationInputSchema,
  condition: modelUserNotificationConditionInputSchema.optional().nullable(),
});

export const deleteUserNotificationMutationSchema = z.object({
  deleteUserNotification: z
    .object({
      __typename: z.literal("UserNotification"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserNotificationsId: z.string().optional().nullable(),
      userUserNotificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createServiceDiscountMutationVariablesSchema = z.object({
  input: createServiceDiscountInputSchema,
  condition: modelServiceDiscountConditionInputSchema.optional().nullable(),
});

export const createServiceDiscountMutationSchema = z.object({
  createServiceDiscount: z
    .object({
      __typename: z.literal("ServiceDiscount"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      discountPercentage: z.number(),
      startDate: z.string(),
      endDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceDiscountsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateServiceDiscountMutationVariablesSchema = z.object({
  input: updateServiceDiscountInputSchema,
  condition: modelServiceDiscountConditionInputSchema.optional().nullable(),
});

export const updateServiceDiscountMutationSchema = z.object({
  updateServiceDiscount: z
    .object({
      __typename: z.literal("ServiceDiscount"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      discountPercentage: z.number(),
      startDate: z.string(),
      endDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceDiscountsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteServiceDiscountMutationVariablesSchema = z.object({
  input: deleteServiceDiscountInputSchema,
  condition: modelServiceDiscountConditionInputSchema.optional().nullable(),
});

export const deleteServiceDiscountMutationSchema = z.object({
  deleteServiceDiscount: z
    .object({
      __typename: z.literal("ServiceDiscount"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      discountPercentage: z.number(),
      startDate: z.string(),
      endDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceDiscountsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createProviderAvailabilityMutationVariablesSchema = z.object({
  input: createProviderAvailabilityInputSchema,
  condition: modelProviderAvailabilityConditionInputSchema
    .optional()
    .nullable(),
});

export const createProviderAvailabilityMutationSchema = z.object({
  createProviderAvailability: z
    .object({
      __typename: z.literal("ProviderAvailability"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      startDate: z.string(),
      endDate: z.string(),
      isScheduled: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAvailabilitiesId: z.string().optional().nullable(),
      providerProviderAvailabilityId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateProviderAvailabilityMutationVariablesSchema = z.object({
  input: updateProviderAvailabilityInputSchema,
  condition: modelProviderAvailabilityConditionInputSchema
    .optional()
    .nullable(),
});

export const updateProviderAvailabilityMutationSchema = z.object({
  updateProviderAvailability: z
    .object({
      __typename: z.literal("ProviderAvailability"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      startDate: z.string(),
      endDate: z.string(),
      isScheduled: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAvailabilitiesId: z.string().optional().nullable(),
      providerProviderAvailabilityId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteProviderAvailabilityMutationVariablesSchema = z.object({
  input: deleteProviderAvailabilityInputSchema,
  condition: modelProviderAvailabilityConditionInputSchema
    .optional()
    .nullable(),
});

export const deleteProviderAvailabilityMutationSchema = z.object({
  deleteProviderAvailability: z
    .object({
      __typename: z.literal("ProviderAvailability"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      startDate: z.string(),
      endDate: z.string(),
      isScheduled: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAvailabilitiesId: z.string().optional().nullable(),
      providerProviderAvailabilityId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createUserPreferenceMutationVariablesSchema = z.object({
  input: createUserPreferenceInputSchema,
  condition: modelUserPreferenceConditionInputSchema.optional().nullable(),
});

export const createUserPreferenceMutationSchema = z.object({
  createUserPreference: z
    .object({
      __typename: z.literal("UserPreference"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      preferenceType: z.string(),
      preferenceValue: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserPreferencesId: z.string().optional().nullable(),
      userUserPreferenceId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateUserPreferenceMutationVariablesSchema = z.object({
  input: updateUserPreferenceInputSchema,
  condition: modelUserPreferenceConditionInputSchema.optional().nullable(),
});

export const updateUserPreferenceMutationSchema = z.object({
  updateUserPreference: z
    .object({
      __typename: z.literal("UserPreference"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      preferenceType: z.string(),
      preferenceValue: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserPreferencesId: z.string().optional().nullable(),
      userUserPreferenceId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteUserPreferenceMutationVariablesSchema = z.object({
  input: deleteUserPreferenceInputSchema,
  condition: modelUserPreferenceConditionInputSchema.optional().nullable(),
});

export const deleteUserPreferenceMutationSchema = z.object({
  deleteUserPreference: z
    .object({
      __typename: z.literal("UserPreference"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      preferenceType: z.string(),
      preferenceValue: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserPreferencesId: z.string().optional().nullable(),
      userUserPreferenceId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createProviderCertificationMutationVariablesSchema = z.object({
  input: createProviderCertificationInputSchema,
  condition: modelProviderCertificationConditionInputSchema
    .optional()
    .nullable(),
});

export const createProviderCertificationMutationSchema = z.object({
  createProviderCertification: z
    .object({
      __typename: z.literal("ProviderCertification"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      certificationName: z.string(),
      issuedBy: z.string(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderCertificationsId: z.string().optional().nullable(),
      providerProviderCertificationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateProviderCertificationMutationVariablesSchema = z.object({
  input: updateProviderCertificationInputSchema,
  condition: modelProviderCertificationConditionInputSchema
    .optional()
    .nullable(),
});

export const updateProviderCertificationMutationSchema = z.object({
  updateProviderCertification: z
    .object({
      __typename: z.literal("ProviderCertification"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      certificationName: z.string(),
      issuedBy: z.string(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderCertificationsId: z.string().optional().nullable(),
      providerProviderCertificationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteProviderCertificationMutationVariablesSchema = z.object({
  input: deleteProviderCertificationInputSchema,
  condition: modelProviderCertificationConditionInputSchema
    .optional()
    .nullable(),
});

export const deleteProviderCertificationMutationSchema = z.object({
  deleteProviderCertification: z
    .object({
      __typename: z.literal("ProviderCertification"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      certificationName: z.string(),
      issuedBy: z.string(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderCertificationsId: z.string().optional().nullable(),
      providerProviderCertificationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createServiceVideoMutationVariablesSchema = z.object({
  input: createServiceVideoInputSchema,
  condition: modelServiceVideoConditionInputSchema.optional().nullable(),
});

export const createServiceVideoMutationSchema = z.object({
  createServiceVideo: z
    .object({
      __typename: z.literal("ServiceVideo"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      videoURL: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceVideosId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateServiceVideoMutationVariablesSchema = z.object({
  input: updateServiceVideoInputSchema,
  condition: modelServiceVideoConditionInputSchema.optional().nullable(),
});

export const updateServiceVideoMutationSchema = z.object({
  updateServiceVideo: z
    .object({
      __typename: z.literal("ServiceVideo"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      videoURL: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceVideosId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteServiceVideoMutationVariablesSchema = z.object({
  input: deleteServiceVideoInputSchema,
  condition: modelServiceVideoConditionInputSchema.optional().nullable(),
});

export const deleteServiceVideoMutationSchema = z.object({
  deleteServiceVideo: z
    .object({
      __typename: z.literal("ServiceVideo"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      videoURL: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceVideosId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createServiceImageMutationVariablesSchema = z.object({
  input: createServiceImageInputSchema,
  condition: modelServiceImageConditionInputSchema.optional().nullable(),
});

export const createServiceImageMutationSchema = z.object({
  createServiceImage: z
    .object({
      __typename: z.literal("ServiceImage"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      imageURL: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceImagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateServiceImageMutationVariablesSchema = z.object({
  input: updateServiceImageInputSchema,
  condition: modelServiceImageConditionInputSchema.optional().nullable(),
});

export const updateServiceImageMutationSchema = z.object({
  updateServiceImage: z
    .object({
      __typename: z.literal("ServiceImage"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      imageURL: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceImagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteServiceImageMutationVariablesSchema = z.object({
  input: deleteServiceImageInputSchema,
  condition: modelServiceImageConditionInputSchema.optional().nullable(),
});

export const deleteServiceImageMutationSchema = z.object({
  deleteServiceImage: z
    .object({
      __typename: z.literal("ServiceImage"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      imageURL: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceImagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createServiceReviewMutationVariablesSchema = z.object({
  input: createServiceReviewInputSchema,
  condition: modelServiceReviewConditionInputSchema.optional().nullable(),
});

export const createServiceReviewMutationSchema = z.object({
  createServiceReview: z
    .object({
      __typename: z.literal("ServiceReview"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      rating: z.number(),
      comment: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceReviewsId: z.string().optional().nullable(),
      userServiceReviewsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateServiceReviewMutationVariablesSchema = z.object({
  input: updateServiceReviewInputSchema,
  condition: modelServiceReviewConditionInputSchema.optional().nullable(),
});

export const updateServiceReviewMutationSchema = z.object({
  updateServiceReview: z
    .object({
      __typename: z.literal("ServiceReview"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      rating: z.number(),
      comment: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceReviewsId: z.string().optional().nullable(),
      userServiceReviewsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteServiceReviewMutationVariablesSchema = z.object({
  input: deleteServiceReviewInputSchema,
  condition: modelServiceReviewConditionInputSchema.optional().nullable(),
});

export const deleteServiceReviewMutationSchema = z.object({
  deleteServiceReview: z
    .object({
      __typename: z.literal("ServiceReview"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      rating: z.number(),
      comment: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceReviewsId: z.string().optional().nullable(),
      userServiceReviewsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createAIDiagnosticsMutationVariablesSchema = z.object({
  input: createAIDiagnosticsInputSchema,
  condition: modelAIDiagnosticsConditionInputSchema.optional().nullable(),
});

export const createAIDiagnosticsMutationSchema = z.object({
  createAIDiagnostics: z
    .object({
      __typename: z.literal("AIDiagnostics"),
      id: z.string(),
      aiChatBot: z
        .object({
          __typename: z.literal("AIChatBot"),
          id: z.string(),
          name: z.string(),
          version: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userAiChatBotsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      diagnosticData: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      aIChatBotDiagnosticsId: z.string().optional().nullable(),
      serviceAiDiagnosticsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateAIDiagnosticsMutationVariablesSchema = z.object({
  input: updateAIDiagnosticsInputSchema,
  condition: modelAIDiagnosticsConditionInputSchema.optional().nullable(),
});

export const updateAIDiagnosticsMutationSchema = z.object({
  updateAIDiagnostics: z
    .object({
      __typename: z.literal("AIDiagnostics"),
      id: z.string(),
      aiChatBot: z
        .object({
          __typename: z.literal("AIChatBot"),
          id: z.string(),
          name: z.string(),
          version: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userAiChatBotsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      diagnosticData: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      aIChatBotDiagnosticsId: z.string().optional().nullable(),
      serviceAiDiagnosticsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteAIDiagnosticsMutationVariablesSchema = z.object({
  input: deleteAIDiagnosticsInputSchema,
  condition: modelAIDiagnosticsConditionInputSchema.optional().nullable(),
});

export const deleteAIDiagnosticsMutationSchema = z.object({
  deleteAIDiagnostics: z
    .object({
      __typename: z.literal("AIDiagnostics"),
      id: z.string(),
      aiChatBot: z
        .object({
          __typename: z.literal("AIChatBot"),
          id: z.string(),
          name: z.string(),
          version: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userAiChatBotsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      diagnosticData: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      aIChatBotDiagnosticsId: z.string().optional().nullable(),
      serviceAiDiagnosticsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createCustomizationMutationVariablesSchema = z.object({
  input: createCustomizationInputSchema,
  condition: modelCustomizationConditionInputSchema.optional().nullable(),
});

export const createCustomizationMutationSchema = z.object({
  createCustomization: z
    .object({
      __typename: z.literal("Customization"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizationType: z.string(),
      customizationValue: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceCustomizationsId: z.string().optional().nullable(),
      userCustomizationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateCustomizationMutationVariablesSchema = z.object({
  input: updateCustomizationInputSchema,
  condition: modelCustomizationConditionInputSchema.optional().nullable(),
});

export const updateCustomizationMutationSchema = z.object({
  updateCustomization: z
    .object({
      __typename: z.literal("Customization"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizationType: z.string(),
      customizationValue: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceCustomizationsId: z.string().optional().nullable(),
      userCustomizationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteCustomizationMutationVariablesSchema = z.object({
  input: deleteCustomizationInputSchema,
  condition: modelCustomizationConditionInputSchema.optional().nullable(),
});

export const deleteCustomizationMutationSchema = z.object({
  deleteCustomization: z
    .object({
      __typename: z.literal("Customization"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizationType: z.string(),
      customizationValue: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceCustomizationsId: z.string().optional().nullable(),
      userCustomizationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createExpenseMutationVariablesSchema = z.object({
  input: createExpenseInputSchema,
  condition: modelExpenseConditionInputSchema.optional().nullable(),
});

export const createExpenseMutationSchema = z.object({
  createExpense: z
    .object({
      __typename: z.literal("Expense"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      description: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceExpensesId: z.string().optional().nullable(),
      providerExpensesId: z.string().optional().nullable(),
      userExpensesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateExpenseMutationVariablesSchema = z.object({
  input: updateExpenseInputSchema,
  condition: modelExpenseConditionInputSchema.optional().nullable(),
});

export const updateExpenseMutationSchema = z.object({
  updateExpense: z
    .object({
      __typename: z.literal("Expense"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      description: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceExpensesId: z.string().optional().nullable(),
      providerExpensesId: z.string().optional().nullable(),
      userExpensesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteExpenseMutationVariablesSchema = z.object({
  input: deleteExpenseInputSchema,
  condition: modelExpenseConditionInputSchema.optional().nullable(),
});

export const deleteExpenseMutationSchema = z.object({
  deleteExpense: z
    .object({
      __typename: z.literal("Expense"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      description: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceExpensesId: z.string().optional().nullable(),
      providerExpensesId: z.string().optional().nullable(),
      userExpensesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createFavoriteProviderMutationVariablesSchema = z.object({
  input: createFavoriteProviderInputSchema,
  condition: modelFavoriteProviderConditionInputSchema.optional().nullable(),
});

export const createFavoriteProviderMutationSchema = z.object({
  createFavoriteProvider: z
    .object({
      __typename: z.literal("FavoriteProvider"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateAdded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceFavoriteProvidersId: z.string().optional().nullable(),
      providerFavoriteProvidersId: z.string().optional().nullable(),
      userFavoriteProvidersId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateFavoriteProviderMutationVariablesSchema = z.object({
  input: updateFavoriteProviderInputSchema,
  condition: modelFavoriteProviderConditionInputSchema.optional().nullable(),
});

export const updateFavoriteProviderMutationSchema = z.object({
  updateFavoriteProvider: z
    .object({
      __typename: z.literal("FavoriteProvider"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateAdded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceFavoriteProvidersId: z.string().optional().nullable(),
      providerFavoriteProvidersId: z.string().optional().nullable(),
      userFavoriteProvidersId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteFavoriteProviderMutationVariablesSchema = z.object({
  input: deleteFavoriteProviderInputSchema,
  condition: modelFavoriteProviderConditionInputSchema.optional().nullable(),
});

export const deleteFavoriteProviderMutationSchema = z.object({
  deleteFavoriteProvider: z
    .object({
      __typename: z.literal("FavoriteProvider"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateAdded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceFavoriteProvidersId: z.string().optional().nullable(),
      providerFavoriteProvidersId: z.string().optional().nullable(),
      userFavoriteProvidersId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createUserHistoryMutationVariablesSchema = z.object({
  input: createUserHistoryInputSchema,
  condition: modelUserHistoryConditionInputSchema.optional().nullable(),
});

export const createUserHistoryMutationSchema = z.object({
  createUserHistory: z
    .object({
      __typename: z.literal("UserHistory"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      action: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserHistoriesId: z.string().optional().nullable(),
      userUserHistoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateUserHistoryMutationVariablesSchema = z.object({
  input: updateUserHistoryInputSchema,
  condition: modelUserHistoryConditionInputSchema.optional().nullable(),
});

export const updateUserHistoryMutationSchema = z.object({
  updateUserHistory: z
    .object({
      __typename: z.literal("UserHistory"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      action: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserHistoriesId: z.string().optional().nullable(),
      userUserHistoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteUserHistoryMutationVariablesSchema = z.object({
  input: deleteUserHistoryInputSchema,
  condition: modelUserHistoryConditionInputSchema.optional().nullable(),
});

export const deleteUserHistoryMutationSchema = z.object({
  deleteUserHistory: z
    .object({
      __typename: z.literal("UserHistory"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      action: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserHistoriesId: z.string().optional().nullable(),
      userUserHistoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createProviderAwardMutationVariablesSchema = z.object({
  input: createProviderAwardInputSchema,
  condition: modelProviderAwardConditionInputSchema.optional().nullable(),
});

export const createProviderAwardMutationSchema = z.object({
  createProviderAward: z
    .object({
      __typename: z.literal("ProviderAward"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      awardName: z.string(),
      awardedBy: z.string(),
      dateAwarded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAwardsId: z.string().optional().nullable(),
      providerProviderAwardsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateProviderAwardMutationVariablesSchema = z.object({
  input: updateProviderAwardInputSchema,
  condition: modelProviderAwardConditionInputSchema.optional().nullable(),
});

export const updateProviderAwardMutationSchema = z.object({
  updateProviderAward: z
    .object({
      __typename: z.literal("ProviderAward"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      awardName: z.string(),
      awardedBy: z.string(),
      dateAwarded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAwardsId: z.string().optional().nullable(),
      providerProviderAwardsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteProviderAwardMutationVariablesSchema = z.object({
  input: deleteProviderAwardInputSchema,
  condition: modelProviderAwardConditionInputSchema.optional().nullable(),
});

export const deleteProviderAwardMutationSchema = z.object({
  deleteProviderAward: z
    .object({
      __typename: z.literal("ProviderAward"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      awardName: z.string(),
      awardedBy: z.string(),
      dateAwarded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAwardsId: z.string().optional().nullable(),
      providerProviderAwardsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createReferralMutationVariablesSchema = z.object({
  input: createReferralInputSchema,
  condition: modelReferralConditionInputSchema.optional().nullable(),
});

export const createReferralMutationSchema = z.object({
  createReferral: z
    .object({
      __typename: z.literal("Referral"),
      id: z.string(),
      referrer: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      referred: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateReferred: z.string(),
      reward: z
        .object({
          __typename: z.literal("Reward"),
          id: z.string(),
          rewardName: z.string(),
          description: z.string(),
          value: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          loyaltyProgramRewardsId: z.string().optional().nullable(),
          userRewardsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      rewardReferralsId: z.string().optional().nullable(),
      serviceReferralsId: z.string().optional().nullable(),
      providerProviderReferralsId: z.string().optional().nullable(),
      userReferralsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateReferralMutationVariablesSchema = z.object({
  input: updateReferralInputSchema,
  condition: modelReferralConditionInputSchema.optional().nullable(),
});

export const updateReferralMutationSchema = z.object({
  updateReferral: z
    .object({
      __typename: z.literal("Referral"),
      id: z.string(),
      referrer: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      referred: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateReferred: z.string(),
      reward: z
        .object({
          __typename: z.literal("Reward"),
          id: z.string(),
          rewardName: z.string(),
          description: z.string(),
          value: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          loyaltyProgramRewardsId: z.string().optional().nullable(),
          userRewardsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      rewardReferralsId: z.string().optional().nullable(),
      serviceReferralsId: z.string().optional().nullable(),
      providerProviderReferralsId: z.string().optional().nullable(),
      userReferralsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteReferralMutationVariablesSchema = z.object({
  input: deleteReferralInputSchema,
  condition: modelReferralConditionInputSchema.optional().nullable(),
});

export const deleteReferralMutationSchema = z.object({
  deleteReferral: z
    .object({
      __typename: z.literal("Referral"),
      id: z.string(),
      referrer: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      referred: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateReferred: z.string(),
      reward: z
        .object({
          __typename: z.literal("Reward"),
          id: z.string(),
          rewardName: z.string(),
          description: z.string(),
          value: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          loyaltyProgramRewardsId: z.string().optional().nullable(),
          userRewardsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      rewardReferralsId: z.string().optional().nullable(),
      serviceReferralsId: z.string().optional().nullable(),
      providerProviderReferralsId: z.string().optional().nullable(),
      userReferralsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createTipMutationVariablesSchema = z.object({
  input: createTipInputSchema,
  condition: modelTipConditionInputSchema.optional().nullable(),
});

export const createTipMutationSchema = z.object({
  createTip: z
    .object({
      __typename: z.literal("Tip"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderTipsId: z.string().optional().nullable(),
      userTipsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateTipMutationVariablesSchema = z.object({
  input: updateTipInputSchema,
  condition: modelTipConditionInputSchema.optional().nullable(),
});

export const updateTipMutationSchema = z.object({
  updateTip: z
    .object({
      __typename: z.literal("Tip"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderTipsId: z.string().optional().nullable(),
      userTipsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteTipMutationVariablesSchema = z.object({
  input: deleteTipInputSchema,
  condition: modelTipConditionInputSchema.optional().nullable(),
});

export const deleteTipMutationSchema = z.object({
  deleteTip: z
    .object({
      __typename: z.literal("Tip"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderTipsId: z.string().optional().nullable(),
      userTipsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createPaymentMethodMutationVariablesSchema = z.object({
  input: createPaymentMethodInputSchema,
  condition: modelPaymentMethodConditionInputSchema.optional().nullable(),
});

export const createPaymentMethodMutationSchema = z.object({
  createPaymentMethod: z
    .object({
      __typename: z.literal("PaymentMethod"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      cardNumber: z.string(),
      expiryDate: z.string(),
      cardType: cardTypeSchema.optional().nullable(),
      stripeCustomerId: z.string().optional().nullable(),
      stripeCardId: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userPaymentMethodsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updatePaymentMethodMutationVariablesSchema = z.object({
  input: updatePaymentMethodInputSchema,
  condition: modelPaymentMethodConditionInputSchema.optional().nullable(),
});

export const updatePaymentMethodMutationSchema = z.object({
  updatePaymentMethod: z
    .object({
      __typename: z.literal("PaymentMethod"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      cardNumber: z.string(),
      expiryDate: z.string(),
      cardType: cardTypeSchema.optional().nullable(),
      stripeCustomerId: z.string().optional().nullable(),
      stripeCardId: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userPaymentMethodsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deletePaymentMethodMutationVariablesSchema = z.object({
  input: deletePaymentMethodInputSchema,
  condition: modelPaymentMethodConditionInputSchema.optional().nullable(),
});

export const deletePaymentMethodMutationSchema = z.object({
  deletePaymentMethod: z
    .object({
      __typename: z.literal("PaymentMethod"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      cardNumber: z.string(),
      expiryDate: z.string(),
      cardType: cardTypeSchema.optional().nullable(),
      stripeCustomerId: z.string().optional().nullable(),
      stripeCardId: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userPaymentMethodsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createInvoiceMutationVariablesSchema = z.object({
  input: createInvoiceInputSchema,
  condition: modelInvoiceConditionInputSchema.optional().nullable(),
});

export const createInvoiceMutationSchema = z.object({
  createInvoice: z
    .object({
      __typename: z.literal("Invoice"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      dateIssued: z.string(),
      dueDate: z.string(),
      status: invoiceStatusSchema.optional().nullable(),
      services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderInvoicesId: z.string().optional().nullable(),
      userInvoicesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateInvoiceMutationVariablesSchema = z.object({
  input: updateInvoiceInputSchema,
  condition: modelInvoiceConditionInputSchema.optional().nullable(),
});

export const updateInvoiceMutationSchema = z.object({
  updateInvoice: z
    .object({
      __typename: z.literal("Invoice"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      dateIssued: z.string(),
      dueDate: z.string(),
      status: invoiceStatusSchema.optional().nullable(),
      services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderInvoicesId: z.string().optional().nullable(),
      userInvoicesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteInvoiceMutationVariablesSchema = z.object({
  input: deleteInvoiceInputSchema,
  condition: modelInvoiceConditionInputSchema.optional().nullable(),
});

export const deleteInvoiceMutationSchema = z.object({
  deleteInvoice: z
    .object({
      __typename: z.literal("Invoice"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      dateIssued: z.string(),
      dueDate: z.string(),
      status: invoiceStatusSchema.optional().nullable(),
      services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderInvoicesId: z.string().optional().nullable(),
      userInvoicesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createContractMutationVariablesSchema = z.object({
  input: createContractInputSchema,
  condition: modelContractConditionInputSchema.optional().nullable(),
});

export const createContractMutationSchema = z.object({
  createContract: z
    .object({
      __typename: z.literal("Contract"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      startDate: z.string(),
      endDate: z.string(),
      terms: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceContractsId: z.string().optional().nullable(),
      providerProviderContractsId: z.string().optional().nullable(),
      userContractsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateContractMutationVariablesSchema = z.object({
  input: updateContractInputSchema,
  condition: modelContractConditionInputSchema.optional().nullable(),
});

export const updateContractMutationSchema = z.object({
  updateContract: z
    .object({
      __typename: z.literal("Contract"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      startDate: z.string(),
      endDate: z.string(),
      terms: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceContractsId: z.string().optional().nullable(),
      providerProviderContractsId: z.string().optional().nullable(),
      userContractsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteContractMutationVariablesSchema = z.object({
  input: deleteContractInputSchema,
  condition: modelContractConditionInputSchema.optional().nullable(),
});

export const deleteContractMutationSchema = z.object({
  deleteContract: z
    .object({
      __typename: z.literal("Contract"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      startDate: z.string(),
      endDate: z.string(),
      terms: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceContractsId: z.string().optional().nullable(),
      providerProviderContractsId: z.string().optional().nullable(),
      userContractsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createNicheServiceMutationVariablesSchema = z.object({
  input: createNicheServiceInputSchema,
  condition: modelNicheServiceConditionInputSchema.optional().nullable(),
});

export const createNicheServiceMutationSchema = z.object({
  createNicheService: z
    .object({
      __typename: z.literal("NicheService"),
      id: z.string(),
      serviceName: z.string(),
      description: z.string(),
      providers: z
        .object({
          __typename: z.literal("ModelProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updateNicheServiceMutationVariablesSchema = z.object({
  input: updateNicheServiceInputSchema,
  condition: modelNicheServiceConditionInputSchema.optional().nullable(),
});

export const updateNicheServiceMutationSchema = z.object({
  updateNicheService: z
    .object({
      __typename: z.literal("NicheService"),
      id: z.string(),
      serviceName: z.string(),
      description: z.string(),
      providers: z
        .object({
          __typename: z.literal("ModelProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deleteNicheServiceMutationVariablesSchema = z.object({
  input: deleteNicheServiceInputSchema,
  condition: modelNicheServiceConditionInputSchema.optional().nullable(),
});

export const deleteNicheServiceMutationSchema = z.object({
  deleteNicheService: z
    .object({
      __typename: z.literal("NicheService"),
      id: z.string(),
      serviceName: z.string(),
      description: z.string(),
      providers: z
        .object({
          __typename: z.literal("ModelProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createServicePackageMutationVariablesSchema = z.object({
  input: createServicePackageInputSchema,
  condition: modelServicePackageConditionInputSchema.optional().nullable(),
});

export const createServicePackageMutationSchema = z.object({
  createServicePackage: z
    .object({
      __typename: z.literal("ServicePackage"),
      id: z.string(),
      packageName: z.string(),
      services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      discount: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updateServicePackageMutationVariablesSchema = z.object({
  input: updateServicePackageInputSchema,
  condition: modelServicePackageConditionInputSchema.optional().nullable(),
});

export const updateServicePackageMutationSchema = z.object({
  updateServicePackage: z
    .object({
      __typename: z.literal("ServicePackage"),
      id: z.string(),
      packageName: z.string(),
      services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      discount: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deleteServicePackageMutationVariablesSchema = z.object({
  input: deleteServicePackageInputSchema,
  condition: modelServicePackageConditionInputSchema.optional().nullable(),
});

export const deleteServicePackageMutationSchema = z.object({
  deleteServicePackage: z
    .object({
      __typename: z.literal("ServicePackage"),
      id: z.string(),
      packageName: z.string(),
      services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      discount: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createRewardMutationVariablesSchema = z.object({
  input: createRewardInputSchema,
  condition: modelRewardConditionInputSchema.optional().nullable(),
});

export const createRewardMutationSchema = z.object({
  createReward: z
    .object({
      __typename: z.literal("Reward"),
      id: z.string(),
      rewardName: z.string(),
      description: z.string(),
      value: z.number(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      loyaltyProgramRewardsId: z.string().optional().nullable(),
      userRewardsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateRewardMutationVariablesSchema = z.object({
  input: updateRewardInputSchema,
  condition: modelRewardConditionInputSchema.optional().nullable(),
});

export const updateRewardMutationSchema = z.object({
  updateReward: z
    .object({
      __typename: z.literal("Reward"),
      id: z.string(),
      rewardName: z.string(),
      description: z.string(),
      value: z.number(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      loyaltyProgramRewardsId: z.string().optional().nullable(),
      userRewardsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteRewardMutationVariablesSchema = z.object({
  input: deleteRewardInputSchema,
  condition: modelRewardConditionInputSchema.optional().nullable(),
});

export const deleteRewardMutationSchema = z.object({
  deleteReward: z
    .object({
      __typename: z.literal("Reward"),
      id: z.string(),
      rewardName: z.string(),
      description: z.string(),
      value: z.number(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      loyaltyProgramRewardsId: z.string().optional().nullable(),
      userRewardsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createLoyaltyProgramMutationVariablesSchema = z.object({
  input: createLoyaltyProgramInputSchema,
  condition: modelLoyaltyProgramConditionInputSchema.optional().nullable(),
});

export const createLoyaltyProgramMutationSchema = z.object({
  createLoyaltyProgram: z
    .object({
      __typename: z.literal("LoyaltyProgram"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      points: z.number(),
      rewards: z
        .object({
          __typename: z.literal("ModelRewardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userLoyaltyProgramsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateLoyaltyProgramMutationVariablesSchema = z.object({
  input: updateLoyaltyProgramInputSchema,
  condition: modelLoyaltyProgramConditionInputSchema.optional().nullable(),
});

export const updateLoyaltyProgramMutationSchema = z.object({
  updateLoyaltyProgram: z
    .object({
      __typename: z.literal("LoyaltyProgram"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      points: z.number(),
      rewards: z
        .object({
          __typename: z.literal("ModelRewardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userLoyaltyProgramsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteLoyaltyProgramMutationVariablesSchema = z.object({
  input: deleteLoyaltyProgramInputSchema,
  condition: modelLoyaltyProgramConditionInputSchema.optional().nullable(),
});

export const deleteLoyaltyProgramMutationSchema = z.object({
  deleteLoyaltyProgram: z
    .object({
      __typename: z.literal("LoyaltyProgram"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      points: z.number(),
      rewards: z
        .object({
          __typename: z.literal("ModelRewardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userLoyaltyProgramsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createVerificationMutationVariablesSchema = z.object({
  input: createVerificationInputSchema,
  condition: modelVerificationConditionInputSchema.optional().nullable(),
});

export const createVerificationMutationSchema = z.object({
  createVerification: z
    .object({
      __typename: z.literal("Verification"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      verificationCode: z.string(),
      dateSent: z.string(),
      status: verificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userVerificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateVerificationMutationVariablesSchema = z.object({
  input: updateVerificationInputSchema,
  condition: modelVerificationConditionInputSchema.optional().nullable(),
});

export const updateVerificationMutationSchema = z.object({
  updateVerification: z
    .object({
      __typename: z.literal("Verification"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      verificationCode: z.string(),
      dateSent: z.string(),
      status: verificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userVerificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteVerificationMutationVariablesSchema = z.object({
  input: deleteVerificationInputSchema,
  condition: modelVerificationConditionInputSchema.optional().nullable(),
});

export const deleteVerificationMutationSchema = z.object({
  deleteVerification: z
    .object({
      __typename: z.literal("Verification"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      verificationCode: z.string(),
      dateSent: z.string(),
      status: verificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userVerificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createAnalyticsMutationVariablesSchema = z.object({
  input: createAnalyticsInputSchema,
  condition: modelAnalyticsConditionInputSchema.optional().nullable(),
});

export const createAnalyticsMutationSchema = z.object({
  createAnalytics: z
    .object({
      __typename: z.literal("Analytics"),
      id: z.string(),
      userCount: z.number(),
      providerCount: z.number(),
      serviceCount: z.number(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updateAnalyticsMutationVariablesSchema = z.object({
  input: updateAnalyticsInputSchema,
  condition: modelAnalyticsConditionInputSchema.optional().nullable(),
});

export const updateAnalyticsMutationSchema = z.object({
  updateAnalytics: z
    .object({
      __typename: z.literal("Analytics"),
      id: z.string(),
      userCount: z.number(),
      providerCount: z.number(),
      serviceCount: z.number(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deleteAnalyticsMutationVariablesSchema = z.object({
  input: deleteAnalyticsInputSchema,
  condition: modelAnalyticsConditionInputSchema.optional().nullable(),
});

export const deleteAnalyticsMutationSchema = z.object({
  deleteAnalytics: z
    .object({
      __typename: z.literal("Analytics"),
      id: z.string(),
      userCount: z.number(),
      providerCount: z.number(),
      serviceCount: z.number(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createPromoCodeMutationVariablesSchema = z.object({
  input: createPromoCodeInputSchema,
  condition: modelPromoCodeConditionInputSchema.optional().nullable(),
});

export const createPromoCodeMutationSchema = z.object({
  createPromoCode: z
    .object({
      __typename: z.literal("PromoCode"),
      id: z.string(),
      code: z.string(),
      discount: z.number(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updatePromoCodeMutationVariablesSchema = z.object({
  input: updatePromoCodeInputSchema,
  condition: modelPromoCodeConditionInputSchema.optional().nullable(),
});

export const updatePromoCodeMutationSchema = z.object({
  updatePromoCode: z
    .object({
      __typename: z.literal("PromoCode"),
      id: z.string(),
      code: z.string(),
      discount: z.number(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deletePromoCodeMutationVariablesSchema = z.object({
  input: deletePromoCodeInputSchema,
  condition: modelPromoCodeConditionInputSchema.optional().nullable(),
});

export const deletePromoCodeMutationSchema = z.object({
  deletePromoCode: z
    .object({
      __typename: z.literal("PromoCode"),
      id: z.string(),
      code: z.string(),
      discount: z.number(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createReportMutationVariablesSchema = z.object({
  input: createReportInputSchema,
  condition: modelReportConditionInputSchema.optional().nullable(),
});

export const createReportMutationSchema = z.object({
  createReport: z
    .object({
      __typename: z.literal("Report"),
      id: z.string(),
      reporter: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      reportedEntity: z.string(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateReportMutationVariablesSchema = z.object({
  input: updateReportInputSchema,
  condition: modelReportConditionInputSchema.optional().nullable(),
});

export const updateReportMutationSchema = z.object({
  updateReport: z
    .object({
      __typename: z.literal("Report"),
      id: z.string(),
      reporter: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      reportedEntity: z.string(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteReportMutationVariablesSchema = z.object({
  input: deleteReportInputSchema,
  condition: modelReportConditionInputSchema.optional().nullable(),
});

export const deleteReportMutationSchema = z.object({
  deleteReport: z
    .object({
      __typename: z.literal("Report"),
      id: z.string(),
      reporter: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      reportedEntity: z.string(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createJobTrackingMutationVariablesSchema = z.object({
  input: createJobTrackingInputSchema,
  condition: modelJobTrackingConditionInputSchema.optional().nullable(),
});

export const createJobTrackingMutationSchema = z.object({
  createJobTracking: z
    .object({
      __typename: z.literal("JobTracking"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      status: jobStatusSchema.optional().nullable(),
      startDate: z.string(),
      endDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceJobTrackingsId: z.string().optional().nullable(),
      providerJobTrackingId: z.string().optional().nullable(),
      userJobTrackingsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateJobTrackingMutationVariablesSchema = z.object({
  input: updateJobTrackingInputSchema,
  condition: modelJobTrackingConditionInputSchema.optional().nullable(),
});

export const updateJobTrackingMutationSchema = z.object({
  updateJobTracking: z
    .object({
      __typename: z.literal("JobTracking"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      status: jobStatusSchema.optional().nullable(),
      startDate: z.string(),
      endDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceJobTrackingsId: z.string().optional().nullable(),
      providerJobTrackingId: z.string().optional().nullable(),
      userJobTrackingsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteJobTrackingMutationVariablesSchema = z.object({
  input: deleteJobTrackingInputSchema,
  condition: modelJobTrackingConditionInputSchema.optional().nullable(),
});

export const deleteJobTrackingMutationSchema = z.object({
  deleteJobTracking: z
    .object({
      __typename: z.literal("JobTracking"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      status: jobStatusSchema.optional().nullable(),
      startDate: z.string(),
      endDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceJobTrackingsId: z.string().optional().nullable(),
      providerJobTrackingId: z.string().optional().nullable(),
      userJobTrackingsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createAIChatLogMutationVariablesSchema = z.object({
  input: createAIChatLogInputSchema,
  condition: modelAIChatLogConditionInputSchema.optional().nullable(),
});

export const createAIChatLogMutationSchema = z.object({
  createAIChatLog: z
    .object({
      __typename: z.literal("AIChatLog"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatBot: z
        .object({
          __typename: z.literal("AIChatBot"),
          id: z.string(),
          name: z.string(),
          version: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userAiChatBotsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      message: z.string(),
      response: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      aIChatBotChatLogsId: z.string().optional().nullable(),
      userAiChatLogsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateAIChatLogMutationVariablesSchema = z.object({
  input: updateAIChatLogInputSchema,
  condition: modelAIChatLogConditionInputSchema.optional().nullable(),
});

export const updateAIChatLogMutationSchema = z.object({
  updateAIChatLog: z
    .object({
      __typename: z.literal("AIChatLog"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatBot: z
        .object({
          __typename: z.literal("AIChatBot"),
          id: z.string(),
          name: z.string(),
          version: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userAiChatBotsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      message: z.string(),
      response: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      aIChatBotChatLogsId: z.string().optional().nullable(),
      userAiChatLogsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteAIChatLogMutationVariablesSchema = z.object({
  input: deleteAIChatLogInputSchema,
  condition: modelAIChatLogConditionInputSchema.optional().nullable(),
});

export const deleteAIChatLogMutationSchema = z.object({
  deleteAIChatLog: z
    .object({
      __typename: z.literal("AIChatLog"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatBot: z
        .object({
          __typename: z.literal("AIChatBot"),
          id: z.string(),
          name: z.string(),
          version: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userAiChatBotsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      message: z.string(),
      response: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      aIChatBotChatLogsId: z.string().optional().nullable(),
      userAiChatLogsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createAIChatBotMutationVariablesSchema = z.object({
  input: createAIChatBotInputSchema,
  condition: modelAIChatBotConditionInputSchema.optional().nullable(),
});

export const createAIChatBotMutationSchema = z.object({
  createAIChatBot: z
    .object({
      __typename: z.literal("AIChatBot"),
      id: z.string(),
      name: z.string(),
      version: z.string(),
      diagnostics: z
        .object({
          __typename: z.literal("ModelAIDiagnosticsConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      chatLogs: z
        .object({
          __typename: z.literal("ModelAIChatLogConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userAiChatBotsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateAIChatBotMutationVariablesSchema = z.object({
  input: updateAIChatBotInputSchema,
  condition: modelAIChatBotConditionInputSchema.optional().nullable(),
});

export const updateAIChatBotMutationSchema = z.object({
  updateAIChatBot: z
    .object({
      __typename: z.literal("AIChatBot"),
      id: z.string(),
      name: z.string(),
      version: z.string(),
      diagnostics: z
        .object({
          __typename: z.literal("ModelAIDiagnosticsConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      chatLogs: z
        .object({
          __typename: z.literal("ModelAIChatLogConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userAiChatBotsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteAIChatBotMutationVariablesSchema = z.object({
  input: deleteAIChatBotInputSchema,
  condition: modelAIChatBotConditionInputSchema.optional().nullable(),
});

export const deleteAIChatBotMutationSchema = z.object({
  deleteAIChatBot: z
    .object({
      __typename: z.literal("AIChatBot"),
      id: z.string(),
      name: z.string(),
      version: z.string(),
      diagnostics: z
        .object({
          __typename: z.literal("ModelAIDiagnosticsConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      chatLogs: z
        .object({
          __typename: z.literal("ModelAIChatLogConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userAiChatBotsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createMainCategoryMutationVariablesSchema = z.object({
  input: createMainCategoryInputSchema,
  condition: modelMainCategoryConditionInputSchema.optional().nullable(),
});

export const createMainCategoryMutationSchema = z.object({
  createMainCategory: z
    .object({
      __typename: z.literal("MainCategory"),
      id: z.string(),
      name: z.string(),
      descrption: z.string().optional().nullable(),
      SubCategories: z
        .object({
          __typename: z.literal("ModelSubCategoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updateMainCategoryMutationVariablesSchema = z.object({
  input: updateMainCategoryInputSchema,
  condition: modelMainCategoryConditionInputSchema.optional().nullable(),
});

export const updateMainCategoryMutationSchema = z.object({
  updateMainCategory: z
    .object({
      __typename: z.literal("MainCategory"),
      id: z.string(),
      name: z.string(),
      descrption: z.string().optional().nullable(),
      SubCategories: z
        .object({
          __typename: z.literal("ModelSubCategoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deleteMainCategoryMutationVariablesSchema = z.object({
  input: deleteMainCategoryInputSchema,
  condition: modelMainCategoryConditionInputSchema.optional().nullable(),
});

export const deleteMainCategoryMutationSchema = z.object({
  deleteMainCategory: z
    .object({
      __typename: z.literal("MainCategory"),
      id: z.string(),
      name: z.string(),
      descrption: z.string().optional().nullable(),
      SubCategories: z
        .object({
          __typename: z.literal("ModelSubCategoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createSubCategoryMutationVariablesSchema = z.object({
  input: createSubCategoryInputSchema,
  condition: modelSubCategoryConditionInputSchema.optional().nullable(),
});

export const createSubCategoryMutationSchema = z.object({
  createSubCategory: z
    .object({
      __typename: z.literal("SubCategory"),
      id: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      MainCategory: z
        .object({
          __typename: z.literal("MainCategory"),
          id: z.string(),
          name: z.string(),
          descrption: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      Services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      mainCategorySubCategoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateSubCategoryMutationVariablesSchema = z.object({
  input: updateSubCategoryInputSchema,
  condition: modelSubCategoryConditionInputSchema.optional().nullable(),
});

export const updateSubCategoryMutationSchema = z.object({
  updateSubCategory: z
    .object({
      __typename: z.literal("SubCategory"),
      id: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      MainCategory: z
        .object({
          __typename: z.literal("MainCategory"),
          id: z.string(),
          name: z.string(),
          descrption: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      Services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      mainCategorySubCategoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteSubCategoryMutationVariablesSchema = z.object({
  input: deleteSubCategoryInputSchema,
  condition: modelSubCategoryConditionInputSchema.optional().nullable(),
});

export const deleteSubCategoryMutationSchema = z.object({
  deleteSubCategory: z
    .object({
      __typename: z.literal("SubCategory"),
      id: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      MainCategory: z
        .object({
          __typename: z.literal("MainCategory"),
          id: z.string(),
          name: z.string(),
          descrption: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      Services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      mainCategorySubCategoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createPLMBRSubscriptionMutationVariablesSchema = z.object({
  input: createPLMBRSubscriptionInputSchema,
  condition: modelPLMBRSubscriptionConditionInputSchema.optional().nullable(),
});

export const createPLMBRSubscriptionMutationSchema = z.object({
  createPLMBRSubscription: z
    .object({
      __typename: z.literal("PLMBRSubscription"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userSubscriptionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updatePLMBRSubscriptionMutationVariablesSchema = z.object({
  input: updatePLMBRSubscriptionInputSchema,
  condition: modelPLMBRSubscriptionConditionInputSchema.optional().nullable(),
});

export const updatePLMBRSubscriptionMutationSchema = z.object({
  updatePLMBRSubscription: z
    .object({
      __typename: z.literal("PLMBRSubscription"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userSubscriptionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deletePLMBRSubscriptionMutationVariablesSchema = z.object({
  input: deletePLMBRSubscriptionInputSchema,
  condition: modelPLMBRSubscriptionConditionInputSchema.optional().nullable(),
});

export const deletePLMBRSubscriptionMutationSchema = z.object({
  deletePLMBRSubscription: z
    .object({
      __typename: z.literal("PLMBRSubscription"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userSubscriptionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createUserSettingsMutationVariablesSchema = z.object({
  input: createUserSettingsInputSchema,
  condition: modelUserSettingsConditionInputSchema.optional().nullable(),
});

export const createUserSettingsMutationSchema = z.object({
  createUserSettings: z
    .object({
      __typename: z.literal("UserSettings"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updateUserSettingsMutationVariablesSchema = z.object({
  input: updateUserSettingsInputSchema,
  condition: modelUserSettingsConditionInputSchema.optional().nullable(),
});

export const updateUserSettingsMutationSchema = z.object({
  updateUserSettings: z
    .object({
      __typename: z.literal("UserSettings"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deleteUserSettingsMutationVariablesSchema = z.object({
  input: deleteUserSettingsInputSchema,
  condition: modelUserSettingsConditionInputSchema.optional().nullable(),
});

export const deleteUserSettingsMutationSchema = z.object({
  deleteUserSettings: z
    .object({
      __typename: z.literal("UserSettings"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createProviderSettingsMutationVariablesSchema = z.object({
  input: createProviderSettingsInputSchema,
  condition: modelProviderSettingsConditionInputSchema.optional().nullable(),
});

export const createProviderSettingsMutationSchema = z.object({
  createProviderSettings: z
    .object({
      __typename: z.literal("ProviderSettings"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updateProviderSettingsMutationVariablesSchema = z.object({
  input: updateProviderSettingsInputSchema,
  condition: modelProviderSettingsConditionInputSchema.optional().nullable(),
});

export const updateProviderSettingsMutationSchema = z.object({
  updateProviderSettings: z
    .object({
      __typename: z.literal("ProviderSettings"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deleteProviderSettingsMutationVariablesSchema = z.object({
  input: deleteProviderSettingsInputSchema,
  condition: modelProviderSettingsConditionInputSchema.optional().nullable(),
});

export const deleteProviderSettingsMutationSchema = z.object({
  deleteProviderSettings: z
    .object({
      __typename: z.literal("ProviderSettings"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createPortfolioMutationVariablesSchema = z.object({
  input: createPortfolioInputSchema,
  condition: modelPortfolioConditionInputSchema.optional().nullable(),
});

export const createPortfolioMutationSchema = z.object({
  createPortfolio: z
    .object({
      __typename: z.literal("Portfolio"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updatePortfolioMutationVariablesSchema = z.object({
  input: updatePortfolioInputSchema,
  condition: modelPortfolioConditionInputSchema.optional().nullable(),
});

export const updatePortfolioMutationSchema = z.object({
  updatePortfolio: z
    .object({
      __typename: z.literal("Portfolio"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deletePortfolioMutationVariablesSchema = z.object({
  input: deletePortfolioInputSchema,
  condition: modelPortfolioConditionInputSchema.optional().nullable(),
});

export const deletePortfolioMutationSchema = z.object({
  deletePortfolio: z
    .object({
      __typename: z.literal("Portfolio"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createServiceVariantMutationVariablesSchema = z.object({
  input: createServiceVariantInputSchema,
  condition: modelServiceVariantConditionInputSchema.optional().nullable(),
});

export const createServiceVariantMutationSchema = z.object({
  createServiceVariant: z
    .object({
      __typename: z.literal("ServiceVariant"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updateServiceVariantMutationVariablesSchema = z.object({
  input: updateServiceVariantInputSchema,
  condition: modelServiceVariantConditionInputSchema.optional().nullable(),
});

export const updateServiceVariantMutationSchema = z.object({
  updateServiceVariant: z
    .object({
      __typename: z.literal("ServiceVariant"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deleteServiceVariantMutationVariablesSchema = z.object({
  input: deleteServiceVariantInputSchema,
  condition: modelServiceVariantConditionInputSchema.optional().nullable(),
});

export const deleteServiceVariantMutationSchema = z.object({
  deleteServiceVariant: z
    .object({
      __typename: z.literal("ServiceVariant"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createServiceHighlightMutationVariablesSchema = z.object({
  input: createServiceHighlightInputSchema,
  condition: modelServiceHighlightConditionInputSchema.optional().nullable(),
});

export const createServiceHighlightMutationSchema = z.object({
  createServiceHighlight: z
    .object({
      __typename: z.literal("ServiceHighlight"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updateServiceHighlightMutationVariablesSchema = z.object({
  input: updateServiceHighlightInputSchema,
  condition: modelServiceHighlightConditionInputSchema.optional().nullable(),
});

export const updateServiceHighlightMutationSchema = z.object({
  updateServiceHighlight: z
    .object({
      __typename: z.literal("ServiceHighlight"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deleteServiceHighlightMutationVariablesSchema = z.object({
  input: deleteServiceHighlightInputSchema,
  condition: modelServiceHighlightConditionInputSchema.optional().nullable(),
});

export const deleteServiceHighlightMutationSchema = z.object({
  deleteServiceHighlight: z
    .object({
      __typename: z.literal("ServiceHighlight"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createServiceTagMutationVariablesSchema = z.object({
  input: createServiceTagInputSchema,
  condition: modelServiceTagConditionInputSchema.optional().nullable(),
});

export const createServiceTagMutationSchema = z.object({
  createServiceTag: z
    .object({
      __typename: z.literal("ServiceTag"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updateServiceTagMutationVariablesSchema = z.object({
  input: updateServiceTagInputSchema,
  condition: modelServiceTagConditionInputSchema.optional().nullable(),
});

export const updateServiceTagMutationSchema = z.object({
  updateServiceTag: z
    .object({
      __typename: z.literal("ServiceTag"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deleteServiceTagMutationVariablesSchema = z.object({
  input: deleteServiceTagInputSchema,
  condition: modelServiceTagConditionInputSchema.optional().nullable(),
});

export const deleteServiceTagMutationSchema = z.object({
  deleteServiceTag: z
    .object({
      __typename: z.literal("ServiceTag"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createServiceFAQMutationVariablesSchema = z.object({
  input: createServiceFAQInputSchema,
  condition: modelServiceFAQConditionInputSchema.optional().nullable(),
});

export const createServiceFAQMutationSchema = z.object({
  createServiceFAQ: z
    .object({
      __typename: z.literal("ServiceFAQ"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updateServiceFAQMutationVariablesSchema = z.object({
  input: updateServiceFAQInputSchema,
  condition: modelServiceFAQConditionInputSchema.optional().nullable(),
});

export const updateServiceFAQMutationSchema = z.object({
  updateServiceFAQ: z
    .object({
      __typename: z.literal("ServiceFAQ"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deleteServiceFAQMutationVariablesSchema = z.object({
  input: deleteServiceFAQInputSchema,
  condition: modelServiceFAQConditionInputSchema.optional().nullable(),
});

export const deleteServiceFAQMutationSchema = z.object({
  deleteServiceFAQ: z
    .object({
      __typename: z.literal("ServiceFAQ"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createFeedbackMutationVariablesSchema = z.object({
  input: createFeedbackInputSchema,
  condition: modelFeedbackConditionInputSchema.optional().nullable(),
});

export const createFeedbackMutationSchema = z.object({
  createFeedback: z
    .object({
      __typename: z.literal("Feedback"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userFeedbacksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateFeedbackMutationVariablesSchema = z.object({
  input: updateFeedbackInputSchema,
  condition: modelFeedbackConditionInputSchema.optional().nullable(),
});

export const updateFeedbackMutationSchema = z.object({
  updateFeedback: z
    .object({
      __typename: z.literal("Feedback"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userFeedbacksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteFeedbackMutationVariablesSchema = z.object({
  input: deleteFeedbackInputSchema,
  condition: modelFeedbackConditionInputSchema.optional().nullable(),
});

export const deleteFeedbackMutationSchema = z.object({
  deleteFeedback: z
    .object({
      __typename: z.literal("Feedback"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userFeedbacksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createEquipmentInputSchema = z.object({
  id: z.string().optional().nullable(),
  providerID: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  category: equipmentCategorySchema.optional().nullable(),
  availabilityStatus: equipmentAvailabilityStatusSchema.optional().nullable(),
  purchaseDate: z.string().optional().nullable(),
  maintenanceDate: z.string().optional().nullable(),
  image: z.string().optional().nullable(),
  _version: z.number().optional().nullable(),
});

export const createEquipmentMutationSchema = z.object({
  createEquipment: z
    .object({
      __typename: z.literal("Equipment"),
      id: z.string(),
      providerID: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      category: equipmentCategorySchema.optional().nullable(),
      availabilityStatus: equipmentAvailabilityStatusSchema
        .optional()
        .nullable(),
      purchaseDate: z.string().optional().nullable(),
      maintenanceDate: z.string().optional().nullable(),
      image: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updateEquipmentMutationVariablesSchema = z.object({
  input: updateEquipmentInputSchema,
  condition: modelEquipmentConditionInputSchema.optional().nullable(),
});

export const updateEquipmentMutationSchema = z.object({
  updateEquipment: z
    .object({
      __typename: z.literal("Equipment"),
      id: z.string(),
      providerID: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      category: equipmentCategorySchema.optional().nullable(),
      availabilityStatus: equipmentAvailabilityStatusSchema
        .optional()
        .nullable(),
      purchaseDate: z.string().optional().nullable(),
      maintenanceDate: z.string().optional().nullable(),
      image: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deleteEquipmentMutationVariablesSchema = z.object({
  input: deleteEquipmentInputSchema,
  condition: modelEquipmentConditionInputSchema.optional().nullable(),
});

export const deleteEquipmentMutationSchema = z.object({
  deleteEquipment: z
    .object({
      __typename: z.literal("Equipment"),
      id: z.string(),
      providerID: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      category: equipmentCategorySchema.optional().nullable(),
      availabilityStatus: equipmentAvailabilityStatusSchema
        .optional()
        .nullable(),
      purchaseDate: z.string().optional().nullable(),
      maintenanceDate: z.string().optional().nullable(),
      image: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createWalletMutationVariablesSchema = z.object({
  input: createWalletInputSchema,
  condition: modelWalletConditionInputSchema.optional().nullable(),
});

export const createWalletMutationSchema = z.object({
  createWallet: z
    .object({
      __typename: z.literal("Wallet"),
      id: z.string(),
      ownerID: z.string(),
      balance: z.number(),
      currency: z.string(),
      transactions: z
        .object({
          __typename: z.literal("ModelTransactionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      lastUpdated: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updateWalletMutationVariablesSchema = z.object({
  input: updateWalletInputSchema,
  condition: modelWalletConditionInputSchema.optional().nullable(),
});

export const updateWalletMutationSchema = z.object({
  updateWallet: z
    .object({
      __typename: z.literal("Wallet"),
      id: z.string(),
      ownerID: z.string(),
      balance: z.number(),
      currency: z.string(),
      transactions: z
        .object({
          __typename: z.literal("ModelTransactionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      lastUpdated: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deleteWalletMutationVariablesSchema = z.object({
  input: deleteWalletInputSchema,
  condition: modelWalletConditionInputSchema.optional().nullable(),
});

export const deleteWalletMutationSchema = z.object({
  deleteWallet: z
    .object({
      __typename: z.literal("Wallet"),
      id: z.string(),
      ownerID: z.string(),
      balance: z.number(),
      currency: z.string(),
      transactions: z
        .object({
          __typename: z.literal("ModelTransactionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      lastUpdated: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createTransactionMutationVariablesSchema = z.object({
  input: createTransactionInputSchema,
  condition: modelTransactionConditionInputSchema.optional().nullable(),
});

export const createTransactionMutationSchema = z.object({
  createTransaction: z
    .object({
      __typename: z.literal("Transaction"),
      id: z.string(),
      wallet: z
        .object({
          __typename: z.literal("Wallet"),
          id: z.string(),
          ownerID: z.string(),
          balance: z.number(),
          currency: z.string(),
          lastUpdated: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      type: transactionTypeSchema.optional().nullable(),
      description: z.string().optional().nullable(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      walletTransactionsId: z.string().optional().nullable(),
      userTransactionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateTransactionMutationVariablesSchema = z.object({
  input: updateTransactionInputSchema,
  condition: modelTransactionConditionInputSchema.optional().nullable(),
});

export const updateTransactionMutationSchema = z.object({
  updateTransaction: z
    .object({
      __typename: z.literal("Transaction"),
      id: z.string(),
      wallet: z
        .object({
          __typename: z.literal("Wallet"),
          id: z.string(),
          ownerID: z.string(),
          balance: z.number(),
          currency: z.string(),
          lastUpdated: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      type: transactionTypeSchema.optional().nullable(),
      description: z.string().optional().nullable(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      walletTransactionsId: z.string().optional().nullable(),
      userTransactionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteTransactionMutationVariablesSchema = z.object({
  input: deleteTransactionInputSchema,
  condition: modelTransactionConditionInputSchema.optional().nullable(),
});

export const deleteTransactionMutationSchema = z.object({
  deleteTransaction: z
    .object({
      __typename: z.literal("Transaction"),
      id: z.string(),
      wallet: z
        .object({
          __typename: z.literal("Wallet"),
          id: z.string(),
          ownerID: z.string(),
          balance: z.number(),
          currency: z.string(),
          lastUpdated: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      type: transactionTypeSchema.optional().nullable(),
      description: z.string().optional().nullable(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      walletTransactionsId: z.string().optional().nullable(),
      userTransactionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createReviewMutationVariablesSchema = z.object({
  input: createReviewInputSchema,
  condition: modelReviewConditionInputSchema.optional().nullable(),
});

export const createReviewMutationSchema = z.object({
  createReview: z
    .object({
      __typename: z.literal("Review"),
      id: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      rating: z.number(),
      comment: z.string().optional().nullable(),
      date: z.string(),
      response: z
        .object({
          __typename: z.literal("ReviewResponse"),
          id: z.string(),
          responseText: z.string(),
          responseDate: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          reviewResponseReviewId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceReviewsId: z.string().optional().nullable(),
      providerReviewsId: z.string().optional().nullable(),
      userReviewsId: z.string().optional().nullable(),
      reviewResponseId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateReviewMutationVariablesSchema = z.object({
  input: updateReviewInputSchema,
  condition: modelReviewConditionInputSchema.optional().nullable(),
});

export const updateReviewMutationSchema = z.object({
  updateReview: z
    .object({
      __typename: z.literal("Review"),
      id: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      rating: z.number(),
      comment: z.string().optional().nullable(),
      date: z.string(),
      response: z
        .object({
          __typename: z.literal("ReviewResponse"),
          id: z.string(),
          responseText: z.string(),
          responseDate: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          reviewResponseReviewId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceReviewsId: z.string().optional().nullable(),
      providerReviewsId: z.string().optional().nullable(),
      userReviewsId: z.string().optional().nullable(),
      reviewResponseId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteReviewMutationVariablesSchema = z.object({
  input: deleteReviewInputSchema,
  condition: modelReviewConditionInputSchema.optional().nullable(),
});

export const deleteReviewMutationSchema = z.object({
  deleteReview: z
    .object({
      __typename: z.literal("Review"),
      id: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      rating: z.number(),
      comment: z.string().optional().nullable(),
      date: z.string(),
      response: z
        .object({
          __typename: z.literal("ReviewResponse"),
          id: z.string(),
          responseText: z.string(),
          responseDate: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          reviewResponseReviewId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceReviewsId: z.string().optional().nullable(),
      providerReviewsId: z.string().optional().nullable(),
      userReviewsId: z.string().optional().nullable(),
      reviewResponseId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createReviewResponseMutationVariablesSchema = z.object({
  input: createReviewResponseInputSchema,
  condition: modelReviewResponseConditionInputSchema.optional().nullable(),
});

export const createReviewResponseMutationSchema = z.object({
  createReviewResponse: z
    .object({
      __typename: z.literal("ReviewResponse"),
      id: z.string(),
      review: z
        .object({
          __typename: z.literal("Review"),
          id: z.string(),
          rating: z.number(),
          comment: z.string().optional().nullable(),
          date: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          serviceReviewsId: z.string().optional().nullable(),
          providerReviewsId: z.string().optional().nullable(),
          userReviewsId: z.string().optional().nullable(),
          reviewResponseId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      responseText: z.string(),
      responseDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      reviewResponseReviewId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateReviewResponseMutationVariablesSchema = z.object({
  input: updateReviewResponseInputSchema,
  condition: modelReviewResponseConditionInputSchema.optional().nullable(),
});

export const updateReviewResponseMutationSchema = z.object({
  updateReviewResponse: z
    .object({
      __typename: z.literal("ReviewResponse"),
      id: z.string(),
      review: z
        .object({
          __typename: z.literal("Review"),
          id: z.string(),
          rating: z.number(),
          comment: z.string().optional().nullable(),
          date: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          serviceReviewsId: z.string().optional().nullable(),
          providerReviewsId: z.string().optional().nullable(),
          userReviewsId: z.string().optional().nullable(),
          reviewResponseId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      responseText: z.string(),
      responseDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      reviewResponseReviewId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteReviewResponseMutationVariablesSchema = z.object({
  input: deleteReviewResponseInputSchema,
  condition: modelReviewResponseConditionInputSchema.optional().nullable(),
});

export const deleteReviewResponseMutationSchema = z.object({
  deleteReviewResponse: z
    .object({
      __typename: z.literal("ReviewResponse"),
      id: z.string(),
      review: z
        .object({
          __typename: z.literal("Review"),
          id: z.string(),
          rating: z.number(),
          comment: z.string().optional().nullable(),
          date: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          serviceReviewsId: z.string().optional().nullable(),
          providerReviewsId: z.string().optional().nullable(),
          userReviewsId: z.string().optional().nullable(),
          reviewResponseId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      responseText: z.string(),
      responseDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      reviewResponseReviewId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createMessageThreadMutationVariablesSchema = z.object({
  input: createMessageThreadInputSchema,
  condition: modelMessageThreadConditionInputSchema.optional().nullable(),
});

export const createMessageThreadMutationSchema = z.object({
  createMessageThread: z
    .object({
      __typename: z.literal("MessageThread"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      messages: z
        .object({
          __typename: z.literal("ModelMessageContentConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      lastMessageDate: z.string().optional().nullable(),
      lastMessageContent: z.string().optional().nullable(),
      status: messageStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderMessagesId: z.string().optional().nullable(),
      userMessagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateMessageThreadMutationVariablesSchema = z.object({
  input: updateMessageThreadInputSchema,
  condition: modelMessageThreadConditionInputSchema.optional().nullable(),
});

export const updateMessageThreadMutationSchema = z.object({
  updateMessageThread: z
    .object({
      __typename: z.literal("MessageThread"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      messages: z
        .object({
          __typename: z.literal("ModelMessageContentConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      lastMessageDate: z.string().optional().nullable(),
      lastMessageContent: z.string().optional().nullable(),
      status: messageStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderMessagesId: z.string().optional().nullable(),
      userMessagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteMessageThreadMutationVariablesSchema = z.object({
  input: deleteMessageThreadInputSchema,
  condition: modelMessageThreadConditionInputSchema.optional().nullable(),
});

export const deleteMessageThreadMutationSchema = z.object({
  deleteMessageThread: z
    .object({
      __typename: z.literal("MessageThread"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      messages: z
        .object({
          __typename: z.literal("ModelMessageContentConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      lastMessageDate: z.string().optional().nullable(),
      lastMessageContent: z.string().optional().nullable(),
      status: messageStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderMessagesId: z.string().optional().nullable(),
      userMessagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createMessageContentMutationVariablesSchema = z.object({
  input: createMessageContentInputSchema,
  condition: modelMessageContentConditionInputSchema.optional().nullable(),
});

export const createMessageContentMutationSchema = z.object({
  createMessageContent: z
    .object({
      __typename: z.literal("MessageContent"),
      id: z.string(),
      thread: z
        .object({
          __typename: z.literal("MessageThread"),
          id: z.string(),
          lastMessageDate: z.string().optional().nullable(),
          lastMessageContent: z.string().optional().nullable(),
          status: messageStatusSchema.optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          providerProviderMessagesId: z.string().optional().nullable(),
          userMessagesId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      sender: z.string().optional().nullable(),
      content: z.string(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      messageThreadMessagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateMessageContentMutationVariablesSchema = z.object({
  input: updateMessageContentInputSchema,
  condition: modelMessageContentConditionInputSchema.optional().nullable(),
});

export const updateMessageContentMutationSchema = z.object({
  updateMessageContent: z
    .object({
      __typename: z.literal("MessageContent"),
      id: z.string(),
      thread: z
        .object({
          __typename: z.literal("MessageThread"),
          id: z.string(),
          lastMessageDate: z.string().optional().nullable(),
          lastMessageContent: z.string().optional().nullable(),
          status: messageStatusSchema.optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          providerProviderMessagesId: z.string().optional().nullable(),
          userMessagesId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      sender: z.string().optional().nullable(),
      content: z.string(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      messageThreadMessagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteMessageContentMutationVariablesSchema = z.object({
  input: deleteMessageContentInputSchema,
  condition: modelMessageContentConditionInputSchema.optional().nullable(),
});

export const deleteMessageContentMutationSchema = z.object({
  deleteMessageContent: z
    .object({
      __typename: z.literal("MessageContent"),
      id: z.string(),
      thread: z
        .object({
          __typename: z.literal("MessageThread"),
          id: z.string(),
          lastMessageDate: z.string().optional().nullable(),
          lastMessageContent: z.string().optional().nullable(),
          status: messageStatusSchema.optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          providerProviderMessagesId: z.string().optional().nullable(),
          userMessagesId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      sender: z.string().optional().nullable(),
      content: z.string(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      messageThreadMessagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createBookingMutationVariablesSchema = z.object({
  input: createBookingInputSchema,
  condition: modelBookingConditionInputSchema.optional().nullable(),
});

export const createBookingMutationSchema = z.object({
  createBooking: z
    .object({
      __typename: z.literal("Booking"),
      id: z.string(),
      date: z.string(),
      startTime: z.string(),
      endTime: z.string(),
      status: bookingStatusSchema.optional().nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      location: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      price: z.number(),
      isInstantBooking: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceBookingsId: z.string().optional().nullable(),
      providerProviderBookingsId: z.string().optional().nullable(),
      userBookingsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateBookingMutationVariablesSchema = z.object({
  input: updateBookingInputSchema,
  condition: modelBookingConditionInputSchema.optional().nullable(),
});

export const updateBookingMutationSchema = z.object({
  updateBooking: z
    .object({
      __typename: z.literal("Booking"),
      id: z.string(),
      date: z.string(),
      startTime: z.string(),
      endTime: z.string(),
      status: bookingStatusSchema.optional().nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      location: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      price: z.number(),
      isInstantBooking: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceBookingsId: z.string().optional().nullable(),
      providerProviderBookingsId: z.string().optional().nullable(),
      userBookingsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteBookingMutationVariablesSchema = z.object({
  input: deleteBookingInputSchema,
  condition: modelBookingConditionInputSchema.optional().nullable(),
});

export const deleteBookingMutationSchema = z.object({
  deleteBooking: z
    .object({
      __typename: z.literal("Booking"),
      id: z.string(),
      date: z.string(),
      startTime: z.string(),
      endTime: z.string(),
      status: bookingStatusSchema.optional().nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      location: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      price: z.number(),
      isInstantBooking: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceBookingsId: z.string().optional().nullable(),
      providerProviderBookingsId: z.string().optional().nullable(),
      userBookingsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createTeamMemberMutationVariablesSchema = z.object({
  input: createTeamMemberInputSchema,
  condition: modelTeamMemberConditionInputSchema.optional().nullable(),
});

export const createTeamMemberMutationSchema = z.object({
  createTeamMember: z
    .object({
      __typename: z.literal("TeamMember"),
      id: z.string(),
      name: z.string(),
      role: z.string().optional().nullable(),
      currentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      jobSiteDuration: z.string().optional().nullable(),
      communicationLog: z
        .object({
          __typename: z.literal("ModelMessageConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      assignedJobs: z
        .object({
          __typename: z.literal("ModelJobConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerID: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerTeamMembersId: z.string().optional().nullable(),
      teamMemberCurrentLocationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateTeamMemberMutationVariablesSchema = z.object({
  input: updateTeamMemberInputSchema,
  condition: modelTeamMemberConditionInputSchema.optional().nullable(),
});

export const updateTeamMemberMutationSchema = z.object({
  updateTeamMember: z
    .object({
      __typename: z.literal("TeamMember"),
      id: z.string(),
      name: z.string(),
      role: z.string().optional().nullable(),
      currentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      jobSiteDuration: z.string().optional().nullable(),
      communicationLog: z
        .object({
          __typename: z.literal("ModelMessageConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      assignedJobs: z
        .object({
          __typename: z.literal("ModelJobConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerID: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerTeamMembersId: z.string().optional().nullable(),
      teamMemberCurrentLocationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteTeamMemberMutationVariablesSchema = z.object({
  input: deleteTeamMemberInputSchema,
  condition: modelTeamMemberConditionInputSchema.optional().nullable(),
});

export const deleteTeamMemberMutationSchema = z.object({
  deleteTeamMember: z
    .object({
      __typename: z.literal("TeamMember"),
      id: z.string(),
      name: z.string(),
      role: z.string().optional().nullable(),
      currentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      jobSiteDuration: z.string().optional().nullable(),
      communicationLog: z
        .object({
          __typename: z.literal("ModelMessageConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      assignedJobs: z
        .object({
          __typename: z.literal("ModelJobConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerID: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerTeamMembersId: z.string().optional().nullable(),
      teamMemberCurrentLocationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createLocationMutationVariablesSchema = z.object({
  input: createLocationInputSchema,
  condition: modelLocationConditionInputSchema.optional().nullable(),
});

export const createLocationMutationSchema = z.object({
  createLocation: z
    .object({
      __typename: z.literal("Location"),
      id: z.string(),
      latitude: z.number(),
      longitude: z.number(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updateLocationMutationVariablesSchema = z.object({
  input: updateLocationInputSchema,
  condition: modelLocationConditionInputSchema.optional().nullable(),
});

export const updateLocationMutationSchema = z.object({
  updateLocation: z
    .object({
      __typename: z.literal("Location"),
      id: z.string(),
      latitude: z.number(),
      longitude: z.number(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deleteLocationMutationVariablesSchema = z.object({
  input: deleteLocationInputSchema,
  condition: modelLocationConditionInputSchema.optional().nullable(),
});

export const deleteLocationMutationSchema = z.object({
  deleteLocation: z
    .object({
      __typename: z.literal("Location"),
      id: z.string(),
      latitude: z.number(),
      longitude: z.number(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createMessageMutationVariablesSchema = z.object({
  input: createMessageInputSchema,
  condition: modelMessageConditionInputSchema.optional().nullable(),
});

export const createMessageMutationSchema = z.object({
  createMessage: z
    .object({
      __typename: z.literal("Message"),
      id: z.string(),
      sender: z.string(),
      content: z.string(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      teamMemberCommunicationLogId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateMessageMutationVariablesSchema = z.object({
  input: updateMessageInputSchema,
  condition: modelMessageConditionInputSchema.optional().nullable(),
});

export const updateMessageMutationSchema = z.object({
  updateMessage: z
    .object({
      __typename: z.literal("Message"),
      id: z.string(),
      sender: z.string(),
      content: z.string(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      teamMemberCommunicationLogId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteMessageMutationVariablesSchema = z.object({
  input: deleteMessageInputSchema,
  condition: modelMessageConditionInputSchema.optional().nullable(),
});

export const deleteMessageMutationSchema = z.object({
  deleteMessage: z
    .object({
      __typename: z.literal("Message"),
      id: z.string(),
      sender: z.string(),
      content: z.string(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      teamMemberCommunicationLogId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createJobMutationVariablesSchema = z.object({
  input: createJobInputSchema,
  condition: modelJobConditionInputSchema.optional().nullable(),
});

export const createJobMutationSchema = z.object({
  createJob: z
    .object({
      __typename: z.literal("Job"),
      id: z.string(),
      description: z.string(),
      location: z.string(),
      startTime: z.string().optional().nullable(),
      endTime: z.string().optional().nullable(),
      status: jobStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      teamMemberAssignedJobsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateJobMutationVariablesSchema = z.object({
  input: updateJobInputSchema,
  condition: modelJobConditionInputSchema.optional().nullable(),
});

export const updateJobMutationSchema = z.object({
  updateJob: z
    .object({
      __typename: z.literal("Job"),
      id: z.string(),
      description: z.string(),
      location: z.string(),
      startTime: z.string().optional().nullable(),
      endTime: z.string().optional().nullable(),
      status: jobStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      teamMemberAssignedJobsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteJobMutationVariablesSchema = z.object({
  input: deleteJobInputSchema,
  condition: modelJobConditionInputSchema.optional().nullable(),
});

export const deleteJobMutationSchema = z.object({
  deleteJob: z
    .object({
      __typename: z.literal("Job"),
      id: z.string(),
      description: z.string(),
      location: z.string(),
      startTime: z.string().optional().nullable(),
      endTime: z.string().optional().nullable(),
      status: jobStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      teamMemberAssignedJobsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createServiceMutationVariablesSchema = z.object({
  input: createServiceInputSchema,
  condition: modelServiceConditionInputSchema.optional().nullable(),
});

export const createServiceMutationSchema = z.object({
  createService: z
    .object({
      __typename: z.literal("Service"),
      id: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      price_min: z.number(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      bookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      SubCategory: z
        .object({
          __typename: z.literal("SubCategory"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          mainCategorySubCategoriesId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      servicePromotions: z
        .object({
          __typename: z.literal("ModelServicePromotionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReports: z
        .object({
          __typename: z.literal("ModelProviderReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userReports: z
        .object({
          __typename: z.literal("ModelUserReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userInvoices: z
        .object({
          __typename: z.literal("ModelUserInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userBookmarks: z
        .object({
          __typename: z.literal("ModelUserBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerNotifications: z
        .object({
          __typename: z.literal("ModelProviderNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userNotifications: z
        .object({
          __typename: z.literal("ModelUserNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceDiscounts: z
        .object({
          __typename: z.literal("ModelServiceDiscountConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAvailabilities: z
        .object({
          __typename: z.literal("ModelProviderAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userPreferences: z
        .object({
          __typename: z.literal("ModelUserPreferenceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerCertifications: z
        .object({
          __typename: z.literal("ModelProviderCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceVideos: z
        .object({
          __typename: z.literal("ModelServiceVideoConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceImages: z
        .object({
          __typename: z.literal("ModelServiceImageConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceReviews: z
        .object({
          __typename: z.literal("ModelServiceReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiDiagnostics: z
        .object({
          __typename: z.literal("ModelAIDiagnosticsConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizations: z
        .object({
          __typename: z.literal("ModelCustomizationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userHistories: z
        .object({
          __typename: z.literal("ModelUserHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAwards: z
        .object({
          __typename: z.literal("ModelProviderAwardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      contracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTrackings: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      duration: z.string().optional().nullable(),
      Materials: z.string().optional().nullable(),
      MaterialCosts: z.number().optional().nullable(),
      BookingRequirements: z.string().optional().nullable(),
      price_max: z.number(),
      Tasks: z
        .object({
          __typename: z.literal("Tasks"),
          id: z.string(),
          taskName: z.string(),
          taskTime: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          tasksServiceId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      invoiceServicesId: z.string().optional().nullable(),
      servicePackageServicesId: z.string().optional().nullable(),
      subCategoryServicesId: z.string().optional().nullable(),
      providerServicesOfferedId: z.string().optional().nullable(),
      serviceTasksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateServiceMutationVariablesSchema = z.object({
  input: updateServiceInputSchema,
  condition: modelServiceConditionInputSchema.optional().nullable(),
});

export const updateServiceMutationSchema = z.object({
  updateService: z
    .object({
      __typename: z.literal("Service"),
      id: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      price_min: z.number(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      bookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      SubCategory: z
        .object({
          __typename: z.literal("SubCategory"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          mainCategorySubCategoriesId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      servicePromotions: z
        .object({
          __typename: z.literal("ModelServicePromotionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReports: z
        .object({
          __typename: z.literal("ModelProviderReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userReports: z
        .object({
          __typename: z.literal("ModelUserReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userInvoices: z
        .object({
          __typename: z.literal("ModelUserInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userBookmarks: z
        .object({
          __typename: z.literal("ModelUserBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerNotifications: z
        .object({
          __typename: z.literal("ModelProviderNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userNotifications: z
        .object({
          __typename: z.literal("ModelUserNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceDiscounts: z
        .object({
          __typename: z.literal("ModelServiceDiscountConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAvailabilities: z
        .object({
          __typename: z.literal("ModelProviderAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userPreferences: z
        .object({
          __typename: z.literal("ModelUserPreferenceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerCertifications: z
        .object({
          __typename: z.literal("ModelProviderCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceVideos: z
        .object({
          __typename: z.literal("ModelServiceVideoConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceImages: z
        .object({
          __typename: z.literal("ModelServiceImageConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceReviews: z
        .object({
          __typename: z.literal("ModelServiceReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiDiagnostics: z
        .object({
          __typename: z.literal("ModelAIDiagnosticsConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizations: z
        .object({
          __typename: z.literal("ModelCustomizationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userHistories: z
        .object({
          __typename: z.literal("ModelUserHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAwards: z
        .object({
          __typename: z.literal("ModelProviderAwardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      contracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTrackings: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      duration: z.string().optional().nullable(),
      Materials: z.string().optional().nullable(),
      MaterialCosts: z.number().optional().nullable(),
      BookingRequirements: z.string().optional().nullable(),
      price_max: z.number(),
      Tasks: z
        .object({
          __typename: z.literal("Tasks"),
          id: z.string(),
          taskName: z.string(),
          taskTime: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          tasksServiceId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      invoiceServicesId: z.string().optional().nullable(),
      servicePackageServicesId: z.string().optional().nullable(),
      subCategoryServicesId: z.string().optional().nullable(),
      providerServicesOfferedId: z.string().optional().nullable(),
      serviceTasksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteServiceMutationVariablesSchema = z.object({
  input: deleteServiceInputSchema,
  condition: modelServiceConditionInputSchema.optional().nullable(),
});

export const deleteServiceMutationSchema = z.object({
  deleteService: z
    .object({
      __typename: z.literal("Service"),
      id: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      price_min: z.number(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      bookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      SubCategory: z
        .object({
          __typename: z.literal("SubCategory"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          mainCategorySubCategoriesId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      servicePromotions: z
        .object({
          __typename: z.literal("ModelServicePromotionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReports: z
        .object({
          __typename: z.literal("ModelProviderReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userReports: z
        .object({
          __typename: z.literal("ModelUserReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userInvoices: z
        .object({
          __typename: z.literal("ModelUserInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userBookmarks: z
        .object({
          __typename: z.literal("ModelUserBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerNotifications: z
        .object({
          __typename: z.literal("ModelProviderNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userNotifications: z
        .object({
          __typename: z.literal("ModelUserNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceDiscounts: z
        .object({
          __typename: z.literal("ModelServiceDiscountConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAvailabilities: z
        .object({
          __typename: z.literal("ModelProviderAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userPreferences: z
        .object({
          __typename: z.literal("ModelUserPreferenceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerCertifications: z
        .object({
          __typename: z.literal("ModelProviderCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceVideos: z
        .object({
          __typename: z.literal("ModelServiceVideoConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceImages: z
        .object({
          __typename: z.literal("ModelServiceImageConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceReviews: z
        .object({
          __typename: z.literal("ModelServiceReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiDiagnostics: z
        .object({
          __typename: z.literal("ModelAIDiagnosticsConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizations: z
        .object({
          __typename: z.literal("ModelCustomizationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userHistories: z
        .object({
          __typename: z.literal("ModelUserHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAwards: z
        .object({
          __typename: z.literal("ModelProviderAwardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      contracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTrackings: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      duration: z.string().optional().nullable(),
      Materials: z.string().optional().nullable(),
      MaterialCosts: z.number().optional().nullable(),
      BookingRequirements: z.string().optional().nullable(),
      price_max: z.number(),
      Tasks: z
        .object({
          __typename: z.literal("Tasks"),
          id: z.string(),
          taskName: z.string(),
          taskTime: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          tasksServiceId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      invoiceServicesId: z.string().optional().nullable(),
      servicePackageServicesId: z.string().optional().nullable(),
      subCategoryServicesId: z.string().optional().nullable(),
      providerServicesOfferedId: z.string().optional().nullable(),
      serviceTasksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createProviderMutationVariablesSchema = z.object({
  input: createProviderInputSchema,
  condition: modelProviderConditionInputSchema.optional().nullable(),
});

export const createProviderMutationSchema = z.object({
  createProvider: z
    .object({
      __typename: z.literal("Provider"),
      id: z.string(),
      email: z.string(),
      password: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      dob: z.string().optional().nullable(),
      gender: genderSchema.optional().nullable(),
      phone: z.string().optional().nullable(),
      address: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      state: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      zipCode: z.string().optional().nullable(),
      profileImage: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isVerified: z.boolean().optional().nullable(),
      lastLogin: z.string().optional().nullable(),
      accountType: accountTypeSchema.optional().nullable(),
      notificationPreference: notificationPreferenceSchema
        .optional()
        .nullable(),
      languagePreference: z.string().optional().nullable(),
      currencyPreference: z.string().optional().nullable(),
      timezone: z.string().optional().nullable(),
      chatbotRequests: z.number().optional().nullable(),
      servicesOffered: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      teamMembers: z
        .object({
          __typename: z.literal("ModelTeamMemberConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      availability: z
        .object({
          __typename: z.literal("ModelAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      certifications: z
        .object({
          __typename: z.literal("ModelCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      qualifications: z
        .object({
          __typename: z.literal("ModelQualificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      specializations: z
        .object({
          __typename: z.literal("ModelSpecializationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerMessages: z
        .object({
          __typename: z.literal("ModelMessageThreadConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerContracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerInvoices: z
        .object({
          __typename: z.literal("ModelInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerTips: z
        .object({
          __typename: z.literal("ModelTipConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReferrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerHistories: z
        .object({
          __typename: z.literal("ModelProviderHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerNotifications: z
        .object({
          __typename: z.literal("ModelProviderNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReports: z
        .object({
          __typename: z.literal("ModelProviderReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAvailability: z
        .object({
          __typename: z.literal("ModelProviderAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerCertification: z
        .object({
          __typename: z.literal("ModelProviderCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAwards: z
        .object({
          __typename: z.literal("ModelProviderAwardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTracking: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      currentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      isInstantBookingAvailable: z.boolean().optional().nullable(),
      Tasks: z
        .object({
          __typename: z.literal("Tasks"),
          id: z.string(),
          taskName: z.string(),
          taskTime: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          tasksServiceId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      isEmailVerified: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      nicheServiceProvidersId: z.string().optional().nullable(),
      providerCurrentLocationId: z.string().optional().nullable(),
      providerTasksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateProviderMutationVariablesSchema = z.object({
  input: updateProviderInputSchema,
  condition: modelProviderConditionInputSchema.optional().nullable(),
});

export const updateProviderMutationSchema = z.object({
  updateProvider: z
    .object({
      __typename: z.literal("Provider"),
      id: z.string(),
      email: z.string(),
      password: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      dob: z.string().optional().nullable(),
      gender: genderSchema.optional().nullable(),
      phone: z.string().optional().nullable(),
      address: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      state: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      zipCode: z.string().optional().nullable(),
      profileImage: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isVerified: z.boolean().optional().nullable(),
      lastLogin: z.string().optional().nullable(),
      accountType: accountTypeSchema.optional().nullable(),
      notificationPreference: notificationPreferenceSchema
        .optional()
        .nullable(),
      languagePreference: z.string().optional().nullable(),
      currencyPreference: z.string().optional().nullable(),
      timezone: z.string().optional().nullable(),
      chatbotRequests: z.number().optional().nullable(),
      servicesOffered: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      teamMembers: z
        .object({
          __typename: z.literal("ModelTeamMemberConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      availability: z
        .object({
          __typename: z.literal("ModelAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      certifications: z
        .object({
          __typename: z.literal("ModelCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      qualifications: z
        .object({
          __typename: z.literal("ModelQualificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      specializations: z
        .object({
          __typename: z.literal("ModelSpecializationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerMessages: z
        .object({
          __typename: z.literal("ModelMessageThreadConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerContracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerInvoices: z
        .object({
          __typename: z.literal("ModelInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerTips: z
        .object({
          __typename: z.literal("ModelTipConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReferrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerHistories: z
        .object({
          __typename: z.literal("ModelProviderHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerNotifications: z
        .object({
          __typename: z.literal("ModelProviderNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReports: z
        .object({
          __typename: z.literal("ModelProviderReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAvailability: z
        .object({
          __typename: z.literal("ModelProviderAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerCertification: z
        .object({
          __typename: z.literal("ModelProviderCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAwards: z
        .object({
          __typename: z.literal("ModelProviderAwardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTracking: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      currentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      isInstantBookingAvailable: z.boolean().optional().nullable(),
      Tasks: z
        .object({
          __typename: z.literal("Tasks"),
          id: z.string(),
          taskName: z.string(),
          taskTime: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          tasksServiceId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      isEmailVerified: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      nicheServiceProvidersId: z.string().optional().nullable(),
      providerCurrentLocationId: z.string().optional().nullable(),
      providerTasksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteProviderMutationVariablesSchema = z.object({
  input: deleteProviderInputSchema,
  condition: modelProviderConditionInputSchema.optional().nullable(),
});

export const deleteProviderMutationSchema = z.object({
  deleteProvider: z
    .object({
      __typename: z.literal("Provider"),
      id: z.string(),
      email: z.string(),
      password: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      dob: z.string().optional().nullable(),
      gender: genderSchema.optional().nullable(),
      phone: z.string().optional().nullable(),
      address: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      state: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      zipCode: z.string().optional().nullable(),
      profileImage: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isVerified: z.boolean().optional().nullable(),
      lastLogin: z.string().optional().nullable(),
      accountType: accountTypeSchema.optional().nullable(),
      notificationPreference: notificationPreferenceSchema
        .optional()
        .nullable(),
      languagePreference: z.string().optional().nullable(),
      currencyPreference: z.string().optional().nullable(),
      timezone: z.string().optional().nullable(),
      chatbotRequests: z.number().optional().nullable(),
      servicesOffered: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      teamMembers: z
        .object({
          __typename: z.literal("ModelTeamMemberConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      availability: z
        .object({
          __typename: z.literal("ModelAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      certifications: z
        .object({
          __typename: z.literal("ModelCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      qualifications: z
        .object({
          __typename: z.literal("ModelQualificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      specializations: z
        .object({
          __typename: z.literal("ModelSpecializationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerMessages: z
        .object({
          __typename: z.literal("ModelMessageThreadConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerContracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerInvoices: z
        .object({
          __typename: z.literal("ModelInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerTips: z
        .object({
          __typename: z.literal("ModelTipConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReferrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerHistories: z
        .object({
          __typename: z.literal("ModelProviderHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerNotifications: z
        .object({
          __typename: z.literal("ModelProviderNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReports: z
        .object({
          __typename: z.literal("ModelProviderReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAvailability: z
        .object({
          __typename: z.literal("ModelProviderAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerCertification: z
        .object({
          __typename: z.literal("ModelProviderCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAwards: z
        .object({
          __typename: z.literal("ModelProviderAwardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTracking: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      currentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      isInstantBookingAvailable: z.boolean().optional().nullable(),
      Tasks: z
        .object({
          __typename: z.literal("Tasks"),
          id: z.string(),
          taskName: z.string(),
          taskTime: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          tasksServiceId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      isEmailVerified: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      nicheServiceProvidersId: z.string().optional().nullable(),
      providerCurrentLocationId: z.string().optional().nullable(),
      providerTasksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createAvailabilityMutationVariablesSchema = z.object({
  input: createAvailabilityInputSchema,
  condition: modelAvailabilityConditionInputSchema.optional().nullable(),
});

export const createAvailabilityMutationSchema = z.object({
  createAvailability: z
    .object({
      __typename: z.literal("Availability"),
      id: z.string(),
      startTime: z.string(),
      endTime: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      avalabilityDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerAvailabilityId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateAvailabilityMutationVariablesSchema = z.object({
  input: updateAvailabilityInputSchema,
  condition: modelAvailabilityConditionInputSchema.optional().nullable(),
});

export const updateAvailabilityMutationSchema = z.object({
  updateAvailability: z
    .object({
      __typename: z.literal("Availability"),
      id: z.string(),
      startTime: z.string(),
      endTime: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      avalabilityDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerAvailabilityId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteAvailabilityMutationVariablesSchema = z.object({
  input: deleteAvailabilityInputSchema,
  condition: modelAvailabilityConditionInputSchema.optional().nullable(),
});

export const deleteAvailabilityMutationSchema = z.object({
  deleteAvailability: z
    .object({
      __typename: z.literal("Availability"),
      id: z.string(),
      startTime: z.string(),
      endTime: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      avalabilityDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerAvailabilityId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createProviderReviewMutationVariablesSchema = z.object({
  input: createProviderReviewInputSchema,
  condition: modelProviderReviewConditionInputSchema.optional().nullable(),
});

export const createProviderReviewMutationSchema = z.object({
  createProviderReview: z
    .object({
      __typename: z.literal("ProviderReview"),
      id: z.string(),
      providerID: z.string(),
      userID: z.string(),
      rating: z.number(),
      comment: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const updateProviderReviewMutationVariablesSchema = z.object({
  input: updateProviderReviewInputSchema,
  condition: modelProviderReviewConditionInputSchema.optional().nullable(),
});

export const updateProviderReviewMutationSchema = z.object({
  updateProviderReview: z
    .object({
      __typename: z.literal("ProviderReview"),
      id: z.string(),
      providerID: z.string(),
      userID: z.string(),
      rating: z.number(),
      comment: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const deleteProviderReviewMutationVariablesSchema = z.object({
  input: deleteProviderReviewInputSchema,
  condition: modelProviderReviewConditionInputSchema.optional().nullable(),
});

export const deleteProviderReviewMutationSchema = z.object({
  deleteProviderReview: z
    .object({
      __typename: z.literal("ProviderReview"),
      id: z.string(),
      providerID: z.string(),
      userID: z.string(),
      rating: z.number(),
      comment: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const createCertificationMutationVariablesSchema = z.object({
  input: createCertificationInputSchema,
  condition: modelCertificationConditionInputSchema.optional().nullable(),
});

export const createCertificationMutationSchema = z.object({
  createCertification: z
    .object({
      __typename: z.literal("Certification"),
      id: z.string(),
      certificationName: z.string(),
      issuedBy: z.string().optional().nullable(),
      validFrom: z.string().optional().nullable(),
      validUntil: z.string().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerCertificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateCertificationMutationVariablesSchema = z.object({
  input: updateCertificationInputSchema,
  condition: modelCertificationConditionInputSchema.optional().nullable(),
});

export const updateCertificationMutationSchema = z.object({
  updateCertification: z
    .object({
      __typename: z.literal("Certification"),
      id: z.string(),
      certificationName: z.string(),
      issuedBy: z.string().optional().nullable(),
      validFrom: z.string().optional().nullable(),
      validUntil: z.string().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerCertificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteCertificationMutationVariablesSchema = z.object({
  input: deleteCertificationInputSchema,
  condition: modelCertificationConditionInputSchema.optional().nullable(),
});

export const deleteCertificationMutationSchema = z.object({
  deleteCertification: z
    .object({
      __typename: z.literal("Certification"),
      id: z.string(),
      certificationName: z.string(),
      issuedBy: z.string().optional().nullable(),
      validFrom: z.string().optional().nullable(),
      validUntil: z.string().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerCertificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createQualificationMutationVariablesSchema = z.object({
  input: createQualificationInputSchema,
  condition: modelQualificationConditionInputSchema.optional().nullable(),
});

export const createQualificationMutationSchema = z.object({
  createQualification: z
    .object({
      __typename: z.literal("Qualification"),
      id: z.string(),
      qualificationName: z.string(),
      institution: z.string().optional().nullable(),
      yearObtained: z.number().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerQualificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateQualificationMutationVariablesSchema = z.object({
  input: updateQualificationInputSchema,
  condition: modelQualificationConditionInputSchema.optional().nullable(),
});

export const updateQualificationMutationSchema = z.object({
  updateQualification: z
    .object({
      __typename: z.literal("Qualification"),
      id: z.string(),
      qualificationName: z.string(),
      institution: z.string().optional().nullable(),
      yearObtained: z.number().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerQualificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteQualificationMutationVariablesSchema = z.object({
  input: deleteQualificationInputSchema,
  condition: modelQualificationConditionInputSchema.optional().nullable(),
});

export const deleteQualificationMutationSchema = z.object({
  deleteQualification: z
    .object({
      __typename: z.literal("Qualification"),
      id: z.string(),
      qualificationName: z.string(),
      institution: z.string().optional().nullable(),
      yearObtained: z.number().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerQualificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createSpecializationMutationVariablesSchema = z.object({
  input: createSpecializationInputSchema,
  condition: modelSpecializationConditionInputSchema.optional().nullable(),
});

export const createSpecializationMutationSchema = z.object({
  createSpecialization: z
    .object({
      __typename: z.literal("Specialization"),
      id: z.string(),
      specializationName: z.string(),
      description: z.string().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerSpecializationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateSpecializationMutationVariablesSchema = z.object({
  input: updateSpecializationInputSchema,
  condition: modelSpecializationConditionInputSchema.optional().nullable(),
});

export const updateSpecializationMutationSchema = z.object({
  updateSpecialization: z
    .object({
      __typename: z.literal("Specialization"),
      id: z.string(),
      specializationName: z.string(),
      description: z.string().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerSpecializationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteSpecializationMutationVariablesSchema = z.object({
  input: deleteSpecializationInputSchema,
  condition: modelSpecializationConditionInputSchema.optional().nullable(),
});

export const deleteSpecializationMutationSchema = z.object({
  deleteSpecialization: z
    .object({
      __typename: z.literal("Specialization"),
      id: z.string(),
      specializationName: z.string(),
      description: z.string().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerSpecializationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createProviderHistoryMutationVariablesSchema = z.object({
  input: createProviderHistoryInputSchema,
  condition: modelProviderHistoryConditionInputSchema.optional().nullable(),
});

export const createProviderHistoryMutationSchema = z.object({
  createProviderHistory: z
    .object({
      __typename: z.literal("ProviderHistory"),
      id: z.string(),
      providerID: z.string(),
      event: z.string(),
      date: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderHistoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateProviderHistoryMutationVariablesSchema = z.object({
  input: updateProviderHistoryInputSchema,
  condition: modelProviderHistoryConditionInputSchema.optional().nullable(),
});

export const updateProviderHistoryMutationSchema = z.object({
  updateProviderHistory: z
    .object({
      __typename: z.literal("ProviderHistory"),
      id: z.string(),
      providerID: z.string(),
      event: z.string(),
      date: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderHistoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteProviderHistoryMutationVariablesSchema = z.object({
  input: deleteProviderHistoryInputSchema,
  condition: modelProviderHistoryConditionInputSchema.optional().nullable(),
});

export const deleteProviderHistoryMutationSchema = z.object({
  deleteProviderHistory: z
    .object({
      __typename: z.literal("ProviderHistory"),
      id: z.string(),
      providerID: z.string(),
      event: z.string(),
      date: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderHistoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const createUserMutationVariablesSchema = z.object({
  input: createUserInputSchema,
  condition: modelUserConditionInputSchema.optional().nullable(),
});

export const createUserMutationSchema = z.object({
  createUser: z
    .object({
      __typename: z.literal("User"),
      id: z.string(),
      email: z.string(),
      password: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      dob: z.string().optional().nullable(),
      gender: genderSchema.optional().nullable(),
      phone: z.string().optional().nullable(),
      address: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      state: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      zipCode: z.string().optional().nullable(),
      profileImage: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isVerified: z.boolean().optional().nullable(),
      lastLogin: z.string().optional().nullable(),
      accountType: accountTypeSchema.optional().nullable(),
      notificationPreference: notificationPreferenceSchema
        .optional()
        .nullable(),
      languagePreference: z.string().optional().nullable(),
      currencyPreference: z.string().optional().nullable(),
      timezone: z.string().optional().nullable(),
      chatbotRequests: z.number().optional().nullable(),
      bookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      messages: z
        .object({
          __typename: z.literal("ModelMessageThreadConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      wallet: z
        .object({
          __typename: z.literal("Wallet"),
          id: z.string(),
          ownerID: z.string(),
          balance: z.number(),
          currency: z.string(),
          lastUpdated: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      transactions: z
        .object({
          __typename: z.literal("ModelTransactionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      feedbacks: z
        .object({
          __typename: z.literal("ModelFeedbackConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      subscriptions: z
        .object({
          __typename: z.literal("ModelPLMBRSubscriptionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatBots: z
        .object({
          __typename: z.literal("ModelAIChatBotConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatLogs: z
        .object({
          __typename: z.literal("ModelAIChatLogConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTrackings: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reports: z
        .object({
          __typename: z.literal("ModelReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      loyaltyPrograms: z
        .object({
          __typename: z.literal("ModelLoyaltyProgramConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      rewards: z
        .object({
          __typename: z.literal("ModelRewardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      contracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      invoices: z
        .object({
          __typename: z.literal("ModelInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      paymentMethods: z
        .object({
          __typename: z.literal("ModelPaymentMethodConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      tips: z
        .object({
          __typename: z.literal("ModelTipConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userHistories: z
        .object({
          __typename: z.literal("ModelUserHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizations: z
        .object({
          __typename: z.literal("ModelCustomizationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceReviews: z
        .object({
          __typename: z.literal("ModelServiceReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userNotifications: z
        .object({
          __typename: z.literal("ModelUserNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userBookmarks: z
        .object({
          __typename: z.literal("ModelUserBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userInvoices: z
        .object({
          __typename: z.literal("ModelUserInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userReports: z
        .object({
          __typename: z.literal("ModelUserReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userPreference: z
        .object({
          __typename: z.literal("ModelUserPreferenceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      verifications: z
        .object({
          __typename: z.literal("ModelVerificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      preferredContactTime: z.string().optional().nullable(),
      serviceInterestedIn: z.string().optional().nullable(),
      curentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      isEmailVerified: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userWalletId: z.string().optional().nullable(),
      userCurentLocationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const updateUserMutationVariablesSchema = z.object({
  input: updateUserInputSchema,
  condition: modelUserConditionInputSchema.optional().nullable(),
});

export const updateUserMutationSchema = z.object({
  updateUser: z
    .object({
      __typename: z.literal("User"),
      id: z.string(),
      email: z.string(),
      password: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      dob: z.string().optional().nullable(),
      gender: genderSchema.optional().nullable(),
      phone: z.string().optional().nullable(),
      address: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      state: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      zipCode: z.string().optional().nullable(),
      profileImage: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isVerified: z.boolean().optional().nullable(),
      lastLogin: z.string().optional().nullable(),
      accountType: accountTypeSchema.optional().nullable(),
      notificationPreference: notificationPreferenceSchema
        .optional()
        .nullable(),
      languagePreference: z.string().optional().nullable(),
      currencyPreference: z.string().optional().nullable(),
      timezone: z.string().optional().nullable(),
      chatbotRequests: z.number().optional().nullable(),
      bookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      messages: z
        .object({
          __typename: z.literal("ModelMessageThreadConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      wallet: z
        .object({
          __typename: z.literal("Wallet"),
          id: z.string(),
          ownerID: z.string(),
          balance: z.number(),
          currency: z.string(),
          lastUpdated: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      transactions: z
        .object({
          __typename: z.literal("ModelTransactionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      feedbacks: z
        .object({
          __typename: z.literal("ModelFeedbackConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      subscriptions: z
        .object({
          __typename: z.literal("ModelPLMBRSubscriptionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatBots: z
        .object({
          __typename: z.literal("ModelAIChatBotConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatLogs: z
        .object({
          __typename: z.literal("ModelAIChatLogConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTrackings: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reports: z
        .object({
          __typename: z.literal("ModelReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      loyaltyPrograms: z
        .object({
          __typename: z.literal("ModelLoyaltyProgramConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      rewards: z
        .object({
          __typename: z.literal("ModelRewardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      contracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      invoices: z
        .object({
          __typename: z.literal("ModelInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      paymentMethods: z
        .object({
          __typename: z.literal("ModelPaymentMethodConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      tips: z
        .object({
          __typename: z.literal("ModelTipConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userHistories: z
        .object({
          __typename: z.literal("ModelUserHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizations: z
        .object({
          __typename: z.literal("ModelCustomizationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceReviews: z
        .object({
          __typename: z.literal("ModelServiceReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userNotifications: z
        .object({
          __typename: z.literal("ModelUserNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userBookmarks: z
        .object({
          __typename: z.literal("ModelUserBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userInvoices: z
        .object({
          __typename: z.literal("ModelUserInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userReports: z
        .object({
          __typename: z.literal("ModelUserReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userPreference: z
        .object({
          __typename: z.literal("ModelUserPreferenceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      verifications: z
        .object({
          __typename: z.literal("ModelVerificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      preferredContactTime: z.string().optional().nullable(),
      serviceInterestedIn: z.string().optional().nullable(),
      curentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      isEmailVerified: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userWalletId: z.string().optional().nullable(),
      userCurentLocationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const deleteUserMutationVariablesSchema = z.object({
  input: deleteUserInputSchema,
  condition: modelUserConditionInputSchema.optional().nullable(),
});

export const deleteUserMutationSchema = z.object({
  deleteUser: z
    .object({
      __typename: z.literal("User"),
      id: z.string(),
      email: z.string(),
      password: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      dob: z.string().optional().nullable(),
      gender: genderSchema.optional().nullable(),
      phone: z.string().optional().nullable(),
      address: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      state: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      zipCode: z.string().optional().nullable(),
      profileImage: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isVerified: z.boolean().optional().nullable(),
      lastLogin: z.string().optional().nullable(),
      accountType: accountTypeSchema.optional().nullable(),
      notificationPreference: notificationPreferenceSchema
        .optional()
        .nullable(),
      languagePreference: z.string().optional().nullable(),
      currencyPreference: z.string().optional().nullable(),
      timezone: z.string().optional().nullable(),
      chatbotRequests: z.number().optional().nullable(),
      bookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      messages: z
        .object({
          __typename: z.literal("ModelMessageThreadConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      wallet: z
        .object({
          __typename: z.literal("Wallet"),
          id: z.string(),
          ownerID: z.string(),
          balance: z.number(),
          currency: z.string(),
          lastUpdated: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      transactions: z
        .object({
          __typename: z.literal("ModelTransactionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      feedbacks: z
        .object({
          __typename: z.literal("ModelFeedbackConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      subscriptions: z
        .object({
          __typename: z.literal("ModelPLMBRSubscriptionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatBots: z
        .object({
          __typename: z.literal("ModelAIChatBotConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatLogs: z
        .object({
          __typename: z.literal("ModelAIChatLogConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTrackings: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reports: z
        .object({
          __typename: z.literal("ModelReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      loyaltyPrograms: z
        .object({
          __typename: z.literal("ModelLoyaltyProgramConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      rewards: z
        .object({
          __typename: z.literal("ModelRewardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      contracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      invoices: z
        .object({
          __typename: z.literal("ModelInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      paymentMethods: z
        .object({
          __typename: z.literal("ModelPaymentMethodConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      tips: z
        .object({
          __typename: z.literal("ModelTipConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userHistories: z
        .object({
          __typename: z.literal("ModelUserHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizations: z
        .object({
          __typename: z.literal("ModelCustomizationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceReviews: z
        .object({
          __typename: z.literal("ModelServiceReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userNotifications: z
        .object({
          __typename: z.literal("ModelUserNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userBookmarks: z
        .object({
          __typename: z.literal("ModelUserBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userInvoices: z
        .object({
          __typename: z.literal("ModelUserInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userReports: z
        .object({
          __typename: z.literal("ModelUserReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userPreference: z
        .object({
          __typename: z.literal("ModelUserPreferenceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      verifications: z
        .object({
          __typename: z.literal("ModelVerificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      preferredContactTime: z.string().optional().nullable(),
      serviceInterestedIn: z.string().optional().nullable(),
      curentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      isEmailVerified: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userWalletId: z.string().optional().nullable(),
      userCurentLocationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getTasksQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getTasksQuerySchema = z.object({
  getTasks: z
    .object({
      __typename: z.literal("Tasks"),
      id: z.string(),
      taskName: z.string(),
      taskTime: z.number(),
      Service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      tasksServiceId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listTasksQueryVariablesSchema = z.object({
  filter: modelTasksFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listTasksQuerySchema = z.object({
  listTasks: z
    .object({
      __typename: z.literal("ModelTasksConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Tasks"),
            id: z.string(),
            taskName: z.string(),
            taskTime: z.number(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            tasksServiceId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncTasksQueryVariablesSchema = z.object({
  filter: modelTasksFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncTasksQuerySchema = z.object({
  syncTasks: z
    .object({
      __typename: z.literal("ModelTasksConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Tasks"),
            id: z.string(),
            taskName: z.string(),
            taskTime: z.number(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            tasksServiceId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getServicePromotionQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getServicePromotionQuerySchema = z.object({
  getServicePromotion: z
    .object({
      __typename: z.literal("ServicePromotion"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      startDate: z.string(),
      endDate: z.string(),
      discountPercentage: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServicePromotionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listServicePromotionsQueryVariablesSchema = z.object({
  filter: modelServicePromotionFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listServicePromotionsQuerySchema = z.object({
  listServicePromotions: z
    .object({
      __typename: z.literal("ModelServicePromotionConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServicePromotion"),
            id: z.string(),
            description: z.string(),
            startDate: z.string(),
            endDate: z.string(),
            discountPercentage: z.number(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceServicePromotionsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncServicePromotionsQueryVariablesSchema = z.object({
  filter: modelServicePromotionFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncServicePromotionsQuerySchema = z.object({
  syncServicePromotions: z
    .object({
      __typename: z.literal("ModelServicePromotionConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServicePromotion"),
            id: z.string(),
            description: z.string(),
            startDate: z.string(),
            endDate: z.string(),
            discountPercentage: z.number(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceServicePromotionsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getProviderReportQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getProviderReportQuerySchema = z.object({
  getProviderReport: z
    .object({
      __typename: z.literal("ProviderReport"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderReportsId: z.string().optional().nullable(),
      providerProviderReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listProviderReportsQueryVariablesSchema = z.object({
  filter: modelProviderReportFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listProviderReportsQuerySchema = z.object({
  listProviderReports: z
    .object({
      __typename: z.literal("ModelProviderReportConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderReport"),
            id: z.string(),
            description: z.string(),
            dateReported: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceProviderReportsId: z.string().optional().nullable(),
            providerProviderReportsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncProviderReportsQueryVariablesSchema = z.object({
  filter: modelProviderReportFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncProviderReportsQuerySchema = z.object({
  syncProviderReports: z
    .object({
      __typename: z.literal("ModelProviderReportConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderReport"),
            id: z.string(),
            description: z.string(),
            dateReported: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceProviderReportsId: z.string().optional().nullable(),
            providerProviderReportsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getUserReportQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getUserReportQuerySchema = z.object({
  getUserReport: z
    .object({
      __typename: z.literal("UserReport"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserReportsId: z.string().optional().nullable(),
      userUserReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listUserReportsQueryVariablesSchema = z.object({
  filter: modelUserReportFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listUserReportsQuerySchema = z.object({
  listUserReports: z
    .object({
      __typename: z.literal("ModelUserReportConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("UserReport"),
            id: z.string(),
            description: z.string(),
            dateReported: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceUserReportsId: z.string().optional().nullable(),
            userUserReportsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncUserReportsQueryVariablesSchema = z.object({
  filter: modelUserReportFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncUserReportsQuerySchema = z.object({
  syncUserReports: z
    .object({
      __typename: z.literal("ModelUserReportConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("UserReport"),
            id: z.string(),
            description: z.string(),
            dateReported: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceUserReportsId: z.string().optional().nullable(),
            userUserReportsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getUserInvoiceQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getUserInvoiceQuerySchema = z.object({
  getUserInvoice: z
    .object({
      __typename: z.literal("UserInvoice"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      dateIssued: z.string(),
      dueDate: z.string(),
      status: invoiceStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserInvoicesId: z.string().optional().nullable(),
      userUserInvoicesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listUserInvoicesQueryVariablesSchema = z.object({
  filter: modelUserInvoiceFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listUserInvoicesQuerySchema = z.object({
  listUserInvoices: z
    .object({
      __typename: z.literal("ModelUserInvoiceConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("UserInvoice"),
            id: z.string(),
            amount: z.number(),
            dateIssued: z.string(),
            dueDate: z.string(),
            status: invoiceStatusSchema.optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceUserInvoicesId: z.string().optional().nullable(),
            userUserInvoicesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncUserInvoicesQueryVariablesSchema = z.object({
  filter: modelUserInvoiceFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncUserInvoicesQuerySchema = z.object({
  syncUserInvoices: z
    .object({
      __typename: z.literal("ModelUserInvoiceConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("UserInvoice"),
            id: z.string(),
            amount: z.number(),
            dateIssued: z.string(),
            dueDate: z.string(),
            status: invoiceStatusSchema.optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceUserInvoicesId: z.string().optional().nullable(),
            userUserInvoicesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getProviderBookmarkQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getProviderBookmarkQuerySchema = z.object({
  getProviderBookmark: z
    .object({
      __typename: z.literal("ProviderBookmark"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderBookmarksId: z.string().optional().nullable(),
      providerProviderBookmarksId: z.string().optional().nullable(),
      userProviderBookmarksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listProviderBookmarksQueryVariablesSchema = z.object({
  filter: modelProviderBookmarkFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listProviderBookmarksQuerySchema = z.object({
  listProviderBookmarks: z
    .object({
      __typename: z.literal("ModelProviderBookmarkConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderBookmark"),
            id: z.string(),
            dateBookmarked: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceProviderBookmarksId: z.string().optional().nullable(),
            providerProviderBookmarksId: z.string().optional().nullable(),
            userProviderBookmarksId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncProviderBookmarksQueryVariablesSchema = z.object({
  filter: modelProviderBookmarkFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncProviderBookmarksQuerySchema = z.object({
  syncProviderBookmarks: z
    .object({
      __typename: z.literal("ModelProviderBookmarkConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderBookmark"),
            id: z.string(),
            dateBookmarked: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceProviderBookmarksId: z.string().optional().nullable(),
            providerProviderBookmarksId: z.string().optional().nullable(),
            userProviderBookmarksId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getUserBookmarkQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getUserBookmarkQuerySchema = z.object({
  getUserBookmark: z
    .object({
      __typename: z.literal("UserBookmark"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserBookmarksId: z.string().optional().nullable(),
      userUserBookmarksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listUserBookmarksQueryVariablesSchema = z.object({
  filter: modelUserBookmarkFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listUserBookmarksQuerySchema = z.object({
  listUserBookmarks: z
    .object({
      __typename: z.literal("ModelUserBookmarkConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("UserBookmark"),
            id: z.string(),
            dateBookmarked: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceUserBookmarksId: z.string().optional().nullable(),
            userUserBookmarksId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncUserBookmarksQueryVariablesSchema = z.object({
  filter: modelUserBookmarkFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncUserBookmarksQuerySchema = z.object({
  syncUserBookmarks: z
    .object({
      __typename: z.literal("ModelUserBookmarkConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("UserBookmark"),
            id: z.string(),
            dateBookmarked: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceUserBookmarksId: z.string().optional().nullable(),
            userUserBookmarksId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getProviderNotificationQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getProviderNotificationQuerySchema = z.object({
  getProviderNotification: z
    .object({
      __typename: z.literal("ProviderNotification"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderNotificationsId: z.string().optional().nullable(),
      providerProviderNotificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listProviderNotificationsQueryVariablesSchema = z.object({
  filter: modelProviderNotificationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listProviderNotificationsQuerySchema = z.object({
  listProviderNotifications: z
    .object({
      __typename: z.literal("ModelProviderNotificationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderNotification"),
            id: z.string(),
            content: z.string(),
            dateSent: z.string(),
            status: notificationStatusSchema.optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceProviderNotificationsId: z.string().optional().nullable(),
            providerProviderNotificationsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncProviderNotificationsQueryVariablesSchema = z.object({
  filter: modelProviderNotificationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncProviderNotificationsQuerySchema = z.object({
  syncProviderNotifications: z
    .object({
      __typename: z.literal("ModelProviderNotificationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderNotification"),
            id: z.string(),
            content: z.string(),
            dateSent: z.string(),
            status: notificationStatusSchema.optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceProviderNotificationsId: z.string().optional().nullable(),
            providerProviderNotificationsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getUserNotificationQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getUserNotificationQuerySchema = z.object({
  getUserNotification: z
    .object({
      __typename: z.literal("UserNotification"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserNotificationsId: z.string().optional().nullable(),
      userUserNotificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listUserNotificationsQueryVariablesSchema = z.object({
  filter: modelUserNotificationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listUserNotificationsQuerySchema = z.object({
  listUserNotifications: z
    .object({
      __typename: z.literal("ModelUserNotificationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("UserNotification"),
            id: z.string(),
            content: z.string(),
            dateSent: z.string(),
            status: notificationStatusSchema.optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceUserNotificationsId: z.string().optional().nullable(),
            userUserNotificationsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncUserNotificationsQueryVariablesSchema = z.object({
  filter: modelUserNotificationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncUserNotificationsQuerySchema = z.object({
  syncUserNotifications: z
    .object({
      __typename: z.literal("ModelUserNotificationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("UserNotification"),
            id: z.string(),
            content: z.string(),
            dateSent: z.string(),
            status: notificationStatusSchema.optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceUserNotificationsId: z.string().optional().nullable(),
            userUserNotificationsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getServiceDiscountQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getServiceDiscountQuerySchema = z.object({
  getServiceDiscount: z
    .object({
      __typename: z.literal("ServiceDiscount"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      discountPercentage: z.number(),
      startDate: z.string(),
      endDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceDiscountsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listServiceDiscountsQueryVariablesSchema = z.object({
  filter: modelServiceDiscountFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listServiceDiscountsQuerySchema = z.object({
  listServiceDiscounts: z
    .object({
      __typename: z.literal("ModelServiceDiscountConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceDiscount"),
            id: z.string(),
            discountPercentage: z.number(),
            startDate: z.string(),
            endDate: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceServiceDiscountsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncServiceDiscountsQueryVariablesSchema = z.object({
  filter: modelServiceDiscountFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncServiceDiscountsQuerySchema = z.object({
  syncServiceDiscounts: z
    .object({
      __typename: z.literal("ModelServiceDiscountConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceDiscount"),
            id: z.string(),
            discountPercentage: z.number(),
            startDate: z.string(),
            endDate: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceServiceDiscountsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getProviderAvailabilityQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getProviderAvailabilityQuerySchema = z.object({
  getProviderAvailability: z
    .object({
      __typename: z.literal("ProviderAvailability"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      startDate: z.string(),
      endDate: z.string(),
      isScheduled: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAvailabilitiesId: z.string().optional().nullable(),
      providerProviderAvailabilityId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listProviderAvailabilitiesQueryVariablesSchema = z.object({
  filter: modelProviderAvailabilityFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listProviderAvailabilitiesQuerySchema = z.object({
  listProviderAvailabilities: z
    .object({
      __typename: z.literal("ModelProviderAvailabilityConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderAvailability"),
            id: z.string(),
            startDate: z.string(),
            endDate: z.string(),
            isScheduled: z.boolean().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceProviderAvailabilitiesId: z.string().optional().nullable(),
            providerProviderAvailabilityId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncProviderAvailabilitiesQueryVariablesSchema = z.object({
  filter: modelProviderAvailabilityFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncProviderAvailabilitiesQuerySchema = z.object({
  syncProviderAvailabilities: z
    .object({
      __typename: z.literal("ModelProviderAvailabilityConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderAvailability"),
            id: z.string(),
            startDate: z.string(),
            endDate: z.string(),
            isScheduled: z.boolean().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceProviderAvailabilitiesId: z.string().optional().nullable(),
            providerProviderAvailabilityId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getUserPreferenceQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getUserPreferenceQuerySchema = z.object({
  getUserPreference: z
    .object({
      __typename: z.literal("UserPreference"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      preferenceType: z.string(),
      preferenceValue: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserPreferencesId: z.string().optional().nullable(),
      userUserPreferenceId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listUserPreferencesQueryVariablesSchema = z.object({
  filter: modelUserPreferenceFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listUserPreferencesQuerySchema = z.object({
  listUserPreferences: z
    .object({
      __typename: z.literal("ModelUserPreferenceConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("UserPreference"),
            id: z.string(),
            preferenceType: z.string(),
            preferenceValue: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceUserPreferencesId: z.string().optional().nullable(),
            userUserPreferenceId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncUserPreferencesQueryVariablesSchema = z.object({
  filter: modelUserPreferenceFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncUserPreferencesQuerySchema = z.object({
  syncUserPreferences: z
    .object({
      __typename: z.literal("ModelUserPreferenceConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("UserPreference"),
            id: z.string(),
            preferenceType: z.string(),
            preferenceValue: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceUserPreferencesId: z.string().optional().nullable(),
            userUserPreferenceId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getProviderCertificationQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getProviderCertificationQuerySchema = z.object({
  getProviderCertification: z
    .object({
      __typename: z.literal("ProviderCertification"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      certificationName: z.string(),
      issuedBy: z.string(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderCertificationsId: z.string().optional().nullable(),
      providerProviderCertificationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listProviderCertificationsQueryVariablesSchema = z.object({
  filter: modelProviderCertificationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listProviderCertificationsQuerySchema = z.object({
  listProviderCertifications: z
    .object({
      __typename: z.literal("ModelProviderCertificationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderCertification"),
            id: z.string(),
            certificationName: z.string(),
            issuedBy: z.string(),
            validFrom: z.string(),
            validUntil: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceProviderCertificationsId: z.string().optional().nullable(),
            providerProviderCertificationId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncProviderCertificationsQueryVariablesSchema = z.object({
  filter: modelProviderCertificationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncProviderCertificationsQuerySchema = z.object({
  syncProviderCertifications: z
    .object({
      __typename: z.literal("ModelProviderCertificationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderCertification"),
            id: z.string(),
            certificationName: z.string(),
            issuedBy: z.string(),
            validFrom: z.string(),
            validUntil: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceProviderCertificationsId: z.string().optional().nullable(),
            providerProviderCertificationId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getServiceVideoQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getServiceVideoQuerySchema = z.object({
  getServiceVideo: z
    .object({
      __typename: z.literal("ServiceVideo"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      videoURL: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceVideosId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listServiceVideosQueryVariablesSchema = z.object({
  filter: modelServiceVideoFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listServiceVideosQuerySchema = z.object({
  listServiceVideos: z
    .object({
      __typename: z.literal("ModelServiceVideoConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceVideo"),
            id: z.string(),
            videoURL: z.string(),
            description: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceServiceVideosId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncServiceVideosQueryVariablesSchema = z.object({
  filter: modelServiceVideoFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncServiceVideosQuerySchema = z.object({
  syncServiceVideos: z
    .object({
      __typename: z.literal("ModelServiceVideoConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceVideo"),
            id: z.string(),
            videoURL: z.string(),
            description: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceServiceVideosId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getServiceImageQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getServiceImageQuerySchema = z.object({
  getServiceImage: z
    .object({
      __typename: z.literal("ServiceImage"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      imageURL: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceImagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listServiceImagesQueryVariablesSchema = z.object({
  filter: modelServiceImageFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listServiceImagesQuerySchema = z.object({
  listServiceImages: z
    .object({
      __typename: z.literal("ModelServiceImageConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceImage"),
            id: z.string(),
            imageURL: z.string(),
            description: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceServiceImagesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncServiceImagesQueryVariablesSchema = z.object({
  filter: modelServiceImageFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncServiceImagesQuerySchema = z.object({
  syncServiceImages: z
    .object({
      __typename: z.literal("ModelServiceImageConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceImage"),
            id: z.string(),
            imageURL: z.string(),
            description: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceServiceImagesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getServiceReviewQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getServiceReviewQuerySchema = z.object({
  getServiceReview: z
    .object({
      __typename: z.literal("ServiceReview"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      rating: z.number(),
      comment: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceReviewsId: z.string().optional().nullable(),
      userServiceReviewsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listServiceReviewsQueryVariablesSchema = z.object({
  filter: modelServiceReviewFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listServiceReviewsQuerySchema = z.object({
  listServiceReviews: z
    .object({
      __typename: z.literal("ModelServiceReviewConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceReview"),
            id: z.string(),
            rating: z.number(),
            comment: z.string(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceServiceReviewsId: z.string().optional().nullable(),
            userServiceReviewsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncServiceReviewsQueryVariablesSchema = z.object({
  filter: modelServiceReviewFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncServiceReviewsQuerySchema = z.object({
  syncServiceReviews: z
    .object({
      __typename: z.literal("ModelServiceReviewConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceReview"),
            id: z.string(),
            rating: z.number(),
            comment: z.string(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceServiceReviewsId: z.string().optional().nullable(),
            userServiceReviewsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getAIDiagnosticsQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getAIDiagnosticsQuerySchema = z.object({
  getAIDiagnostics: z
    .object({
      __typename: z.literal("AIDiagnostics"),
      id: z.string(),
      aiChatBot: z
        .object({
          __typename: z.literal("AIChatBot"),
          id: z.string(),
          name: z.string(),
          version: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userAiChatBotsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      diagnosticData: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      aIChatBotDiagnosticsId: z.string().optional().nullable(),
      serviceAiDiagnosticsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listAIDiagnosticsQueryVariablesSchema = z.object({
  filter: modelAIDiagnosticsFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listAIDiagnosticsQuerySchema = z.object({
  listAIDiagnostics: z
    .object({
      __typename: z.literal("ModelAIDiagnosticsConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("AIDiagnostics"),
            id: z.string(),
            diagnosticData: z.string(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            aIChatBotDiagnosticsId: z.string().optional().nullable(),
            serviceAiDiagnosticsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncAIDiagnosticsQueryVariablesSchema = z.object({
  filter: modelAIDiagnosticsFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncAIDiagnosticsQuerySchema = z.object({
  syncAIDiagnostics: z
    .object({
      __typename: z.literal("ModelAIDiagnosticsConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("AIDiagnostics"),
            id: z.string(),
            diagnosticData: z.string(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            aIChatBotDiagnosticsId: z.string().optional().nullable(),
            serviceAiDiagnosticsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getCustomizationQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getCustomizationQuerySchema = z.object({
  getCustomization: z
    .object({
      __typename: z.literal("Customization"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizationType: z.string(),
      customizationValue: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceCustomizationsId: z.string().optional().nullable(),
      userCustomizationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listCustomizationsQueryVariablesSchema = z.object({
  filter: modelCustomizationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listCustomizationsQuerySchema = z.object({
  listCustomizations: z
    .object({
      __typename: z.literal("ModelCustomizationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Customization"),
            id: z.string(),
            customizationType: z.string(),
            customizationValue: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceCustomizationsId: z.string().optional().nullable(),
            userCustomizationsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncCustomizationsQueryVariablesSchema = z.object({
  filter: modelCustomizationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncCustomizationsQuerySchema = z.object({
  syncCustomizations: z
    .object({
      __typename: z.literal("ModelCustomizationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Customization"),
            id: z.string(),
            customizationType: z.string(),
            customizationValue: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceCustomizationsId: z.string().optional().nullable(),
            userCustomizationsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getExpenseQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getExpenseQuerySchema = z.object({
  getExpense: z
    .object({
      __typename: z.literal("Expense"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      description: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceExpensesId: z.string().optional().nullable(),
      providerExpensesId: z.string().optional().nullable(),
      userExpensesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listExpensesQueryVariablesSchema = z.object({
  filter: modelExpenseFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listExpensesQuerySchema = z.object({
  listExpenses: z
    .object({
      __typename: z.literal("ModelExpenseConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Expense"),
            id: z.string(),
            amount: z.number(),
            description: z.string(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceExpensesId: z.string().optional().nullable(),
            providerExpensesId: z.string().optional().nullable(),
            userExpensesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncExpensesQueryVariablesSchema = z.object({
  filter: modelExpenseFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncExpensesQuerySchema = z.object({
  syncExpenses: z
    .object({
      __typename: z.literal("ModelExpenseConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Expense"),
            id: z.string(),
            amount: z.number(),
            description: z.string(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceExpensesId: z.string().optional().nullable(),
            providerExpensesId: z.string().optional().nullable(),
            userExpensesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getFavoriteProviderQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getFavoriteProviderQuerySchema = z.object({
  getFavoriteProvider: z
    .object({
      __typename: z.literal("FavoriteProvider"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateAdded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceFavoriteProvidersId: z.string().optional().nullable(),
      providerFavoriteProvidersId: z.string().optional().nullable(),
      userFavoriteProvidersId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listFavoriteProvidersQueryVariablesSchema = z.object({
  filter: modelFavoriteProviderFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listFavoriteProvidersQuerySchema = z.object({
  listFavoriteProviders: z
    .object({
      __typename: z.literal("ModelFavoriteProviderConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("FavoriteProvider"),
            id: z.string(),
            dateAdded: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceFavoriteProvidersId: z.string().optional().nullable(),
            providerFavoriteProvidersId: z.string().optional().nullable(),
            userFavoriteProvidersId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncFavoriteProvidersQueryVariablesSchema = z.object({
  filter: modelFavoriteProviderFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncFavoriteProvidersQuerySchema = z.object({
  syncFavoriteProviders: z
    .object({
      __typename: z.literal("ModelFavoriteProviderConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("FavoriteProvider"),
            id: z.string(),
            dateAdded: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceFavoriteProvidersId: z.string().optional().nullable(),
            providerFavoriteProvidersId: z.string().optional().nullable(),
            userFavoriteProvidersId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getUserHistoryQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getUserHistoryQuerySchema = z.object({
  getUserHistory: z
    .object({
      __typename: z.literal("UserHistory"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      action: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserHistoriesId: z.string().optional().nullable(),
      userUserHistoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listUserHistoriesQueryVariablesSchema = z.object({
  filter: modelUserHistoryFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listUserHistoriesQuerySchema = z.object({
  listUserHistories: z
    .object({
      __typename: z.literal("ModelUserHistoryConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("UserHistory"),
            id: z.string(),
            action: z.string(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceUserHistoriesId: z.string().optional().nullable(),
            userUserHistoriesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncUserHistoriesQueryVariablesSchema = z.object({
  filter: modelUserHistoryFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncUserHistoriesQuerySchema = z.object({
  syncUserHistories: z
    .object({
      __typename: z.literal("ModelUserHistoryConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("UserHistory"),
            id: z.string(),
            action: z.string(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceUserHistoriesId: z.string().optional().nullable(),
            userUserHistoriesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getProviderAwardQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getProviderAwardQuerySchema = z.object({
  getProviderAward: z
    .object({
      __typename: z.literal("ProviderAward"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      awardName: z.string(),
      awardedBy: z.string(),
      dateAwarded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAwardsId: z.string().optional().nullable(),
      providerProviderAwardsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listProviderAwardsQueryVariablesSchema = z.object({
  filter: modelProviderAwardFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listProviderAwardsQuerySchema = z.object({
  listProviderAwards: z
    .object({
      __typename: z.literal("ModelProviderAwardConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderAward"),
            id: z.string(),
            awardName: z.string(),
            awardedBy: z.string(),
            dateAwarded: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceProviderAwardsId: z.string().optional().nullable(),
            providerProviderAwardsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncProviderAwardsQueryVariablesSchema = z.object({
  filter: modelProviderAwardFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncProviderAwardsQuerySchema = z.object({
  syncProviderAwards: z
    .object({
      __typename: z.literal("ModelProviderAwardConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderAward"),
            id: z.string(),
            awardName: z.string(),
            awardedBy: z.string(),
            dateAwarded: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceProviderAwardsId: z.string().optional().nullable(),
            providerProviderAwardsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getReferralQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getReferralQuerySchema = z.object({
  getReferral: z
    .object({
      __typename: z.literal("Referral"),
      id: z.string(),
      referrer: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      referred: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateReferred: z.string(),
      reward: z
        .object({
          __typename: z.literal("Reward"),
          id: z.string(),
          rewardName: z.string(),
          description: z.string(),
          value: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          loyaltyProgramRewardsId: z.string().optional().nullable(),
          userRewardsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      rewardReferralsId: z.string().optional().nullable(),
      serviceReferralsId: z.string().optional().nullable(),
      providerProviderReferralsId: z.string().optional().nullable(),
      userReferralsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listReferralsQueryVariablesSchema = z.object({
  filter: modelReferralFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listReferralsQuerySchema = z.object({
  listReferrals: z
    .object({
      __typename: z.literal("ModelReferralConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Referral"),
            id: z.string(),
            dateReferred: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            rewardReferralsId: z.string().optional().nullable(),
            serviceReferralsId: z.string().optional().nullable(),
            providerProviderReferralsId: z.string().optional().nullable(),
            userReferralsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncReferralsQueryVariablesSchema = z.object({
  filter: modelReferralFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncReferralsQuerySchema = z.object({
  syncReferrals: z
    .object({
      __typename: z.literal("ModelReferralConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Referral"),
            id: z.string(),
            dateReferred: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            rewardReferralsId: z.string().optional().nullable(),
            serviceReferralsId: z.string().optional().nullable(),
            providerProviderReferralsId: z.string().optional().nullable(),
            userReferralsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getTipQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getTipQuerySchema = z.object({
  getTip: z
    .object({
      __typename: z.literal("Tip"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderTipsId: z.string().optional().nullable(),
      userTipsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listTipsQueryVariablesSchema = z.object({
  filter: modelTipFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listTipsQuerySchema = z.object({
  listTips: z
    .object({
      __typename: z.literal("ModelTipConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Tip"),
            id: z.string(),
            amount: z.number(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerProviderTipsId: z.string().optional().nullable(),
            userTipsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncTipsQueryVariablesSchema = z.object({
  filter: modelTipFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncTipsQuerySchema = z.object({
  syncTips: z
    .object({
      __typename: z.literal("ModelTipConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Tip"),
            id: z.string(),
            amount: z.number(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerProviderTipsId: z.string().optional().nullable(),
            userTipsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getPaymentMethodQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getPaymentMethodQuerySchema = z.object({
  getPaymentMethod: z
    .object({
      __typename: z.literal("PaymentMethod"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      cardNumber: z.string(),
      expiryDate: z.string(),
      cardType: cardTypeSchema.optional().nullable(),
      stripeCustomerId: z.string().optional().nullable(),
      stripeCardId: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userPaymentMethodsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listPaymentMethodsQueryVariablesSchema = z.object({
  filter: modelPaymentMethodFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listPaymentMethodsQuerySchema = z.object({
  listPaymentMethods: z
    .object({
      __typename: z.literal("ModelPaymentMethodConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("PaymentMethod"),
            id: z.string(),
            cardNumber: z.string(),
            expiryDate: z.string(),
            cardType: cardTypeSchema.optional().nullable(),
            stripeCustomerId: z.string().optional().nullable(),
            stripeCardId: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userPaymentMethodsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncPaymentMethodsQueryVariablesSchema = z.object({
  filter: modelPaymentMethodFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncPaymentMethodsQuerySchema = z.object({
  syncPaymentMethods: z
    .object({
      __typename: z.literal("ModelPaymentMethodConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("PaymentMethod"),
            id: z.string(),
            cardNumber: z.string(),
            expiryDate: z.string(),
            cardType: cardTypeSchema.optional().nullable(),
            stripeCustomerId: z.string().optional().nullable(),
            stripeCardId: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userPaymentMethodsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getInvoiceQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getInvoiceQuerySchema = z.object({
  getInvoice: z
    .object({
      __typename: z.literal("Invoice"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      dateIssued: z.string(),
      dueDate: z.string(),
      status: invoiceStatusSchema.optional().nullable(),
      services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderInvoicesId: z.string().optional().nullable(),
      userInvoicesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listInvoicesQueryVariablesSchema = z.object({
  filter: modelInvoiceFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listInvoicesQuerySchema = z.object({
  listInvoices: z
    .object({
      __typename: z.literal("ModelInvoiceConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Invoice"),
            id: z.string(),
            amount: z.number(),
            dateIssued: z.string(),
            dueDate: z.string(),
            status: invoiceStatusSchema.optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerProviderInvoicesId: z.string().optional().nullable(),
            userInvoicesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncInvoicesQueryVariablesSchema = z.object({
  filter: modelInvoiceFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncInvoicesQuerySchema = z.object({
  syncInvoices: z
    .object({
      __typename: z.literal("ModelInvoiceConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Invoice"),
            id: z.string(),
            amount: z.number(),
            dateIssued: z.string(),
            dueDate: z.string(),
            status: invoiceStatusSchema.optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerProviderInvoicesId: z.string().optional().nullable(),
            userInvoicesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getContractQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getContractQuerySchema = z.object({
  getContract: z
    .object({
      __typename: z.literal("Contract"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      startDate: z.string(),
      endDate: z.string(),
      terms: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceContractsId: z.string().optional().nullable(),
      providerProviderContractsId: z.string().optional().nullable(),
      userContractsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listContractsQueryVariablesSchema = z.object({
  filter: modelContractFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listContractsQuerySchema = z.object({
  listContracts: z
    .object({
      __typename: z.literal("ModelContractConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Contract"),
            id: z.string(),
            startDate: z.string(),
            endDate: z.string(),
            terms: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceContractsId: z.string().optional().nullable(),
            providerProviderContractsId: z.string().optional().nullable(),
            userContractsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncContractsQueryVariablesSchema = z.object({
  filter: modelContractFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncContractsQuerySchema = z.object({
  syncContracts: z
    .object({
      __typename: z.literal("ModelContractConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Contract"),
            id: z.string(),
            startDate: z.string(),
            endDate: z.string(),
            terms: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceContractsId: z.string().optional().nullable(),
            providerProviderContractsId: z.string().optional().nullable(),
            userContractsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getNicheServiceQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getNicheServiceQuerySchema = z.object({
  getNicheService: z
    .object({
      __typename: z.literal("NicheService"),
      id: z.string(),
      serviceName: z.string(),
      description: z.string(),
      providers: z
        .object({
          __typename: z.literal("ModelProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listNicheServicesQueryVariablesSchema = z.object({
  filter: modelNicheServiceFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listNicheServicesQuerySchema = z.object({
  listNicheServices: z
    .object({
      __typename: z.literal("ModelNicheServiceConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("NicheService"),
            id: z.string(),
            serviceName: z.string(),
            description: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncNicheServicesQueryVariablesSchema = z.object({
  filter: modelNicheServiceFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncNicheServicesQuerySchema = z.object({
  syncNicheServices: z
    .object({
      __typename: z.literal("ModelNicheServiceConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("NicheService"),
            id: z.string(),
            serviceName: z.string(),
            description: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getServicePackageQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getServicePackageQuerySchema = z.object({
  getServicePackage: z
    .object({
      __typename: z.literal("ServicePackage"),
      id: z.string(),
      packageName: z.string(),
      services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      discount: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listServicePackagesQueryVariablesSchema = z.object({
  filter: modelServicePackageFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listServicePackagesQuerySchema = z.object({
  listServicePackages: z
    .object({
      __typename: z.literal("ModelServicePackageConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServicePackage"),
            id: z.string(),
            packageName: z.string(),
            discount: z.number(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncServicePackagesQueryVariablesSchema = z.object({
  filter: modelServicePackageFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncServicePackagesQuerySchema = z.object({
  syncServicePackages: z
    .object({
      __typename: z.literal("ModelServicePackageConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServicePackage"),
            id: z.string(),
            packageName: z.string(),
            discount: z.number(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getRewardQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getRewardQuerySchema = z.object({
  getReward: z
    .object({
      __typename: z.literal("Reward"),
      id: z.string(),
      rewardName: z.string(),
      description: z.string(),
      value: z.number(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      loyaltyProgramRewardsId: z.string().optional().nullable(),
      userRewardsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listRewardsQueryVariablesSchema = z.object({
  filter: modelRewardFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listRewardsQuerySchema = z.object({
  listRewards: z
    .object({
      __typename: z.literal("ModelRewardConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Reward"),
            id: z.string(),
            rewardName: z.string(),
            description: z.string(),
            value: z.number(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            loyaltyProgramRewardsId: z.string().optional().nullable(),
            userRewardsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncRewardsQueryVariablesSchema = z.object({
  filter: modelRewardFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncRewardsQuerySchema = z.object({
  syncRewards: z
    .object({
      __typename: z.literal("ModelRewardConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Reward"),
            id: z.string(),
            rewardName: z.string(),
            description: z.string(),
            value: z.number(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            loyaltyProgramRewardsId: z.string().optional().nullable(),
            userRewardsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getLoyaltyProgramQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getLoyaltyProgramQuerySchema = z.object({
  getLoyaltyProgram: z
    .object({
      __typename: z.literal("LoyaltyProgram"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      points: z.number(),
      rewards: z
        .object({
          __typename: z.literal("ModelRewardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userLoyaltyProgramsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listLoyaltyProgramsQueryVariablesSchema = z.object({
  filter: modelLoyaltyProgramFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listLoyaltyProgramsQuerySchema = z.object({
  listLoyaltyPrograms: z
    .object({
      __typename: z.literal("ModelLoyaltyProgramConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("LoyaltyProgram"),
            id: z.string(),
            points: z.number(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userLoyaltyProgramsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncLoyaltyProgramsQueryVariablesSchema = z.object({
  filter: modelLoyaltyProgramFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncLoyaltyProgramsQuerySchema = z.object({
  syncLoyaltyPrograms: z
    .object({
      __typename: z.literal("ModelLoyaltyProgramConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("LoyaltyProgram"),
            id: z.string(),
            points: z.number(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userLoyaltyProgramsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getVerificationQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getVerificationQuerySchema = z.object({
  getVerification: z
    .object({
      __typename: z.literal("Verification"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      verificationCode: z.string(),
      dateSent: z.string(),
      status: verificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userVerificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listVerificationsQueryVariablesSchema = z.object({
  filter: modelVerificationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listVerificationsQuerySchema = z.object({
  listVerifications: z
    .object({
      __typename: z.literal("ModelVerificationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Verification"),
            id: z.string(),
            verificationCode: z.string(),
            dateSent: z.string(),
            status: verificationStatusSchema.optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userVerificationsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncVerificationsQueryVariablesSchema = z.object({
  filter: modelVerificationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncVerificationsQuerySchema = z.object({
  syncVerifications: z
    .object({
      __typename: z.literal("ModelVerificationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Verification"),
            id: z.string(),
            verificationCode: z.string(),
            dateSent: z.string(),
            status: verificationStatusSchema.optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userVerificationsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getAnalyticsQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getAnalyticsQuerySchema = z.object({
  getAnalytics: z
    .object({
      __typename: z.literal("Analytics"),
      id: z.string(),
      userCount: z.number(),
      providerCount: z.number(),
      serviceCount: z.number(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listAnalyticsQueryVariablesSchema = z.object({
  filter: modelAnalyticsFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listAnalyticsQuerySchema = z.object({
  listAnalytics: z
    .object({
      __typename: z.literal("ModelAnalyticsConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Analytics"),
            id: z.string(),
            userCount: z.number(),
            providerCount: z.number(),
            serviceCount: z.number(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncAnalyticsQueryVariablesSchema = z.object({
  filter: modelAnalyticsFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncAnalyticsQuerySchema = z.object({
  syncAnalytics: z
    .object({
      __typename: z.literal("ModelAnalyticsConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Analytics"),
            id: z.string(),
            userCount: z.number(),
            providerCount: z.number(),
            serviceCount: z.number(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getPromoCodeQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getPromoCodeQuerySchema = z.object({
  getPromoCode: z
    .object({
      __typename: z.literal("PromoCode"),
      id: z.string(),
      code: z.string(),
      discount: z.number(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listPromoCodesQueryVariablesSchema = z.object({
  filter: modelPromoCodeFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listPromoCodesQuerySchema = z.object({
  listPromoCodes: z
    .object({
      __typename: z.literal("ModelPromoCodeConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("PromoCode"),
            id: z.string(),
            code: z.string(),
            discount: z.number(),
            validFrom: z.string(),
            validUntil: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncPromoCodesQueryVariablesSchema = z.object({
  filter: modelPromoCodeFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncPromoCodesQuerySchema = z.object({
  syncPromoCodes: z
    .object({
      __typename: z.literal("ModelPromoCodeConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("PromoCode"),
            id: z.string(),
            code: z.string(),
            discount: z.number(),
            validFrom: z.string(),
            validUntil: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getReportQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getReportQuerySchema = z.object({
  getReport: z
    .object({
      __typename: z.literal("Report"),
      id: z.string(),
      reporter: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      reportedEntity: z.string(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listReportsQueryVariablesSchema = z.object({
  filter: modelReportFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listReportsQuerySchema = z.object({
  listReports: z
    .object({
      __typename: z.literal("ModelReportConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Report"),
            id: z.string(),
            reportedEntity: z.string(),
            description: z.string(),
            dateReported: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userReportsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncReportsQueryVariablesSchema = z.object({
  filter: modelReportFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncReportsQuerySchema = z.object({
  syncReports: z
    .object({
      __typename: z.literal("ModelReportConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Report"),
            id: z.string(),
            reportedEntity: z.string(),
            description: z.string(),
            dateReported: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userReportsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getJobTrackingQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getJobTrackingQuerySchema = z.object({
  getJobTracking: z
    .object({
      __typename: z.literal("JobTracking"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      status: jobStatusSchema.optional().nullable(),
      startDate: z.string(),
      endDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceJobTrackingsId: z.string().optional().nullable(),
      providerJobTrackingId: z.string().optional().nullable(),
      userJobTrackingsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listJobTrackingsQueryVariablesSchema = z.object({
  filter: modelJobTrackingFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listJobTrackingsQuerySchema = z.object({
  listJobTrackings: z
    .object({
      __typename: z.literal("ModelJobTrackingConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("JobTracking"),
            id: z.string(),
            status: jobStatusSchema.optional().nullable(),
            startDate: z.string(),
            endDate: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceJobTrackingsId: z.string().optional().nullable(),
            providerJobTrackingId: z.string().optional().nullable(),
            userJobTrackingsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncJobTrackingsQueryVariablesSchema = z.object({
  filter: modelJobTrackingFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncJobTrackingsQuerySchema = z.object({
  syncJobTrackings: z
    .object({
      __typename: z.literal("ModelJobTrackingConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("JobTracking"),
            id: z.string(),
            status: jobStatusSchema.optional().nullable(),
            startDate: z.string(),
            endDate: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceJobTrackingsId: z.string().optional().nullable(),
            providerJobTrackingId: z.string().optional().nullable(),
            userJobTrackingsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getAIChatLogQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getAIChatLogQuerySchema = z.object({
  getAIChatLog: z
    .object({
      __typename: z.literal("AIChatLog"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatBot: z
        .object({
          __typename: z.literal("AIChatBot"),
          id: z.string(),
          name: z.string(),
          version: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userAiChatBotsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      message: z.string(),
      response: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      aIChatBotChatLogsId: z.string().optional().nullable(),
      userAiChatLogsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listAIChatLogsQueryVariablesSchema = z.object({
  filter: modelAIChatLogFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listAIChatLogsQuerySchema = z.object({
  listAIChatLogs: z
    .object({
      __typename: z.literal("ModelAIChatLogConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("AIChatLog"),
            id: z.string(),
            message: z.string(),
            response: z.string(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            aIChatBotChatLogsId: z.string().optional().nullable(),
            userAiChatLogsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncAIChatLogsQueryVariablesSchema = z.object({
  filter: modelAIChatLogFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncAIChatLogsQuerySchema = z.object({
  syncAIChatLogs: z
    .object({
      __typename: z.literal("ModelAIChatLogConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("AIChatLog"),
            id: z.string(),
            message: z.string(),
            response: z.string(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            aIChatBotChatLogsId: z.string().optional().nullable(),
            userAiChatLogsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getAIChatBotQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getAIChatBotQuerySchema = z.object({
  getAIChatBot: z
    .object({
      __typename: z.literal("AIChatBot"),
      id: z.string(),
      name: z.string(),
      version: z.string(),
      diagnostics: z
        .object({
          __typename: z.literal("ModelAIDiagnosticsConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      chatLogs: z
        .object({
          __typename: z.literal("ModelAIChatLogConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userAiChatBotsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listAIChatBotsQueryVariablesSchema = z.object({
  filter: modelAIChatBotFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listAIChatBotsQuerySchema = z.object({
  listAIChatBots: z
    .object({
      __typename: z.literal("ModelAIChatBotConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("AIChatBot"),
            id: z.string(),
            name: z.string(),
            version: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userAiChatBotsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncAIChatBotsQueryVariablesSchema = z.object({
  filter: modelAIChatBotFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncAIChatBotsQuerySchema = z.object({
  syncAIChatBots: z
    .object({
      __typename: z.literal("ModelAIChatBotConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("AIChatBot"),
            id: z.string(),
            name: z.string(),
            version: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userAiChatBotsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getMainCategoryQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getMainCategoryQuerySchema = z.object({
  getMainCategory: z
    .object({
      __typename: z.literal("MainCategory"),
      id: z.string(),
      name: z.string(),
      descrption: z.string().optional().nullable(),
      SubCategories: z
        .object({
          __typename: z.literal("ModelSubCategoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listMainCategoriesQueryVariablesSchema = z.object({
  filter: modelMainCategoryFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listMainCategoriesQuerySchema = z.object({
  listMainCategories: z
    .object({
      __typename: z.literal("ModelMainCategoryConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("MainCategory"),
            id: z.string(),
            name: z.string(),
            descrption: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncMainCategoriesQueryVariablesSchema = z.object({
  filter: modelMainCategoryFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncMainCategoriesQuerySchema = z.object({
  syncMainCategories: z
    .object({
      __typename: z.literal("ModelMainCategoryConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("MainCategory"),
            id: z.string(),
            name: z.string(),
            descrption: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getSubCategoryQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getSubCategoryQuerySchema = z.object({
  getSubCategory: z
    .object({
      __typename: z.literal("SubCategory"),
      id: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      MainCategory: z
        .object({
          __typename: z.literal("MainCategory"),
          id: z.string(),
          name: z.string(),
          descrption: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      Services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      mainCategorySubCategoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listSubCategoriesQueryVariablesSchema = z.object({
  filter: modelSubCategoryFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listSubCategoriesQuerySchema = z.object({
  listSubCategories: z
    .object({
      __typename: z.literal("ModelSubCategoryConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("SubCategory"),
            id: z.string(),
            name: z.string(),
            description: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            mainCategorySubCategoriesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncSubCategoriesQueryVariablesSchema = z.object({
  filter: modelSubCategoryFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncSubCategoriesQuerySchema = z.object({
  syncSubCategories: z
    .object({
      __typename: z.literal("ModelSubCategoryConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("SubCategory"),
            id: z.string(),
            name: z.string(),
            description: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            mainCategorySubCategoriesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getPLMBRSubscriptionQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getPLMBRSubscriptionQuerySchema = z.object({
  getPLMBRSubscription: z
    .object({
      __typename: z.literal("PLMBRSubscription"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userSubscriptionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listPLMBRSubscriptionsQueryVariablesSchema = z.object({
  filter: modelPLMBRSubscriptionFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listPLMBRSubscriptionsQuerySchema = z.object({
  listPLMBRSubscriptions: z
    .object({
      __typename: z.literal("ModelPLMBRSubscriptionConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("PLMBRSubscription"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userSubscriptionsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncPLMBRSubscriptionsQueryVariablesSchema = z.object({
  filter: modelPLMBRSubscriptionFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncPLMBRSubscriptionsQuerySchema = z.object({
  syncPLMBRSubscriptions: z
    .object({
      __typename: z.literal("ModelPLMBRSubscriptionConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("PLMBRSubscription"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userSubscriptionsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getUserSettingsQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getUserSettingsQuerySchema = z.object({
  getUserSettings: z
    .object({
      __typename: z.literal("UserSettings"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listUserSettingsQueryVariablesSchema = z.object({
  filter: modelUserSettingsFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listUserSettingsQuerySchema = z.object({
  listUserSettings: z
    .object({
      __typename: z.literal("ModelUserSettingsConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("UserSettings"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncUserSettingsQueryVariablesSchema = z.object({
  filter: modelUserSettingsFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncUserSettingsQuerySchema = z.object({
  syncUserSettings: z
    .object({
      __typename: z.literal("ModelUserSettingsConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("UserSettings"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getProviderSettingsQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getProviderSettingsQuerySchema = z.object({
  getProviderSettings: z
    .object({
      __typename: z.literal("ProviderSettings"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listProviderSettingsQueryVariablesSchema = z.object({
  filter: modelProviderSettingsFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listProviderSettingsQuerySchema = z.object({
  listProviderSettings: z
    .object({
      __typename: z.literal("ModelProviderSettingsConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderSettings"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncProviderSettingsQueryVariablesSchema = z.object({
  filter: modelProviderSettingsFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncProviderSettingsQuerySchema = z.object({
  syncProviderSettings: z
    .object({
      __typename: z.literal("ModelProviderSettingsConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderSettings"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getPortfolioQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getPortfolioQuerySchema = z.object({
  getPortfolio: z
    .object({
      __typename: z.literal("Portfolio"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listPortfoliosQueryVariablesSchema = z.object({
  filter: modelPortfolioFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listPortfoliosQuerySchema = z.object({
  listPortfolios: z
    .object({
      __typename: z.literal("ModelPortfolioConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Portfolio"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncPortfoliosQueryVariablesSchema = z.object({
  filter: modelPortfolioFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncPortfoliosQuerySchema = z.object({
  syncPortfolios: z
    .object({
      __typename: z.literal("ModelPortfolioConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Portfolio"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getServiceVariantQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getServiceVariantQuerySchema = z.object({
  getServiceVariant: z
    .object({
      __typename: z.literal("ServiceVariant"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listServiceVariantsQueryVariablesSchema = z.object({
  filter: modelServiceVariantFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listServiceVariantsQuerySchema = z.object({
  listServiceVariants: z
    .object({
      __typename: z.literal("ModelServiceVariantConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceVariant"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncServiceVariantsQueryVariablesSchema = z.object({
  filter: modelServiceVariantFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncServiceVariantsQuerySchema = z.object({
  syncServiceVariants: z
    .object({
      __typename: z.literal("ModelServiceVariantConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceVariant"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getServiceHighlightQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getServiceHighlightQuerySchema = z.object({
  getServiceHighlight: z
    .object({
      __typename: z.literal("ServiceHighlight"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listServiceHighlightsQueryVariablesSchema = z.object({
  filter: modelServiceHighlightFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listServiceHighlightsQuerySchema = z.object({
  listServiceHighlights: z
    .object({
      __typename: z.literal("ModelServiceHighlightConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceHighlight"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncServiceHighlightsQueryVariablesSchema = z.object({
  filter: modelServiceHighlightFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncServiceHighlightsQuerySchema = z.object({
  syncServiceHighlights: z
    .object({
      __typename: z.literal("ModelServiceHighlightConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceHighlight"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getServiceTagQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getServiceTagQuerySchema = z.object({
  getServiceTag: z
    .object({
      __typename: z.literal("ServiceTag"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listServiceTagsQueryVariablesSchema = z.object({
  filter: modelServiceTagFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listServiceTagsQuerySchema = z.object({
  listServiceTags: z
    .object({
      __typename: z.literal("ModelServiceTagConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceTag"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncServiceTagsQueryVariablesSchema = z.object({
  filter: modelServiceTagFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncServiceTagsQuerySchema = z.object({
  syncServiceTags: z
    .object({
      __typename: z.literal("ModelServiceTagConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceTag"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getServiceFAQQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getServiceFAQQuerySchema = z.object({
  getServiceFAQ: z
    .object({
      __typename: z.literal("ServiceFAQ"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listServiceFAQSQueryVariablesSchema = z.object({
  filter: modelServiceFAQFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listServiceFAQSQuerySchema = z.object({
  listServiceFAQS: z
    .object({
      __typename: z.literal("ModelServiceFAQConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceFAQ"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncServiceFAQSQueryVariablesSchema = z.object({
  filter: modelServiceFAQFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncServiceFAQSQuerySchema = z.object({
  syncServiceFAQS: z
    .object({
      __typename: z.literal("ModelServiceFAQConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ServiceFAQ"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getFeedbackQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getFeedbackQuerySchema = z.object({
  getFeedback: z
    .object({
      __typename: z.literal("Feedback"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userFeedbacksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listFeedbacksQueryVariablesSchema = z.object({
  filter: modelFeedbackFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listFeedbacksQuerySchema = z.object({
  listFeedbacks: z
    .object({
      __typename: z.literal("ModelFeedbackConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Feedback"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userFeedbacksId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncFeedbacksQueryVariablesSchema = z.object({
  filter: modelFeedbackFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncFeedbacksQuerySchema = z.object({
  syncFeedbacks: z
    .object({
      __typename: z.literal("ModelFeedbackConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Feedback"),
            id: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userFeedbacksId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getEquipmentQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getEquipmentQuerySchema = z.object({
  getEquipment: z
    .object({
      __typename: z.literal("Equipment"),
      id: z.string(),
      providerID: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      category: equipmentCategorySchema.optional().nullable(),
      availabilityStatus: equipmentAvailabilityStatusSchema
        .optional()
        .nullable(),
      purchaseDate: z.string().optional().nullable(),
      maintenanceDate: z.string().optional().nullable(),
      image: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listEquipmentQueryVariablesSchema = z.object({
  filter: modelEquipmentFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listEquipmentQuerySchema = z.object({
  listEquipment: z
    .object({
      __typename: z.literal("ModelEquipmentConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Equipment"),
            id: z.string(),
            providerID: z.string(),
            name: z.string(),
            description: z.string().optional().nullable(),
            category: equipmentCategorySchema.optional().nullable(),
            availabilityStatus: equipmentAvailabilityStatusSchema
              .optional()
              .nullable(),
            purchaseDate: z.string().optional().nullable(),
            maintenanceDate: z.string().optional().nullable(),
            image: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncEquipmentQueryVariablesSchema = z.object({
  filter: modelEquipmentFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncEquipmentQuerySchema = z.object({
  syncEquipment: z
    .object({
      __typename: z.literal("ModelEquipmentConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Equipment"),
            id: z.string(),
            providerID: z.string(),
            name: z.string(),
            description: z.string().optional().nullable(),
            category: equipmentCategorySchema.optional().nullable(),
            availabilityStatus: equipmentAvailabilityStatusSchema
              .optional()
              .nullable(),
            purchaseDate: z.string().optional().nullable(),
            maintenanceDate: z.string().optional().nullable(),
            image: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getWalletQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getWalletQuerySchema = z.object({
  getWallet: z
    .object({
      __typename: z.literal("Wallet"),
      id: z.string(),
      ownerID: z.string(),
      balance: z.number(),
      currency: z.string(),
      transactions: z
        .object({
          __typename: z.literal("ModelTransactionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      lastUpdated: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listWalletsQueryVariablesSchema = z.object({
  filter: modelWalletFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listWalletsQuerySchema = z.object({
  listWallets: z
    .object({
      __typename: z.literal("ModelWalletConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Wallet"),
            id: z.string(),
            ownerID: z.string(),
            balance: z.number(),
            currency: z.string(),
            lastUpdated: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncWalletsQueryVariablesSchema = z.object({
  filter: modelWalletFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncWalletsQuerySchema = z.object({
  syncWallets: z
    .object({
      __typename: z.literal("ModelWalletConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Wallet"),
            id: z.string(),
            ownerID: z.string(),
            balance: z.number(),
            currency: z.string(),
            lastUpdated: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getTransactionQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getTransactionQuerySchema = z.object({
  getTransaction: z
    .object({
      __typename: z.literal("Transaction"),
      id: z.string(),
      wallet: z
        .object({
          __typename: z.literal("Wallet"),
          id: z.string(),
          ownerID: z.string(),
          balance: z.number(),
          currency: z.string(),
          lastUpdated: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      type: transactionTypeSchema.optional().nullable(),
      description: z.string().optional().nullable(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      walletTransactionsId: z.string().optional().nullable(),
      userTransactionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listTransactionsQueryVariablesSchema = z.object({
  filter: modelTransactionFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listTransactionsQuerySchema = z.object({
  listTransactions: z
    .object({
      __typename: z.literal("ModelTransactionConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Transaction"),
            id: z.string(),
            amount: z.number(),
            type: transactionTypeSchema.optional().nullable(),
            description: z.string().optional().nullable(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            walletTransactionsId: z.string().optional().nullable(),
            userTransactionsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncTransactionsQueryVariablesSchema = z.object({
  filter: modelTransactionFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncTransactionsQuerySchema = z.object({
  syncTransactions: z
    .object({
      __typename: z.literal("ModelTransactionConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Transaction"),
            id: z.string(),
            amount: z.number(),
            type: transactionTypeSchema.optional().nullable(),
            description: z.string().optional().nullable(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            walletTransactionsId: z.string().optional().nullable(),
            userTransactionsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getReviewQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getReviewQuerySchema = z.object({
  getReview: z
    .object({
      __typename: z.literal("Review"),
      id: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      rating: z.number(),
      comment: z.string().optional().nullable(),
      date: z.string(),
      response: z
        .object({
          __typename: z.literal("ReviewResponse"),
          id: z.string(),
          responseText: z.string(),
          responseDate: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          reviewResponseReviewId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceReviewsId: z.string().optional().nullable(),
      providerReviewsId: z.string().optional().nullable(),
      userReviewsId: z.string().optional().nullable(),
      reviewResponseId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listReviewsQueryVariablesSchema = z.object({
  filter: modelReviewFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listReviewsQuerySchema = z.object({
  listReviews: z
    .object({
      __typename: z.literal("ModelReviewConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Review"),
            id: z.string(),
            rating: z.number(),
            comment: z.string().optional().nullable(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceReviewsId: z.string().optional().nullable(),
            providerReviewsId: z.string().optional().nullable(),
            userReviewsId: z.string().optional().nullable(),
            reviewResponseId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncReviewsQueryVariablesSchema = z.object({
  filter: modelReviewFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncReviewsQuerySchema = z.object({
  syncReviews: z
    .object({
      __typename: z.literal("ModelReviewConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Review"),
            id: z.string(),
            rating: z.number(),
            comment: z.string().optional().nullable(),
            date: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceReviewsId: z.string().optional().nullable(),
            providerReviewsId: z.string().optional().nullable(),
            userReviewsId: z.string().optional().nullable(),
            reviewResponseId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getReviewResponseQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getReviewResponseQuerySchema = z.object({
  getReviewResponse: z
    .object({
      __typename: z.literal("ReviewResponse"),
      id: z.string(),
      review: z
        .object({
          __typename: z.literal("Review"),
          id: z.string(),
          rating: z.number(),
          comment: z.string().optional().nullable(),
          date: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          serviceReviewsId: z.string().optional().nullable(),
          providerReviewsId: z.string().optional().nullable(),
          userReviewsId: z.string().optional().nullable(),
          reviewResponseId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      responseText: z.string(),
      responseDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      reviewResponseReviewId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listReviewResponsesQueryVariablesSchema = z.object({
  filter: modelReviewResponseFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listReviewResponsesQuerySchema = z.object({
  listReviewResponses: z
    .object({
      __typename: z.literal("ModelReviewResponseConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ReviewResponse"),
            id: z.string(),
            responseText: z.string(),
            responseDate: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            reviewResponseReviewId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncReviewResponsesQueryVariablesSchema = z.object({
  filter: modelReviewResponseFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncReviewResponsesQuerySchema = z.object({
  syncReviewResponses: z
    .object({
      __typename: z.literal("ModelReviewResponseConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ReviewResponse"),
            id: z.string(),
            responseText: z.string(),
            responseDate: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            reviewResponseReviewId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getMessageThreadQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getMessageThreadQuerySchema = z.object({
  getMessageThread: z
    .object({
      __typename: z.literal("MessageThread"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      messages: z
        .object({
          __typename: z.literal("ModelMessageContentConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      lastMessageDate: z.string().optional().nullable(),
      lastMessageContent: z.string().optional().nullable(),
      status: messageStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderMessagesId: z.string().optional().nullable(),
      userMessagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listMessageThreadsQueryVariablesSchema = z.object({
  filter: modelMessageThreadFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listMessageThreadsQuerySchema = z.object({
  listMessageThreads: z
    .object({
      __typename: z.literal("ModelMessageThreadConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("MessageThread"),
            id: z.string(),
            lastMessageDate: z.string().optional().nullable(),
            lastMessageContent: z.string().optional().nullable(),
            status: messageStatusSchema.optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerProviderMessagesId: z.string().optional().nullable(),
            userMessagesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncMessageThreadsQueryVariablesSchema = z.object({
  filter: modelMessageThreadFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncMessageThreadsQuerySchema = z.object({
  syncMessageThreads: z
    .object({
      __typename: z.literal("ModelMessageThreadConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("MessageThread"),
            id: z.string(),
            lastMessageDate: z.string().optional().nullable(),
            lastMessageContent: z.string().optional().nullable(),
            status: messageStatusSchema.optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerProviderMessagesId: z.string().optional().nullable(),
            userMessagesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getMessageContentQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getMessageContentQuerySchema = z.object({
  getMessageContent: z
    .object({
      __typename: z.literal("MessageContent"),
      id: z.string(),
      thread: z
        .object({
          __typename: z.literal("MessageThread"),
          id: z.string(),
          lastMessageDate: z.string().optional().nullable(),
          lastMessageContent: z.string().optional().nullable(),
          status: messageStatusSchema.optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          providerProviderMessagesId: z.string().optional().nullable(),
          userMessagesId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      sender: z.string().optional().nullable(),
      content: z.string(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      messageThreadMessagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listMessageContentsQueryVariablesSchema = z.object({
  filter: modelMessageContentFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listMessageContentsQuerySchema = z.object({
  listMessageContents: z
    .object({
      __typename: z.literal("ModelMessageContentConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("MessageContent"),
            id: z.string(),
            sender: z.string().optional().nullable(),
            content: z.string(),
            timestamp: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            messageThreadMessagesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncMessageContentsQueryVariablesSchema = z.object({
  filter: modelMessageContentFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncMessageContentsQuerySchema = z.object({
  syncMessageContents: z
    .object({
      __typename: z.literal("ModelMessageContentConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("MessageContent"),
            id: z.string(),
            sender: z.string().optional().nullable(),
            content: z.string(),
            timestamp: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            messageThreadMessagesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getBookingQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getBookingQuerySchema = z.object({
  getBooking: z
    .object({
      __typename: z.literal("Booking"),
      id: z.string(),
      date: z.string(),
      startTime: z.string(),
      endTime: z.string(),
      status: bookingStatusSchema.optional().nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      location: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      price: z.number(),
      isInstantBooking: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceBookingsId: z.string().optional().nullable(),
      providerProviderBookingsId: z.string().optional().nullable(),
      userBookingsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listBookingsQueryVariablesSchema = z.object({
  filter: modelBookingFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listBookingsQuerySchema = z.object({
  listBookings: z
    .object({
      __typename: z.literal("ModelBookingConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Booking"),
            id: z.string(),
            date: z.string(),
            startTime: z.string(),
            endTime: z.string(),
            status: bookingStatusSchema.optional().nullable(),
            location: z.string().optional().nullable(),
            notes: z.string().optional().nullable(),
            price: z.number(),
            isInstantBooking: z.boolean().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceBookingsId: z.string().optional().nullable(),
            providerProviderBookingsId: z.string().optional().nullable(),
            userBookingsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncBookingsQueryVariablesSchema = z.object({
  filter: modelBookingFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncBookingsQuerySchema = z.object({
  syncBookings: z
    .object({
      __typename: z.literal("ModelBookingConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Booking"),
            id: z.string(),
            date: z.string(),
            startTime: z.string(),
            endTime: z.string(),
            status: bookingStatusSchema.optional().nullable(),
            location: z.string().optional().nullable(),
            notes: z.string().optional().nullable(),
            price: z.number(),
            isInstantBooking: z.boolean().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            serviceBookingsId: z.string().optional().nullable(),
            providerProviderBookingsId: z.string().optional().nullable(),
            userBookingsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getTeamMemberQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getTeamMemberQuerySchema = z.object({
  getTeamMember: z
    .object({
      __typename: z.literal("TeamMember"),
      id: z.string(),
      name: z.string(),
      role: z.string().optional().nullable(),
      currentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      jobSiteDuration: z.string().optional().nullable(),
      communicationLog: z
        .object({
          __typename: z.literal("ModelMessageConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      assignedJobs: z
        .object({
          __typename: z.literal("ModelJobConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerID: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerTeamMembersId: z.string().optional().nullable(),
      teamMemberCurrentLocationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listTeamMembersQueryVariablesSchema = z.object({
  filter: modelTeamMemberFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listTeamMembersQuerySchema = z.object({
  listTeamMembers: z
    .object({
      __typename: z.literal("ModelTeamMemberConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("TeamMember"),
            id: z.string(),
            name: z.string(),
            role: z.string().optional().nullable(),
            jobSiteDuration: z.string().optional().nullable(),
            providerID: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerTeamMembersId: z.string().optional().nullable(),
            teamMemberCurrentLocationId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncTeamMembersQueryVariablesSchema = z.object({
  filter: modelTeamMemberFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncTeamMembersQuerySchema = z.object({
  syncTeamMembers: z
    .object({
      __typename: z.literal("ModelTeamMemberConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("TeamMember"),
            id: z.string(),
            name: z.string(),
            role: z.string().optional().nullable(),
            jobSiteDuration: z.string().optional().nullable(),
            providerID: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerTeamMembersId: z.string().optional().nullable(),
            teamMemberCurrentLocationId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getLocationQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getLocationQuerySchema = z.object({
  getLocation: z
    .object({
      __typename: z.literal("Location"),
      id: z.string(),
      latitude: z.number(),
      longitude: z.number(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listLocationsQueryVariablesSchema = z.object({
  filter: modelLocationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listLocationsQuerySchema = z.object({
  listLocations: z
    .object({
      __typename: z.literal("ModelLocationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Location"),
            id: z.string(),
            latitude: z.number(),
            longitude: z.number(),
            timestamp: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncLocationsQueryVariablesSchema = z.object({
  filter: modelLocationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncLocationsQuerySchema = z.object({
  syncLocations: z
    .object({
      __typename: z.literal("ModelLocationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Location"),
            id: z.string(),
            latitude: z.number(),
            longitude: z.number(),
            timestamp: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getMessageQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getMessageQuerySchema = z.object({
  getMessage: z
    .object({
      __typename: z.literal("Message"),
      id: z.string(),
      sender: z.string(),
      content: z.string(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      teamMemberCommunicationLogId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listMessagesQueryVariablesSchema = z.object({
  filter: modelMessageFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listMessagesQuerySchema = z.object({
  listMessages: z
    .object({
      __typename: z.literal("ModelMessageConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Message"),
            id: z.string(),
            sender: z.string(),
            content: z.string(),
            timestamp: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            teamMemberCommunicationLogId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncMessagesQueryVariablesSchema = z.object({
  filter: modelMessageFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncMessagesQuerySchema = z.object({
  syncMessages: z
    .object({
      __typename: z.literal("ModelMessageConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Message"),
            id: z.string(),
            sender: z.string(),
            content: z.string(),
            timestamp: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            teamMemberCommunicationLogId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getJobQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getJobQuerySchema = z.object({
  getJob: z
    .object({
      __typename: z.literal("Job"),
      id: z.string(),
      description: z.string(),
      location: z.string(),
      startTime: z.string().optional().nullable(),
      endTime: z.string().optional().nullable(),
      status: jobStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      teamMemberAssignedJobsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listJobsQueryVariablesSchema = z.object({
  filter: modelJobFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listJobsQuerySchema = z.object({
  listJobs: z
    .object({
      __typename: z.literal("ModelJobConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Job"),
            id: z.string(),
            description: z.string(),
            location: z.string(),
            startTime: z.string().optional().nullable(),
            endTime: z.string().optional().nullable(),
            status: jobStatusSchema.optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            teamMemberAssignedJobsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncJobsQueryVariablesSchema = z.object({
  filter: modelJobFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncJobsQuerySchema = z.object({
  syncJobs: z
    .object({
      __typename: z.literal("ModelJobConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Job"),
            id: z.string(),
            description: z.string(),
            location: z.string(),
            startTime: z.string().optional().nullable(),
            endTime: z.string().optional().nullable(),
            status: jobStatusSchema.optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            teamMemberAssignedJobsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getServiceQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getServiceQuerySchema = z.object({
  getService: z
    .object({
      __typename: z.literal("Service"),
      id: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      price_min: z.number(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      bookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      SubCategory: z
        .object({
          __typename: z.literal("SubCategory"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          mainCategorySubCategoriesId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      servicePromotions: z
        .object({
          __typename: z.literal("ModelServicePromotionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReports: z
        .object({
          __typename: z.literal("ModelProviderReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userReports: z
        .object({
          __typename: z.literal("ModelUserReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userInvoices: z
        .object({
          __typename: z.literal("ModelUserInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userBookmarks: z
        .object({
          __typename: z.literal("ModelUserBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerNotifications: z
        .object({
          __typename: z.literal("ModelProviderNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userNotifications: z
        .object({
          __typename: z.literal("ModelUserNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceDiscounts: z
        .object({
          __typename: z.literal("ModelServiceDiscountConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAvailabilities: z
        .object({
          __typename: z.literal("ModelProviderAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userPreferences: z
        .object({
          __typename: z.literal("ModelUserPreferenceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerCertifications: z
        .object({
          __typename: z.literal("ModelProviderCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceVideos: z
        .object({
          __typename: z.literal("ModelServiceVideoConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceImages: z
        .object({
          __typename: z.literal("ModelServiceImageConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceReviews: z
        .object({
          __typename: z.literal("ModelServiceReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiDiagnostics: z
        .object({
          __typename: z.literal("ModelAIDiagnosticsConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizations: z
        .object({
          __typename: z.literal("ModelCustomizationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userHistories: z
        .object({
          __typename: z.literal("ModelUserHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAwards: z
        .object({
          __typename: z.literal("ModelProviderAwardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      contracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTrackings: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      duration: z.string().optional().nullable(),
      Materials: z.string().optional().nullable(),
      MaterialCosts: z.number().optional().nullable(),
      BookingRequirements: z.string().optional().nullable(),
      price_max: z.number(),
      Tasks: z
        .object({
          __typename: z.literal("Tasks"),
          id: z.string(),
          taskName: z.string(),
          taskTime: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          tasksServiceId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      invoiceServicesId: z.string().optional().nullable(),
      servicePackageServicesId: z.string().optional().nullable(),
      subCategoryServicesId: z.string().optional().nullable(),
      providerServicesOfferedId: z.string().optional().nullable(),
      serviceTasksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listServicesQueryVariablesSchema = z.object({
  filter: modelServiceFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listServicesQuerySchema = z.object({
  listServices: z
    .object({
      __typename: z.literal("ModelServiceConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Service"),
            id: z.string(),
            name: z.string(),
            description: z.string().optional().nullable(),
            price_min: z.number(),
            duration: z.string().optional().nullable(),
            Materials: z.string().optional().nullable(),
            MaterialCosts: z.number().optional().nullable(),
            BookingRequirements: z.string().optional().nullable(),
            price_max: z.number(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            invoiceServicesId: z.string().optional().nullable(),
            servicePackageServicesId: z.string().optional().nullable(),
            subCategoryServicesId: z.string().optional().nullable(),
            providerServicesOfferedId: z.string().optional().nullable(),
            serviceTasksId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncServicesQueryVariablesSchema = z.object({
  filter: modelServiceFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncServicesQuerySchema = z.object({
  syncServices: z
    .object({
      __typename: z.literal("ModelServiceConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Service"),
            id: z.string(),
            name: z.string(),
            description: z.string().optional().nullable(),
            price_min: z.number(),
            duration: z.string().optional().nullable(),
            Materials: z.string().optional().nullable(),
            MaterialCosts: z.number().optional().nullable(),
            BookingRequirements: z.string().optional().nullable(),
            price_max: z.number(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            invoiceServicesId: z.string().optional().nullable(),
            servicePackageServicesId: z.string().optional().nullable(),
            subCategoryServicesId: z.string().optional().nullable(),
            providerServicesOfferedId: z.string().optional().nullable(),
            serviceTasksId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getProviderQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getProviderQuerySchema = z.object({
  getProvider: z
    .object({
      __typename: z.literal("Provider"),
      id: z.string(),
      email: z.string(),
      password: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      dob: z.string().optional().nullable(),
      gender: genderSchema.optional().nullable(),
      phone: z.string().optional().nullable(),
      address: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      state: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      zipCode: z.string().optional().nullable(),
      profileImage: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isVerified: z.boolean().optional().nullable(),
      lastLogin: z.string().optional().nullable(),
      accountType: accountTypeSchema.optional().nullable(),
      notificationPreference: notificationPreferenceSchema
        .optional()
        .nullable(),
      languagePreference: z.string().optional().nullable(),
      currencyPreference: z.string().optional().nullable(),
      timezone: z.string().optional().nullable(),
      chatbotRequests: z.number().optional().nullable(),
      servicesOffered: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      teamMembers: z
        .object({
          __typename: z.literal("ModelTeamMemberConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      availability: z
        .object({
          __typename: z.literal("ModelAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      certifications: z
        .object({
          __typename: z.literal("ModelCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      qualifications: z
        .object({
          __typename: z.literal("ModelQualificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      specializations: z
        .object({
          __typename: z.literal("ModelSpecializationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerMessages: z
        .object({
          __typename: z.literal("ModelMessageThreadConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerContracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerInvoices: z
        .object({
          __typename: z.literal("ModelInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerTips: z
        .object({
          __typename: z.literal("ModelTipConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReferrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerHistories: z
        .object({
          __typename: z.literal("ModelProviderHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerNotifications: z
        .object({
          __typename: z.literal("ModelProviderNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReports: z
        .object({
          __typename: z.literal("ModelProviderReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAvailability: z
        .object({
          __typename: z.literal("ModelProviderAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerCertification: z
        .object({
          __typename: z.literal("ModelProviderCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAwards: z
        .object({
          __typename: z.literal("ModelProviderAwardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTracking: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      currentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      isInstantBookingAvailable: z.boolean().optional().nullable(),
      Tasks: z
        .object({
          __typename: z.literal("Tasks"),
          id: z.string(),
          taskName: z.string(),
          taskTime: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          tasksServiceId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      isEmailVerified: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      nicheServiceProvidersId: z.string().optional().nullable(),
      providerCurrentLocationId: z.string().optional().nullable(),
      providerTasksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listProvidersQueryVariablesSchema = z.object({
  filter: modelProviderFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listProvidersQuerySchema = z.object({
  listProviders: z
    .object({
      __typename: z.literal("ModelProviderConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Provider"),
            id: z.string(),
            email: z.string(),
            password: z.string(),
            firstName: z.string(),
            lastName: z.string(),
            dob: z.string().optional().nullable(),
            gender: genderSchema.optional().nullable(),
            phone: z.string().optional().nullable(),
            address: z.string().optional().nullable(),
            city: z.string().optional().nullable(),
            state: z.string().optional().nullable(),
            country: z.string().optional().nullable(),
            zipCode: z.string().optional().nullable(),
            profileImage: z.string().optional().nullable(),
            isActive: z.boolean().optional().nullable(),
            isVerified: z.boolean().optional().nullable(),
            lastLogin: z.string().optional().nullable(),
            accountType: accountTypeSchema.optional().nullable(),
            notificationPreference: notificationPreferenceSchema
              .optional()
              .nullable(),
            languagePreference: z.string().optional().nullable(),
            currencyPreference: z.string().optional().nullable(),
            timezone: z.string().optional().nullable(),
            chatbotRequests: z.number().optional().nullable(),
            isInstantBookingAvailable: z.boolean().optional().nullable(),
            isEmailVerified: z.boolean().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            nicheServiceProvidersId: z.string().optional().nullable(),
            providerCurrentLocationId: z.string().optional().nullable(),
            providerTasksId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncProvidersQueryVariablesSchema = z.object({
  filter: modelProviderFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncProvidersQuerySchema = z.object({
  syncProviders: z
    .object({
      __typename: z.literal("ModelProviderConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Provider"),
            id: z.string(),
            email: z.string(),
            password: z.string(),
            firstName: z.string(),
            lastName: z.string(),
            dob: z.string().optional().nullable(),
            gender: genderSchema.optional().nullable(),
            phone: z.string().optional().nullable(),
            address: z.string().optional().nullable(),
            city: z.string().optional().nullable(),
            state: z.string().optional().nullable(),
            country: z.string().optional().nullable(),
            zipCode: z.string().optional().nullable(),
            profileImage: z.string().optional().nullable(),
            isActive: z.boolean().optional().nullable(),
            isVerified: z.boolean().optional().nullable(),
            lastLogin: z.string().optional().nullable(),
            accountType: accountTypeSchema.optional().nullable(),
            notificationPreference: notificationPreferenceSchema
              .optional()
              .nullable(),
            languagePreference: z.string().optional().nullable(),
            currencyPreference: z.string().optional().nullable(),
            timezone: z.string().optional().nullable(),
            chatbotRequests: z.number().optional().nullable(),
            isInstantBookingAvailable: z.boolean().optional().nullable(),
            isEmailVerified: z.boolean().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            nicheServiceProvidersId: z.string().optional().nullable(),
            providerCurrentLocationId: z.string().optional().nullable(),
            providerTasksId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getAvailabilityQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getAvailabilityQuerySchema = z.object({
  getAvailability: z
    .object({
      __typename: z.literal("Availability"),
      id: z.string(),
      startTime: z.string(),
      endTime: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      avalabilityDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerAvailabilityId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listAvailabilitiesQueryVariablesSchema = z.object({
  filter: modelAvailabilityFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listAvailabilitiesQuerySchema = z.object({
  listAvailabilities: z
    .object({
      __typename: z.literal("ModelAvailabilityConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Availability"),
            id: z.string(),
            startTime: z.string(),
            endTime: z.string(),
            avalabilityDate: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerAvailabilityId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncAvailabilitiesQueryVariablesSchema = z.object({
  filter: modelAvailabilityFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncAvailabilitiesQuerySchema = z.object({
  syncAvailabilities: z
    .object({
      __typename: z.literal("ModelAvailabilityConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Availability"),
            id: z.string(),
            startTime: z.string(),
            endTime: z.string(),
            avalabilityDate: z.string(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerAvailabilityId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getProviderReviewQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getProviderReviewQuerySchema = z.object({
  getProviderReview: z
    .object({
      __typename: z.literal("ProviderReview"),
      id: z.string(),
      providerID: z.string(),
      userID: z.string(),
      rating: z.number(),
      comment: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const listProviderReviewsQueryVariablesSchema = z.object({
  filter: modelProviderReviewFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listProviderReviewsQuerySchema = z.object({
  listProviderReviews: z
    .object({
      __typename: z.literal("ModelProviderReviewConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderReview"),
            id: z.string(),
            providerID: z.string(),
            userID: z.string(),
            rating: z.number(),
            comment: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncProviderReviewsQueryVariablesSchema = z.object({
  filter: modelProviderReviewFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncProviderReviewsQuerySchema = z.object({
  syncProviderReviews: z
    .object({
      __typename: z.literal("ModelProviderReviewConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderReview"),
            id: z.string(),
            providerID: z.string(),
            userID: z.string(),
            rating: z.number(),
            comment: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getCertificationQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getCertificationQuerySchema = z.object({
  getCertification: z
    .object({
      __typename: z.literal("Certification"),
      id: z.string(),
      certificationName: z.string(),
      issuedBy: z.string().optional().nullable(),
      validFrom: z.string().optional().nullable(),
      validUntil: z.string().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerCertificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listCertificationsQueryVariablesSchema = z.object({
  filter: modelCertificationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listCertificationsQuerySchema = z.object({
  listCertifications: z
    .object({
      __typename: z.literal("ModelCertificationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Certification"),
            id: z.string(),
            certificationName: z.string(),
            issuedBy: z.string().optional().nullable(),
            validFrom: z.string().optional().nullable(),
            validUntil: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerCertificationsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncCertificationsQueryVariablesSchema = z.object({
  filter: modelCertificationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncCertificationsQuerySchema = z.object({
  syncCertifications: z
    .object({
      __typename: z.literal("ModelCertificationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Certification"),
            id: z.string(),
            certificationName: z.string(),
            issuedBy: z.string().optional().nullable(),
            validFrom: z.string().optional().nullable(),
            validUntil: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerCertificationsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getQualificationQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getQualificationQuerySchema = z.object({
  getQualification: z
    .object({
      __typename: z.literal("Qualification"),
      id: z.string(),
      qualificationName: z.string(),
      institution: z.string().optional().nullable(),
      yearObtained: z.number().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerQualificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listQualificationsQueryVariablesSchema = z.object({
  filter: modelQualificationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listQualificationsQuerySchema = z.object({
  listQualifications: z
    .object({
      __typename: z.literal("ModelQualificationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Qualification"),
            id: z.string(),
            qualificationName: z.string(),
            institution: z.string().optional().nullable(),
            yearObtained: z.number().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerQualificationsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncQualificationsQueryVariablesSchema = z.object({
  filter: modelQualificationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncQualificationsQuerySchema = z.object({
  syncQualifications: z
    .object({
      __typename: z.literal("ModelQualificationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Qualification"),
            id: z.string(),
            qualificationName: z.string(),
            institution: z.string().optional().nullable(),
            yearObtained: z.number().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerQualificationsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getSpecializationQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getSpecializationQuerySchema = z.object({
  getSpecialization: z
    .object({
      __typename: z.literal("Specialization"),
      id: z.string(),
      specializationName: z.string(),
      description: z.string().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerSpecializationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listSpecializationsQueryVariablesSchema = z.object({
  filter: modelSpecializationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listSpecializationsQuerySchema = z.object({
  listSpecializations: z
    .object({
      __typename: z.literal("ModelSpecializationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Specialization"),
            id: z.string(),
            specializationName: z.string(),
            description: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerSpecializationsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncSpecializationsQueryVariablesSchema = z.object({
  filter: modelSpecializationFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncSpecializationsQuerySchema = z.object({
  syncSpecializations: z
    .object({
      __typename: z.literal("ModelSpecializationConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("Specialization"),
            id: z.string(),
            specializationName: z.string(),
            description: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerSpecializationsId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getProviderHistoryQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getProviderHistoryQuerySchema = z.object({
  getProviderHistory: z
    .object({
      __typename: z.literal("ProviderHistory"),
      id: z.string(),
      providerID: z.string(),
      event: z.string(),
      date: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderHistoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listProviderHistoriesQueryVariablesSchema = z.object({
  filter: modelProviderHistoryFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listProviderHistoriesQuerySchema = z.object({
  listProviderHistories: z
    .object({
      __typename: z.literal("ModelProviderHistoryConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderHistory"),
            id: z.string(),
            providerID: z.string(),
            event: z.string(),
            date: z.string(),
            description: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerProviderHistoriesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncProviderHistoriesQueryVariablesSchema = z.object({
  filter: modelProviderHistoryFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncProviderHistoriesQuerySchema = z.object({
  syncProviderHistories: z
    .object({
      __typename: z.literal("ModelProviderHistoryConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("ProviderHistory"),
            id: z.string(),
            providerID: z.string(),
            event: z.string(),
            date: z.string(),
            description: z.string().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            providerProviderHistoriesId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const getUserQueryVariablesSchema = z.object({
  id: z.string(),
});

export const getUserQuerySchema = z.object({
  getUser: z
    .object({
      __typename: z.literal("User"),
      id: z.string(),
      email: z.string(),
      password: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      dob: z.string().optional().nullable(),
      gender: genderSchema.optional().nullable(),
      phone: z.string().optional().nullable(),
      address: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      state: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      zipCode: z.string().optional().nullable(),
      profileImage: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isVerified: z.boolean().optional().nullable(),
      lastLogin: z.string().optional().nullable(),
      accountType: accountTypeSchema.optional().nullable(),
      notificationPreference: notificationPreferenceSchema
        .optional()
        .nullable(),
      languagePreference: z.string().optional().nullable(),
      currencyPreference: z.string().optional().nullable(),
      timezone: z.string().optional().nullable(),
      chatbotRequests: z.number().optional().nullable(),
      bookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      messages: z
        .object({
          __typename: z.literal("ModelMessageThreadConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      wallet: z
        .object({
          __typename: z.literal("Wallet"),
          id: z.string(),
          ownerID: z.string(),
          balance: z.number(),
          currency: z.string(),
          lastUpdated: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      transactions: z
        .object({
          __typename: z.literal("ModelTransactionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      feedbacks: z
        .object({
          __typename: z.literal("ModelFeedbackConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      subscriptions: z
        .object({
          __typename: z.literal("ModelPLMBRSubscriptionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatBots: z
        .object({
          __typename: z.literal("ModelAIChatBotConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatLogs: z
        .object({
          __typename: z.literal("ModelAIChatLogConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTrackings: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reports: z
        .object({
          __typename: z.literal("ModelReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      loyaltyPrograms: z
        .object({
          __typename: z.literal("ModelLoyaltyProgramConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      rewards: z
        .object({
          __typename: z.literal("ModelRewardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      contracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      invoices: z
        .object({
          __typename: z.literal("ModelInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      paymentMethods: z
        .object({
          __typename: z.literal("ModelPaymentMethodConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      tips: z
        .object({
          __typename: z.literal("ModelTipConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userHistories: z
        .object({
          __typename: z.literal("ModelUserHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizations: z
        .object({
          __typename: z.literal("ModelCustomizationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceReviews: z
        .object({
          __typename: z.literal("ModelServiceReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userNotifications: z
        .object({
          __typename: z.literal("ModelUserNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userBookmarks: z
        .object({
          __typename: z.literal("ModelUserBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userInvoices: z
        .object({
          __typename: z.literal("ModelUserInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userReports: z
        .object({
          __typename: z.literal("ModelUserReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userPreference: z
        .object({
          __typename: z.literal("ModelUserPreferenceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      verifications: z
        .object({
          __typename: z.literal("ModelVerificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      preferredContactTime: z.string().optional().nullable(),
      serviceInterestedIn: z.string().optional().nullable(),
      curentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      isEmailVerified: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userWalletId: z.string().optional().nullable(),
      userCurentLocationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const listUsersQueryVariablesSchema = z.object({
  filter: modelUserFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
});

export const listUsersQuerySchema = z.object({
  listUsers: z
    .object({
      __typename: z.literal("ModelUserConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("User"),
            id: z.string(),
            email: z.string(),
            password: z.string(),
            firstName: z.string(),
            lastName: z.string(),
            dob: z.string().optional().nullable(),
            gender: genderSchema.optional().nullable(),
            phone: z.string().optional().nullable(),
            address: z.string().optional().nullable(),
            city: z.string().optional().nullable(),
            state: z.string().optional().nullable(),
            country: z.string().optional().nullable(),
            zipCode: z.string().optional().nullable(),
            profileImage: z.string().optional().nullable(),
            isActive: z.boolean().optional().nullable(),
            isVerified: z.boolean().optional().nullable(),
            lastLogin: z.string().optional().nullable(),
            accountType: accountTypeSchema.optional().nullable(),
            notificationPreference: notificationPreferenceSchema
              .optional()
              .nullable(),
            languagePreference: z.string().optional().nullable(),
            currencyPreference: z.string().optional().nullable(),
            timezone: z.string().optional().nullable(),
            chatbotRequests: z.number().optional().nullable(),
            preferredContactTime: z.string().optional().nullable(),
            serviceInterestedIn: z.string().optional().nullable(),
            isEmailVerified: z.boolean().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userWalletId: z.string().optional().nullable(),
            userCurentLocationId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const syncUsersQueryVariablesSchema = z.object({
  filter: modelUserFilterInputSchema.optional().nullable(),
  limit: z.number().optional().nullable(),
  nextToken: z.string().optional().nullable(),
  lastSync: z.number().optional().nullable(),
});

export const syncUsersQuerySchema = z.object({
  syncUsers: z
    .object({
      __typename: z.literal("ModelUserConnection"),
      items: z.array(
        z
          .object({
            __typename: z.literal("User"),
            id: z.string(),
            email: z.string(),
            password: z.string(),
            firstName: z.string(),
            lastName: z.string(),
            dob: z.string().optional().nullable(),
            gender: genderSchema.optional().nullable(),
            phone: z.string().optional().nullable(),
            address: z.string().optional().nullable(),
            city: z.string().optional().nullable(),
            state: z.string().optional().nullable(),
            country: z.string().optional().nullable(),
            zipCode: z.string().optional().nullable(),
            profileImage: z.string().optional().nullable(),
            isActive: z.boolean().optional().nullable(),
            isVerified: z.boolean().optional().nullable(),
            lastLogin: z.string().optional().nullable(),
            accountType: accountTypeSchema.optional().nullable(),
            notificationPreference: notificationPreferenceSchema
              .optional()
              .nullable(),
            languagePreference: z.string().optional().nullable(),
            currencyPreference: z.string().optional().nullable(),
            timezone: z.string().optional().nullable(),
            chatbotRequests: z.number().optional().nullable(),
            preferredContactTime: z.string().optional().nullable(),
            serviceInterestedIn: z.string().optional().nullable(),
            isEmailVerified: z.boolean().optional().nullable(),
            createdAt: z.string(),
            updatedAt: z.string(),
            _version: z.number(),
            _deleted: z.boolean().optional().nullable(),
            _lastChangedAt: z.number(),
            userWalletId: z.string().optional().nullable(),
            userCurentLocationId: z.string().optional().nullable(),
          })
          .nullable(),
      ),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateTasksSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionTasksFilterInputSchema.optional().nullable(),
});

export const onCreateTasksSubscriptionSchema = z.object({
  onCreateTasks: z
    .object({
      __typename: z.literal("Tasks"),
      id: z.string(),
      taskName: z.string(),
      taskTime: z.number(),
      Service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      tasksServiceId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateTasksSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionTasksFilterInputSchema.optional().nullable(),
});

export const onUpdateTasksSubscriptionSchema = z.object({
  onUpdateTasks: z
    .object({
      __typename: z.literal("Tasks"),
      id: z.string(),
      taskName: z.string(),
      taskTime: z.number(),
      Service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      tasksServiceId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteTasksSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionTasksFilterInputSchema.optional().nullable(),
});

export const onDeleteTasksSubscriptionSchema = z.object({
  onDeleteTasks: z
    .object({
      __typename: z.literal("Tasks"),
      id: z.string(),
      taskName: z.string(),
      taskTime: z.number(),
      Service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      tasksServiceId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateServicePromotionSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServicePromotionFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateServicePromotionSubscriptionSchema = z.object({
  onCreateServicePromotion: z
    .object({
      __typename: z.literal("ServicePromotion"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      startDate: z.string(),
      endDate: z.string(),
      discountPercentage: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServicePromotionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateServicePromotionSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServicePromotionFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateServicePromotionSubscriptionSchema = z.object({
  onUpdateServicePromotion: z
    .object({
      __typename: z.literal("ServicePromotion"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      startDate: z.string(),
      endDate: z.string(),
      discountPercentage: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServicePromotionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteServicePromotionSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServicePromotionFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteServicePromotionSubscriptionSchema = z.object({
  onDeleteServicePromotion: z
    .object({
      __typename: z.literal("ServicePromotion"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      startDate: z.string(),
      endDate: z.string(),
      discountPercentage: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServicePromotionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateProviderReportSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderReportFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateProviderReportSubscriptionSchema = z.object({
  onCreateProviderReport: z
    .object({
      __typename: z.literal("ProviderReport"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderReportsId: z.string().optional().nullable(),
      providerProviderReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateProviderReportSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderReportFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateProviderReportSubscriptionSchema = z.object({
  onUpdateProviderReport: z
    .object({
      __typename: z.literal("ProviderReport"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderReportsId: z.string().optional().nullable(),
      providerProviderReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteProviderReportSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderReportFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteProviderReportSubscriptionSchema = z.object({
  onDeleteProviderReport: z
    .object({
      __typename: z.literal("ProviderReport"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderReportsId: z.string().optional().nullable(),
      providerProviderReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateUserReportSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserReportFilterInputSchema.optional().nullable(),
});

export const onCreateUserReportSubscriptionSchema = z.object({
  onCreateUserReport: z
    .object({
      __typename: z.literal("UserReport"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserReportsId: z.string().optional().nullable(),
      userUserReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateUserReportSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserReportFilterInputSchema.optional().nullable(),
});

export const onUpdateUserReportSubscriptionSchema = z.object({
  onUpdateUserReport: z
    .object({
      __typename: z.literal("UserReport"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserReportsId: z.string().optional().nullable(),
      userUserReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteUserReportSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserReportFilterInputSchema.optional().nullable(),
});

export const onDeleteUserReportSubscriptionSchema = z.object({
  onDeleteUserReport: z
    .object({
      __typename: z.literal("UserReport"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserReportsId: z.string().optional().nullable(),
      userUserReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateUserInvoiceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserInvoiceFilterInputSchema.optional().nullable(),
});

export const onCreateUserInvoiceSubscriptionSchema = z.object({
  onCreateUserInvoice: z
    .object({
      __typename: z.literal("UserInvoice"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      dateIssued: z.string(),
      dueDate: z.string(),
      status: invoiceStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserInvoicesId: z.string().optional().nullable(),
      userUserInvoicesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateUserInvoiceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserInvoiceFilterInputSchema.optional().nullable(),
});

export const onUpdateUserInvoiceSubscriptionSchema = z.object({
  onUpdateUserInvoice: z
    .object({
      __typename: z.literal("UserInvoice"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      dateIssued: z.string(),
      dueDate: z.string(),
      status: invoiceStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserInvoicesId: z.string().optional().nullable(),
      userUserInvoicesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteUserInvoiceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserInvoiceFilterInputSchema.optional().nullable(),
});

export const onDeleteUserInvoiceSubscriptionSchema = z.object({
  onDeleteUserInvoice: z
    .object({
      __typename: z.literal("UserInvoice"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      dateIssued: z.string(),
      dueDate: z.string(),
      status: invoiceStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserInvoicesId: z.string().optional().nullable(),
      userUserInvoicesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateProviderBookmarkSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderBookmarkFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateProviderBookmarkSubscriptionSchema = z.object({
  onCreateProviderBookmark: z
    .object({
      __typename: z.literal("ProviderBookmark"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderBookmarksId: z.string().optional().nullable(),
      providerProviderBookmarksId: z.string().optional().nullable(),
      userProviderBookmarksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateProviderBookmarkSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderBookmarkFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateProviderBookmarkSubscriptionSchema = z.object({
  onUpdateProviderBookmark: z
    .object({
      __typename: z.literal("ProviderBookmark"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderBookmarksId: z.string().optional().nullable(),
      providerProviderBookmarksId: z.string().optional().nullable(),
      userProviderBookmarksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteProviderBookmarkSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderBookmarkFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteProviderBookmarkSubscriptionSchema = z.object({
  onDeleteProviderBookmark: z
    .object({
      __typename: z.literal("ProviderBookmark"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderBookmarksId: z.string().optional().nullable(),
      providerProviderBookmarksId: z.string().optional().nullable(),
      userProviderBookmarksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateUserBookmarkSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserBookmarkFilterInputSchema.optional().nullable(),
});

export const onCreateUserBookmarkSubscriptionSchema = z.object({
  onCreateUserBookmark: z
    .object({
      __typename: z.literal("UserBookmark"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserBookmarksId: z.string().optional().nullable(),
      userUserBookmarksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateUserBookmarkSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserBookmarkFilterInputSchema.optional().nullable(),
});

export const onUpdateUserBookmarkSubscriptionSchema = z.object({
  onUpdateUserBookmark: z
    .object({
      __typename: z.literal("UserBookmark"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserBookmarksId: z.string().optional().nullable(),
      userUserBookmarksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteUserBookmarkSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserBookmarkFilterInputSchema.optional().nullable(),
});

export const onDeleteUserBookmarkSubscriptionSchema = z.object({
  onDeleteUserBookmark: z
    .object({
      __typename: z.literal("UserBookmark"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserBookmarksId: z.string().optional().nullable(),
      userUserBookmarksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateProviderNotificationSubscriptionVariablesSchema = z.object(
  {
    filter: modelSubscriptionProviderNotificationFilterInputSchema
      .optional()
      .nullable(),
  },
);

export const onCreateProviderNotificationSubscriptionSchema = z.object({
  onCreateProviderNotification: z
    .object({
      __typename: z.literal("ProviderNotification"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderNotificationsId: z.string().optional().nullable(),
      providerProviderNotificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateProviderNotificationSubscriptionVariablesSchema = z.object(
  {
    filter: modelSubscriptionProviderNotificationFilterInputSchema
      .optional()
      .nullable(),
  },
);

export const onUpdateProviderNotificationSubscriptionSchema = z.object({
  onUpdateProviderNotification: z
    .object({
      __typename: z.literal("ProviderNotification"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderNotificationsId: z.string().optional().nullable(),
      providerProviderNotificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteProviderNotificationSubscriptionVariablesSchema = z.object(
  {
    filter: modelSubscriptionProviderNotificationFilterInputSchema
      .optional()
      .nullable(),
  },
);

export const onDeleteProviderNotificationSubscriptionSchema = z.object({
  onDeleteProviderNotification: z
    .object({
      __typename: z.literal("ProviderNotification"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderNotificationsId: z.string().optional().nullable(),
      providerProviderNotificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateUserNotificationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserNotificationFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateUserNotificationSubscriptionSchema = z.object({
  onCreateUserNotification: z
    .object({
      __typename: z.literal("UserNotification"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserNotificationsId: z.string().optional().nullable(),
      userUserNotificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateUserNotificationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserNotificationFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateUserNotificationSubscriptionSchema = z.object({
  onUpdateUserNotification: z
    .object({
      __typename: z.literal("UserNotification"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserNotificationsId: z.string().optional().nullable(),
      userUserNotificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteUserNotificationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserNotificationFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteUserNotificationSubscriptionSchema = z.object({
  onDeleteUserNotification: z
    .object({
      __typename: z.literal("UserNotification"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserNotificationsId: z.string().optional().nullable(),
      userUserNotificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateServiceDiscountSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceDiscountFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateServiceDiscountSubscriptionSchema = z.object({
  onCreateServiceDiscount: z
    .object({
      __typename: z.literal("ServiceDiscount"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      discountPercentage: z.number(),
      startDate: z.string(),
      endDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceDiscountsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateServiceDiscountSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceDiscountFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateServiceDiscountSubscriptionSchema = z.object({
  onUpdateServiceDiscount: z
    .object({
      __typename: z.literal("ServiceDiscount"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      discountPercentage: z.number(),
      startDate: z.string(),
      endDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceDiscountsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteServiceDiscountSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceDiscountFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteServiceDiscountSubscriptionSchema = z.object({
  onDeleteServiceDiscount: z
    .object({
      __typename: z.literal("ServiceDiscount"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      discountPercentage: z.number(),
      startDate: z.string(),
      endDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceDiscountsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateProviderAvailabilitySubscriptionVariablesSchema = z.object(
  {
    filter: modelSubscriptionProviderAvailabilityFilterInputSchema
      .optional()
      .nullable(),
  },
);

export const onCreateProviderAvailabilitySubscriptionSchema = z.object({
  onCreateProviderAvailability: z
    .object({
      __typename: z.literal("ProviderAvailability"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      startDate: z.string(),
      endDate: z.string(),
      isScheduled: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAvailabilitiesId: z.string().optional().nullable(),
      providerProviderAvailabilityId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateProviderAvailabilitySubscriptionVariablesSchema = z.object(
  {
    filter: modelSubscriptionProviderAvailabilityFilterInputSchema
      .optional()
      .nullable(),
  },
);

export const onUpdateProviderAvailabilitySubscriptionSchema = z.object({
  onUpdateProviderAvailability: z
    .object({
      __typename: z.literal("ProviderAvailability"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      startDate: z.string(),
      endDate: z.string(),
      isScheduled: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAvailabilitiesId: z.string().optional().nullable(),
      providerProviderAvailabilityId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteProviderAvailabilitySubscriptionVariablesSchema = z.object(
  {
    filter: modelSubscriptionProviderAvailabilityFilterInputSchema
      .optional()
      .nullable(),
  },
);

export const onDeleteProviderAvailabilitySubscriptionSchema = z.object({
  onDeleteProviderAvailability: z
    .object({
      __typename: z.literal("ProviderAvailability"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      startDate: z.string(),
      endDate: z.string(),
      isScheduled: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAvailabilitiesId: z.string().optional().nullable(),
      providerProviderAvailabilityId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateUserPreferenceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserPreferenceFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateUserPreferenceSubscriptionSchema = z.object({
  onCreateUserPreference: z
    .object({
      __typename: z.literal("UserPreference"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      preferenceType: z.string(),
      preferenceValue: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserPreferencesId: z.string().optional().nullable(),
      userUserPreferenceId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateUserPreferenceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserPreferenceFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateUserPreferenceSubscriptionSchema = z.object({
  onUpdateUserPreference: z
    .object({
      __typename: z.literal("UserPreference"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      preferenceType: z.string(),
      preferenceValue: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserPreferencesId: z.string().optional().nullable(),
      userUserPreferenceId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteUserPreferenceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserPreferenceFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteUserPreferenceSubscriptionSchema = z.object({
  onDeleteUserPreference: z
    .object({
      __typename: z.literal("UserPreference"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      preferenceType: z.string(),
      preferenceValue: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserPreferencesId: z.string().optional().nullable(),
      userUserPreferenceId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateProviderCertificationSubscriptionVariablesSchema =
  z.object({
    filter: modelSubscriptionProviderCertificationFilterInputSchema
      .optional()
      .nullable(),
  });

export const onCreateProviderCertificationSubscriptionSchema = z.object({
  onCreateProviderCertification: z
    .object({
      __typename: z.literal("ProviderCertification"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      certificationName: z.string(),
      issuedBy: z.string(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderCertificationsId: z.string().optional().nullable(),
      providerProviderCertificationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateProviderCertificationSubscriptionVariablesSchema =
  z.object({
    filter: modelSubscriptionProviderCertificationFilterInputSchema
      .optional()
      .nullable(),
  });

export const onUpdateProviderCertificationSubscriptionSchema = z.object({
  onUpdateProviderCertification: z
    .object({
      __typename: z.literal("ProviderCertification"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      certificationName: z.string(),
      issuedBy: z.string(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderCertificationsId: z.string().optional().nullable(),
      providerProviderCertificationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteProviderCertificationSubscriptionVariablesSchema =
  z.object({
    filter: modelSubscriptionProviderCertificationFilterInputSchema
      .optional()
      .nullable(),
  });

export const onDeleteProviderCertificationSubscriptionSchema = z.object({
  onDeleteProviderCertification: z
    .object({
      __typename: z.literal("ProviderCertification"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      certificationName: z.string(),
      issuedBy: z.string(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderCertificationsId: z.string().optional().nullable(),
      providerProviderCertificationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateServiceVideoSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceVideoFilterInputSchema.optional().nullable(),
});

export const onCreateServiceVideoSubscriptionSchema = z.object({
  onCreateServiceVideo: z
    .object({
      __typename: z.literal("ServiceVideo"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      videoURL: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceVideosId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateServiceVideoSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceVideoFilterInputSchema.optional().nullable(),
});

export const onUpdateServiceVideoSubscriptionSchema = z.object({
  onUpdateServiceVideo: z
    .object({
      __typename: z.literal("ServiceVideo"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      videoURL: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceVideosId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteServiceVideoSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceVideoFilterInputSchema.optional().nullable(),
});

export const onDeleteServiceVideoSubscriptionSchema = z.object({
  onDeleteServiceVideo: z
    .object({
      __typename: z.literal("ServiceVideo"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      videoURL: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceVideosId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateServiceImageSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceImageFilterInputSchema.optional().nullable(),
});

export const onCreateServiceImageSubscriptionSchema = z.object({
  onCreateServiceImage: z
    .object({
      __typename: z.literal("ServiceImage"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      imageURL: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceImagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateServiceImageSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceImageFilterInputSchema.optional().nullable(),
});

export const onUpdateServiceImageSubscriptionSchema = z.object({
  onUpdateServiceImage: z
    .object({
      __typename: z.literal("ServiceImage"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      imageURL: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceImagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteServiceImageSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceImageFilterInputSchema.optional().nullable(),
});

export const onDeleteServiceImageSubscriptionSchema = z.object({
  onDeleteServiceImage: z
    .object({
      __typename: z.literal("ServiceImage"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      imageURL: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceImagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateServiceReviewSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceReviewFilterInputSchema.optional().nullable(),
});

export const onCreateServiceReviewSubscriptionSchema = z.object({
  onCreateServiceReview: z
    .object({
      __typename: z.literal("ServiceReview"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      rating: z.number(),
      comment: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceReviewsId: z.string().optional().nullable(),
      userServiceReviewsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateServiceReviewSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceReviewFilterInputSchema.optional().nullable(),
});

export const onUpdateServiceReviewSubscriptionSchema = z.object({
  onUpdateServiceReview: z
    .object({
      __typename: z.literal("ServiceReview"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      rating: z.number(),
      comment: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceReviewsId: z.string().optional().nullable(),
      userServiceReviewsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteServiceReviewSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceReviewFilterInputSchema.optional().nullable(),
});

export const onDeleteServiceReviewSubscriptionSchema = z.object({
  onDeleteServiceReview: z
    .object({
      __typename: z.literal("ServiceReview"),
      id: z.string(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      rating: z.number(),
      comment: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServiceReviewsId: z.string().optional().nullable(),
      userServiceReviewsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateAIDiagnosticsSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAIDiagnosticsFilterInputSchema.optional().nullable(),
});

export const onCreateAIDiagnosticsSubscriptionSchema = z.object({
  onCreateAIDiagnostics: z
    .object({
      __typename: z.literal("AIDiagnostics"),
      id: z.string(),
      aiChatBot: z
        .object({
          __typename: z.literal("AIChatBot"),
          id: z.string(),
          name: z.string(),
          version: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userAiChatBotsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      diagnosticData: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      aIChatBotDiagnosticsId: z.string().optional().nullable(),
      serviceAiDiagnosticsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateAIDiagnosticsSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAIDiagnosticsFilterInputSchema.optional().nullable(),
});

export const onUpdateAIDiagnosticsSubscriptionSchema = z.object({
  onUpdateAIDiagnostics: z
    .object({
      __typename: z.literal("AIDiagnostics"),
      id: z.string(),
      aiChatBot: z
        .object({
          __typename: z.literal("AIChatBot"),
          id: z.string(),
          name: z.string(),
          version: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userAiChatBotsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      diagnosticData: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      aIChatBotDiagnosticsId: z.string().optional().nullable(),
      serviceAiDiagnosticsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteAIDiagnosticsSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAIDiagnosticsFilterInputSchema.optional().nullable(),
});

export const onDeleteAIDiagnosticsSubscriptionSchema = z.object({
  onDeleteAIDiagnostics: z
    .object({
      __typename: z.literal("AIDiagnostics"),
      id: z.string(),
      aiChatBot: z
        .object({
          __typename: z.literal("AIChatBot"),
          id: z.string(),
          name: z.string(),
          version: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userAiChatBotsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      diagnosticData: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      aIChatBotDiagnosticsId: z.string().optional().nullable(),
      serviceAiDiagnosticsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateCustomizationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionCustomizationFilterInputSchema.optional().nullable(),
});

export const onCreateCustomizationSubscriptionSchema = z.object({
  onCreateCustomization: z
    .object({
      __typename: z.literal("Customization"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizationType: z.string(),
      customizationValue: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceCustomizationsId: z.string().optional().nullable(),
      userCustomizationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateCustomizationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionCustomizationFilterInputSchema.optional().nullable(),
});

export const onUpdateCustomizationSubscriptionSchema = z.object({
  onUpdateCustomization: z
    .object({
      __typename: z.literal("Customization"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizationType: z.string(),
      customizationValue: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceCustomizationsId: z.string().optional().nullable(),
      userCustomizationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteCustomizationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionCustomizationFilterInputSchema.optional().nullable(),
});

export const onDeleteCustomizationSubscriptionSchema = z.object({
  onDeleteCustomization: z
    .object({
      __typename: z.literal("Customization"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizationType: z.string(),
      customizationValue: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceCustomizationsId: z.string().optional().nullable(),
      userCustomizationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateExpenseSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionExpenseFilterInputSchema.optional().nullable(),
});

export const onCreateExpenseSubscriptionSchema = z.object({
  onCreateExpense: z
    .object({
      __typename: z.literal("Expense"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      description: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceExpensesId: z.string().optional().nullable(),
      providerExpensesId: z.string().optional().nullable(),
      userExpensesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateExpenseSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionExpenseFilterInputSchema.optional().nullable(),
});

export const onUpdateExpenseSubscriptionSchema = z.object({
  onUpdateExpense: z
    .object({
      __typename: z.literal("Expense"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      description: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceExpensesId: z.string().optional().nullable(),
      providerExpensesId: z.string().optional().nullable(),
      userExpensesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteExpenseSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionExpenseFilterInputSchema.optional().nullable(),
});

export const onDeleteExpenseSubscriptionSchema = z.object({
  onDeleteExpense: z
    .object({
      __typename: z.literal("Expense"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      description: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceExpensesId: z.string().optional().nullable(),
      providerExpensesId: z.string().optional().nullable(),
      userExpensesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateFavoriteProviderSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionFavoriteProviderFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateFavoriteProviderSubscriptionSchema = z.object({
  onCreateFavoriteProvider: z
    .object({
      __typename: z.literal("FavoriteProvider"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateAdded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceFavoriteProvidersId: z.string().optional().nullable(),
      providerFavoriteProvidersId: z.string().optional().nullable(),
      userFavoriteProvidersId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateFavoriteProviderSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionFavoriteProviderFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateFavoriteProviderSubscriptionSchema = z.object({
  onUpdateFavoriteProvider: z
    .object({
      __typename: z.literal("FavoriteProvider"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateAdded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceFavoriteProvidersId: z.string().optional().nullable(),
      providerFavoriteProvidersId: z.string().optional().nullable(),
      userFavoriteProvidersId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteFavoriteProviderSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionFavoriteProviderFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteFavoriteProviderSubscriptionSchema = z.object({
  onDeleteFavoriteProvider: z
    .object({
      __typename: z.literal("FavoriteProvider"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateAdded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceFavoriteProvidersId: z.string().optional().nullable(),
      providerFavoriteProvidersId: z.string().optional().nullable(),
      userFavoriteProvidersId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateUserHistorySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserHistoryFilterInputSchema.optional().nullable(),
});

export const onCreateUserHistorySubscriptionSchema = z.object({
  onCreateUserHistory: z
    .object({
      __typename: z.literal("UserHistory"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      action: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserHistoriesId: z.string().optional().nullable(),
      userUserHistoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateUserHistorySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserHistoryFilterInputSchema.optional().nullable(),
});

export const onUpdateUserHistorySubscriptionSchema = z.object({
  onUpdateUserHistory: z
    .object({
      __typename: z.literal("UserHistory"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      action: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserHistoriesId: z.string().optional().nullable(),
      userUserHistoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteUserHistorySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserHistoryFilterInputSchema.optional().nullable(),
});

export const onDeleteUserHistorySubscriptionSchema = z.object({
  onDeleteUserHistory: z
    .object({
      __typename: z.literal("UserHistory"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      action: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserHistoriesId: z.string().optional().nullable(),
      userUserHistoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateProviderAwardSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderAwardFilterInputSchema.optional().nullable(),
});

export const onCreateProviderAwardSubscriptionSchema = z.object({
  onCreateProviderAward: z
    .object({
      __typename: z.literal("ProviderAward"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      awardName: z.string(),
      awardedBy: z.string(),
      dateAwarded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAwardsId: z.string().optional().nullable(),
      providerProviderAwardsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateProviderAwardSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderAwardFilterInputSchema.optional().nullable(),
});

export const onUpdateProviderAwardSubscriptionSchema = z.object({
  onUpdateProviderAward: z
    .object({
      __typename: z.literal("ProviderAward"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      awardName: z.string(),
      awardedBy: z.string(),
      dateAwarded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAwardsId: z.string().optional().nullable(),
      providerProviderAwardsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteProviderAwardSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderAwardFilterInputSchema.optional().nullable(),
});

export const onDeleteProviderAwardSubscriptionSchema = z.object({
  onDeleteProviderAward: z
    .object({
      __typename: z.literal("ProviderAward"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      awardName: z.string(),
      awardedBy: z.string(),
      dateAwarded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAwardsId: z.string().optional().nullable(),
      providerProviderAwardsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateReferralSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionReferralFilterInputSchema.optional().nullable(),
});

export const onCreateReferralSubscriptionSchema = z.object({
  onCreateReferral: z
    .object({
      __typename: z.literal("Referral"),
      id: z.string(),
      referrer: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      referred: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateReferred: z.string(),
      reward: z
        .object({
          __typename: z.literal("Reward"),
          id: z.string(),
          rewardName: z.string(),
          description: z.string(),
          value: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          loyaltyProgramRewardsId: z.string().optional().nullable(),
          userRewardsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      rewardReferralsId: z.string().optional().nullable(),
      serviceReferralsId: z.string().optional().nullable(),
      providerProviderReferralsId: z.string().optional().nullable(),
      userReferralsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateReferralSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionReferralFilterInputSchema.optional().nullable(),
});

export const onUpdateReferralSubscriptionSchema = z.object({
  onUpdateReferral: z
    .object({
      __typename: z.literal("Referral"),
      id: z.string(),
      referrer: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      referred: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateReferred: z.string(),
      reward: z
        .object({
          __typename: z.literal("Reward"),
          id: z.string(),
          rewardName: z.string(),
          description: z.string(),
          value: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          loyaltyProgramRewardsId: z.string().optional().nullable(),
          userRewardsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      rewardReferralsId: z.string().optional().nullable(),
      serviceReferralsId: z.string().optional().nullable(),
      providerProviderReferralsId: z.string().optional().nullable(),
      userReferralsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteReferralSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionReferralFilterInputSchema.optional().nullable(),
});

export const onDeleteReferralSubscriptionSchema = z.object({
  onDeleteReferral: z
    .object({
      __typename: z.literal("Referral"),
      id: z.string(),
      referrer: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      referred: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      dateReferred: z.string(),
      reward: z
        .object({
          __typename: z.literal("Reward"),
          id: z.string(),
          rewardName: z.string(),
          description: z.string(),
          value: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          loyaltyProgramRewardsId: z.string().optional().nullable(),
          userRewardsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      rewardReferralsId: z.string().optional().nullable(),
      serviceReferralsId: z.string().optional().nullable(),
      providerProviderReferralsId: z.string().optional().nullable(),
      userReferralsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateTipSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionTipFilterInputSchema.optional().nullable(),
});

export const onCreateTipSubscriptionSchema = z.object({
  onCreateTip: z
    .object({
      __typename: z.literal("Tip"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderTipsId: z.string().optional().nullable(),
      userTipsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateTipSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionTipFilterInputSchema.optional().nullable(),
});

export const onUpdateTipSubscriptionSchema = z.object({
  onUpdateTip: z
    .object({
      __typename: z.literal("Tip"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderTipsId: z.string().optional().nullable(),
      userTipsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteTipSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionTipFilterInputSchema.optional().nullable(),
});

export const onDeleteTipSubscriptionSchema = z.object({
  onDeleteTip: z
    .object({
      __typename: z.literal("Tip"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderTipsId: z.string().optional().nullable(),
      userTipsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreatePaymentMethodSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionPaymentMethodFilterInputSchema.optional().nullable(),
});

export const onCreatePaymentMethodSubscriptionSchema = z.object({
  onCreatePaymentMethod: z
    .object({
      __typename: z.literal("PaymentMethod"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      cardNumber: z.string(),
      expiryDate: z.string(),
      cardType: cardTypeSchema.optional().nullable(),
      stripeCustomerId: z.string().optional().nullable(),
      stripeCardId: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userPaymentMethodsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdatePaymentMethodSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionPaymentMethodFilterInputSchema.optional().nullable(),
});

export const onUpdatePaymentMethodSubscriptionSchema = z.object({
  onUpdatePaymentMethod: z
    .object({
      __typename: z.literal("PaymentMethod"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      cardNumber: z.string(),
      expiryDate: z.string(),
      cardType: cardTypeSchema.optional().nullable(),
      stripeCustomerId: z.string().optional().nullable(),
      stripeCardId: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userPaymentMethodsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeletePaymentMethodSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionPaymentMethodFilterInputSchema.optional().nullable(),
});

export const onDeletePaymentMethodSubscriptionSchema = z.object({
  onDeletePaymentMethod: z
    .object({
      __typename: z.literal("PaymentMethod"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      cardNumber: z.string(),
      expiryDate: z.string(),
      cardType: cardTypeSchema.optional().nullable(),
      stripeCustomerId: z.string().optional().nullable(),
      stripeCardId: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userPaymentMethodsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateInvoiceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionInvoiceFilterInputSchema.optional().nullable(),
});

export const onCreateInvoiceSubscriptionSchema = z.object({
  onCreateInvoice: z
    .object({
      __typename: z.literal("Invoice"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      dateIssued: z.string(),
      dueDate: z.string(),
      status: invoiceStatusSchema.optional().nullable(),
      services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderInvoicesId: z.string().optional().nullable(),
      userInvoicesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateInvoiceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionInvoiceFilterInputSchema.optional().nullable(),
});

export const onUpdateInvoiceSubscriptionSchema = z.object({
  onUpdateInvoice: z
    .object({
      __typename: z.literal("Invoice"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      dateIssued: z.string(),
      dueDate: z.string(),
      status: invoiceStatusSchema.optional().nullable(),
      services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderInvoicesId: z.string().optional().nullable(),
      userInvoicesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteInvoiceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionInvoiceFilterInputSchema.optional().nullable(),
});

export const onDeleteInvoiceSubscriptionSchema = z.object({
  onDeleteInvoice: z
    .object({
      __typename: z.literal("Invoice"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      dateIssued: z.string(),
      dueDate: z.string(),
      status: invoiceStatusSchema.optional().nullable(),
      services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderInvoicesId: z.string().optional().nullable(),
      userInvoicesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateContractSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionContractFilterInputSchema.optional().nullable(),
});

export const onCreateContractSubscriptionSchema = z.object({
  onCreateContract: z
    .object({
      __typename: z.literal("Contract"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      startDate: z.string(),
      endDate: z.string(),
      terms: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceContractsId: z.string().optional().nullable(),
      providerProviderContractsId: z.string().optional().nullable(),
      userContractsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateContractSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionContractFilterInputSchema.optional().nullable(),
});

export const onUpdateContractSubscriptionSchema = z.object({
  onUpdateContract: z
    .object({
      __typename: z.literal("Contract"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      startDate: z.string(),
      endDate: z.string(),
      terms: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceContractsId: z.string().optional().nullable(),
      providerProviderContractsId: z.string().optional().nullable(),
      userContractsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteContractSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionContractFilterInputSchema.optional().nullable(),
});

export const onDeleteContractSubscriptionSchema = z.object({
  onDeleteContract: z
    .object({
      __typename: z.literal("Contract"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      startDate: z.string(),
      endDate: z.string(),
      terms: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceContractsId: z.string().optional().nullable(),
      providerProviderContractsId: z.string().optional().nullable(),
      userContractsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateNicheServiceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionNicheServiceFilterInputSchema.optional().nullable(),
});

export const onCreateNicheServiceSubscriptionSchema = z.object({
  onCreateNicheService: z
    .object({
      __typename: z.literal("NicheService"),
      id: z.string(),
      serviceName: z.string(),
      description: z.string(),
      providers: z
        .object({
          __typename: z.literal("ModelProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdateNicheServiceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionNicheServiceFilterInputSchema.optional().nullable(),
});

export const onUpdateNicheServiceSubscriptionSchema = z.object({
  onUpdateNicheService: z
    .object({
      __typename: z.literal("NicheService"),
      id: z.string(),
      serviceName: z.string(),
      description: z.string(),
      providers: z
        .object({
          __typename: z.literal("ModelProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeleteNicheServiceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionNicheServiceFilterInputSchema.optional().nullable(),
});

export const onDeleteNicheServiceSubscriptionSchema = z.object({
  onDeleteNicheService: z
    .object({
      __typename: z.literal("NicheService"),
      id: z.string(),
      serviceName: z.string(),
      description: z.string(),
      providers: z
        .object({
          __typename: z.literal("ModelProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreateServicePackageSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServicePackageFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateServicePackageSubscriptionSchema = z.object({
  onCreateServicePackage: z
    .object({
      __typename: z.literal("ServicePackage"),
      id: z.string(),
      packageName: z.string(),
      services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      discount: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdateServicePackageSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServicePackageFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateServicePackageSubscriptionSchema = z.object({
  onUpdateServicePackage: z
    .object({
      __typename: z.literal("ServicePackage"),
      id: z.string(),
      packageName: z.string(),
      services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      discount: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeleteServicePackageSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServicePackageFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteServicePackageSubscriptionSchema = z.object({
  onDeleteServicePackage: z
    .object({
      __typename: z.literal("ServicePackage"),
      id: z.string(),
      packageName: z.string(),
      services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      discount: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreateRewardSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionRewardFilterInputSchema.optional().nullable(),
});

export const onCreateRewardSubscriptionSchema = z.object({
  onCreateReward: z
    .object({
      __typename: z.literal("Reward"),
      id: z.string(),
      rewardName: z.string(),
      description: z.string(),
      value: z.number(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      loyaltyProgramRewardsId: z.string().optional().nullable(),
      userRewardsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateRewardSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionRewardFilterInputSchema.optional().nullable(),
});

export const onUpdateRewardSubscriptionSchema = z.object({
  onUpdateReward: z
    .object({
      __typename: z.literal("Reward"),
      id: z.string(),
      rewardName: z.string(),
      description: z.string(),
      value: z.number(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      loyaltyProgramRewardsId: z.string().optional().nullable(),
      userRewardsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteRewardSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionRewardFilterInputSchema.optional().nullable(),
});

export const onDeleteRewardSubscriptionSchema = z.object({
  onDeleteReward: z
    .object({
      __typename: z.literal("Reward"),
      id: z.string(),
      rewardName: z.string(),
      description: z.string(),
      value: z.number(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      loyaltyProgramRewardsId: z.string().optional().nullable(),
      userRewardsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateLoyaltyProgramSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionLoyaltyProgramFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateLoyaltyProgramSubscriptionSchema = z.object({
  onCreateLoyaltyProgram: z
    .object({
      __typename: z.literal("LoyaltyProgram"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      points: z.number(),
      rewards: z
        .object({
          __typename: z.literal("ModelRewardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userLoyaltyProgramsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateLoyaltyProgramSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionLoyaltyProgramFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateLoyaltyProgramSubscriptionSchema = z.object({
  onUpdateLoyaltyProgram: z
    .object({
      __typename: z.literal("LoyaltyProgram"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      points: z.number(),
      rewards: z
        .object({
          __typename: z.literal("ModelRewardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userLoyaltyProgramsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteLoyaltyProgramSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionLoyaltyProgramFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteLoyaltyProgramSubscriptionSchema = z.object({
  onDeleteLoyaltyProgram: z
    .object({
      __typename: z.literal("LoyaltyProgram"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      points: z.number(),
      rewards: z
        .object({
          __typename: z.literal("ModelRewardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userLoyaltyProgramsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateVerificationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionVerificationFilterInputSchema.optional().nullable(),
});

export const onCreateVerificationSubscriptionSchema = z.object({
  onCreateVerification: z
    .object({
      __typename: z.literal("Verification"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      verificationCode: z.string(),
      dateSent: z.string(),
      status: verificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userVerificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateVerificationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionVerificationFilterInputSchema.optional().nullable(),
});

export const onUpdateVerificationSubscriptionSchema = z.object({
  onUpdateVerification: z
    .object({
      __typename: z.literal("Verification"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      verificationCode: z.string(),
      dateSent: z.string(),
      status: verificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userVerificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteVerificationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionVerificationFilterInputSchema.optional().nullable(),
});

export const onDeleteVerificationSubscriptionSchema = z.object({
  onDeleteVerification: z
    .object({
      __typename: z.literal("Verification"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      verificationCode: z.string(),
      dateSent: z.string(),
      status: verificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userVerificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateAnalyticsSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAnalyticsFilterInputSchema.optional().nullable(),
});

export const onCreateAnalyticsSubscriptionSchema = z.object({
  onCreateAnalytics: z
    .object({
      __typename: z.literal("Analytics"),
      id: z.string(),
      userCount: z.number(),
      providerCount: z.number(),
      serviceCount: z.number(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdateAnalyticsSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAnalyticsFilterInputSchema.optional().nullable(),
});

export const onUpdateAnalyticsSubscriptionSchema = z.object({
  onUpdateAnalytics: z
    .object({
      __typename: z.literal("Analytics"),
      id: z.string(),
      userCount: z.number(),
      providerCount: z.number(),
      serviceCount: z.number(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeleteAnalyticsSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAnalyticsFilterInputSchema.optional().nullable(),
});

export const onDeleteAnalyticsSubscriptionSchema = z.object({
  onDeleteAnalytics: z
    .object({
      __typename: z.literal("Analytics"),
      id: z.string(),
      userCount: z.number(),
      providerCount: z.number(),
      serviceCount: z.number(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreatePromoCodeSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionPromoCodeFilterInputSchema.optional().nullable(),
});

export const onCreatePromoCodeSubscriptionSchema = z.object({
  onCreatePromoCode: z
    .object({
      __typename: z.literal("PromoCode"),
      id: z.string(),
      code: z.string(),
      discount: z.number(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdatePromoCodeSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionPromoCodeFilterInputSchema.optional().nullable(),
});

export const onUpdatePromoCodeSubscriptionSchema = z.object({
  onUpdatePromoCode: z
    .object({
      __typename: z.literal("PromoCode"),
      id: z.string(),
      code: z.string(),
      discount: z.number(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeletePromoCodeSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionPromoCodeFilterInputSchema.optional().nullable(),
});

export const onDeletePromoCodeSubscriptionSchema = z.object({
  onDeletePromoCode: z
    .object({
      __typename: z.literal("PromoCode"),
      id: z.string(),
      code: z.string(),
      discount: z.number(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreateReportSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionReportFilterInputSchema.optional().nullable(),
});

export const onCreateReportSubscriptionSchema = z.object({
  onCreateReport: z
    .object({
      __typename: z.literal("Report"),
      id: z.string(),
      reporter: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      reportedEntity: z.string(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateReportSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionReportFilterInputSchema.optional().nullable(),
});

export const onUpdateReportSubscriptionSchema = z.object({
  onUpdateReport: z
    .object({
      __typename: z.literal("Report"),
      id: z.string(),
      reporter: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      reportedEntity: z.string(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteReportSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionReportFilterInputSchema.optional().nullable(),
});

export const onDeleteReportSubscriptionSchema = z.object({
  onDeleteReport: z
    .object({
      __typename: z.literal("Report"),
      id: z.string(),
      reporter: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      reportedEntity: z.string(),
      description: z.string(),
      dateReported: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userReportsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateJobTrackingSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionJobTrackingFilterInputSchema.optional().nullable(),
});

export const onCreateJobTrackingSubscriptionSchema = z.object({
  onCreateJobTracking: z
    .object({
      __typename: z.literal("JobTracking"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      status: jobStatusSchema.optional().nullable(),
      startDate: z.string(),
      endDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceJobTrackingsId: z.string().optional().nullable(),
      providerJobTrackingId: z.string().optional().nullable(),
      userJobTrackingsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateJobTrackingSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionJobTrackingFilterInputSchema.optional().nullable(),
});

export const onUpdateJobTrackingSubscriptionSchema = z.object({
  onUpdateJobTracking: z
    .object({
      __typename: z.literal("JobTracking"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      status: jobStatusSchema.optional().nullable(),
      startDate: z.string(),
      endDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceJobTrackingsId: z.string().optional().nullable(),
      providerJobTrackingId: z.string().optional().nullable(),
      userJobTrackingsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteJobTrackingSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionJobTrackingFilterInputSchema.optional().nullable(),
});

export const onDeleteJobTrackingSubscriptionSchema = z.object({
  onDeleteJobTracking: z
    .object({
      __typename: z.literal("JobTracking"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      status: jobStatusSchema.optional().nullable(),
      startDate: z.string(),
      endDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceJobTrackingsId: z.string().optional().nullable(),
      providerJobTrackingId: z.string().optional().nullable(),
      userJobTrackingsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateAIChatLogSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAIChatLogFilterInputSchema.optional().nullable(),
});

export const onCreateAIChatLogSubscriptionSchema = z.object({
  onCreateAIChatLog: z
    .object({
      __typename: z.literal("AIChatLog"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatBot: z
        .object({
          __typename: z.literal("AIChatBot"),
          id: z.string(),
          name: z.string(),
          version: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userAiChatBotsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      message: z.string(),
      response: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      aIChatBotChatLogsId: z.string().optional().nullable(),
      userAiChatLogsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateAIChatLogSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAIChatLogFilterInputSchema.optional().nullable(),
});

export const onUpdateAIChatLogSubscriptionSchema = z.object({
  onUpdateAIChatLog: z
    .object({
      __typename: z.literal("AIChatLog"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatBot: z
        .object({
          __typename: z.literal("AIChatBot"),
          id: z.string(),
          name: z.string(),
          version: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userAiChatBotsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      message: z.string(),
      response: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      aIChatBotChatLogsId: z.string().optional().nullable(),
      userAiChatLogsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteAIChatLogSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAIChatLogFilterInputSchema.optional().nullable(),
});

export const onDeleteAIChatLogSubscriptionSchema = z.object({
  onDeleteAIChatLog: z
    .object({
      __typename: z.literal("AIChatLog"),
      id: z.string(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatBot: z
        .object({
          __typename: z.literal("AIChatBot"),
          id: z.string(),
          name: z.string(),
          version: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userAiChatBotsId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      message: z.string(),
      response: z.string(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      aIChatBotChatLogsId: z.string().optional().nullable(),
      userAiChatLogsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateAIChatBotSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAIChatBotFilterInputSchema.optional().nullable(),
});

export const onCreateAIChatBotSubscriptionSchema = z.object({
  onCreateAIChatBot: z
    .object({
      __typename: z.literal("AIChatBot"),
      id: z.string(),
      name: z.string(),
      version: z.string(),
      diagnostics: z
        .object({
          __typename: z.literal("ModelAIDiagnosticsConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      chatLogs: z
        .object({
          __typename: z.literal("ModelAIChatLogConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userAiChatBotsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateAIChatBotSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAIChatBotFilterInputSchema.optional().nullable(),
});

export const onUpdateAIChatBotSubscriptionSchema = z.object({
  onUpdateAIChatBot: z
    .object({
      __typename: z.literal("AIChatBot"),
      id: z.string(),
      name: z.string(),
      version: z.string(),
      diagnostics: z
        .object({
          __typename: z.literal("ModelAIDiagnosticsConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      chatLogs: z
        .object({
          __typename: z.literal("ModelAIChatLogConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userAiChatBotsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteAIChatBotSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAIChatBotFilterInputSchema.optional().nullable(),
});

export const onDeleteAIChatBotSubscriptionSchema = z.object({
  onDeleteAIChatBot: z
    .object({
      __typename: z.literal("AIChatBot"),
      id: z.string(),
      name: z.string(),
      version: z.string(),
      diagnostics: z
        .object({
          __typename: z.literal("ModelAIDiagnosticsConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      chatLogs: z
        .object({
          __typename: z.literal("ModelAIChatLogConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userAiChatBotsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateMainCategorySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionMainCategoryFilterInputSchema.optional().nullable(),
});

export const onCreateMainCategorySubscriptionSchema = z.object({
  onCreateMainCategory: z
    .object({
      __typename: z.literal("MainCategory"),
      id: z.string(),
      name: z.string(),
      descrption: z.string().optional().nullable(),
      SubCategories: z
        .object({
          __typename: z.literal("ModelSubCategoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdateMainCategorySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionMainCategoryFilterInputSchema.optional().nullable(),
});

export const onUpdateMainCategorySubscriptionSchema = z.object({
  onUpdateMainCategory: z
    .object({
      __typename: z.literal("MainCategory"),
      id: z.string(),
      name: z.string(),
      descrption: z.string().optional().nullable(),
      SubCategories: z
        .object({
          __typename: z.literal("ModelSubCategoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeleteMainCategorySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionMainCategoryFilterInputSchema.optional().nullable(),
});

export const onDeleteMainCategorySubscriptionSchema = z.object({
  onDeleteMainCategory: z
    .object({
      __typename: z.literal("MainCategory"),
      id: z.string(),
      name: z.string(),
      descrption: z.string().optional().nullable(),
      SubCategories: z
        .object({
          __typename: z.literal("ModelSubCategoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreateSubCategorySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionSubCategoryFilterInputSchema.optional().nullable(),
});

export const onCreateSubCategorySubscriptionSchema = z.object({
  onCreateSubCategory: z
    .object({
      __typename: z.literal("SubCategory"),
      id: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      MainCategory: z
        .object({
          __typename: z.literal("MainCategory"),
          id: z.string(),
          name: z.string(),
          descrption: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      Services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      mainCategorySubCategoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateSubCategorySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionSubCategoryFilterInputSchema.optional().nullable(),
});

export const onUpdateSubCategorySubscriptionSchema = z.object({
  onUpdateSubCategory: z
    .object({
      __typename: z.literal("SubCategory"),
      id: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      MainCategory: z
        .object({
          __typename: z.literal("MainCategory"),
          id: z.string(),
          name: z.string(),
          descrption: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      Services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      mainCategorySubCategoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteSubCategorySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionSubCategoryFilterInputSchema.optional().nullable(),
});

export const onDeleteSubCategorySubscriptionSchema = z.object({
  onDeleteSubCategory: z
    .object({
      __typename: z.literal("SubCategory"),
      id: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      MainCategory: z
        .object({
          __typename: z.literal("MainCategory"),
          id: z.string(),
          name: z.string(),
          descrption: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      Services: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      mainCategorySubCategoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreatePLMBRSubscriptionSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionPLMBRSubscriptionFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreatePLMBRSubscriptionSubscriptionSchema = z.object({
  onCreatePLMBRSubscription: z
    .object({
      __typename: z.literal("PLMBRSubscription"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userSubscriptionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdatePLMBRSubscriptionSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionPLMBRSubscriptionFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdatePLMBRSubscriptionSubscriptionSchema = z.object({
  onUpdatePLMBRSubscription: z
    .object({
      __typename: z.literal("PLMBRSubscription"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userSubscriptionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeletePLMBRSubscriptionSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionPLMBRSubscriptionFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeletePLMBRSubscriptionSubscriptionSchema = z.object({
  onDeletePLMBRSubscription: z
    .object({
      __typename: z.literal("PLMBRSubscription"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userSubscriptionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateUserSettingsSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserSettingsFilterInputSchema.optional().nullable(),
});

export const onCreateUserSettingsSubscriptionSchema = z.object({
  onCreateUserSettings: z
    .object({
      __typename: z.literal("UserSettings"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdateUserSettingsSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserSettingsFilterInputSchema.optional().nullable(),
});

export const onUpdateUserSettingsSubscriptionSchema = z.object({
  onUpdateUserSettings: z
    .object({
      __typename: z.literal("UserSettings"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeleteUserSettingsSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserSettingsFilterInputSchema.optional().nullable(),
});

export const onDeleteUserSettingsSubscriptionSchema = z.object({
  onDeleteUserSettings: z
    .object({
      __typename: z.literal("UserSettings"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreateProviderSettingsSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderSettingsFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateProviderSettingsSubscriptionSchema = z.object({
  onCreateProviderSettings: z
    .object({
      __typename: z.literal("ProviderSettings"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdateProviderSettingsSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderSettingsFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateProviderSettingsSubscriptionSchema = z.object({
  onUpdateProviderSettings: z
    .object({
      __typename: z.literal("ProviderSettings"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeleteProviderSettingsSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderSettingsFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteProviderSettingsSubscriptionSchema = z.object({
  onDeleteProviderSettings: z
    .object({
      __typename: z.literal("ProviderSettings"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreatePortfolioSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionPortfolioFilterInputSchema.optional().nullable(),
});

export const onCreatePortfolioSubscriptionSchema = z.object({
  onCreatePortfolio: z
    .object({
      __typename: z.literal("Portfolio"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdatePortfolioSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionPortfolioFilterInputSchema.optional().nullable(),
});

export const onUpdatePortfolioSubscriptionSchema = z.object({
  onUpdatePortfolio: z
    .object({
      __typename: z.literal("Portfolio"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeletePortfolioSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionPortfolioFilterInputSchema.optional().nullable(),
});

export const onDeletePortfolioSubscriptionSchema = z.object({
  onDeletePortfolio: z
    .object({
      __typename: z.literal("Portfolio"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreateServiceVariantSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceVariantFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateServiceVariantSubscriptionSchema = z.object({
  onCreateServiceVariant: z
    .object({
      __typename: z.literal("ServiceVariant"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdateServiceVariantSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceVariantFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateServiceVariantSubscriptionSchema = z.object({
  onUpdateServiceVariant: z
    .object({
      __typename: z.literal("ServiceVariant"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeleteServiceVariantSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceVariantFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteServiceVariantSubscriptionSchema = z.object({
  onDeleteServiceVariant: z
    .object({
      __typename: z.literal("ServiceVariant"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreateServiceHighlightSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceHighlightFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateServiceHighlightSubscriptionSchema = z.object({
  onCreateServiceHighlight: z
    .object({
      __typename: z.literal("ServiceHighlight"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdateServiceHighlightSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceHighlightFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateServiceHighlightSubscriptionSchema = z.object({
  onUpdateServiceHighlight: z
    .object({
      __typename: z.literal("ServiceHighlight"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeleteServiceHighlightSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceHighlightFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteServiceHighlightSubscriptionSchema = z.object({
  onDeleteServiceHighlight: z
    .object({
      __typename: z.literal("ServiceHighlight"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreateServiceTagSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceTagFilterInputSchema.optional().nullable(),
});

export const onCreateServiceTagSubscriptionSchema = z.object({
  onCreateServiceTag: z
    .object({
      __typename: z.literal("ServiceTag"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdateServiceTagSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceTagFilterInputSchema.optional().nullable(),
});

export const onUpdateServiceTagSubscriptionSchema = z.object({
  onUpdateServiceTag: z
    .object({
      __typename: z.literal("ServiceTag"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeleteServiceTagSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceTagFilterInputSchema.optional().nullable(),
});

export const onDeleteServiceTagSubscriptionSchema = z.object({
  onDeleteServiceTag: z
    .object({
      __typename: z.literal("ServiceTag"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreateServiceFAQSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceFAQFilterInputSchema.optional().nullable(),
});

export const onCreateServiceFAQSubscriptionSchema = z.object({
  onCreateServiceFAQ: z
    .object({
      __typename: z.literal("ServiceFAQ"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdateServiceFAQSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceFAQFilterInputSchema.optional().nullable(),
});

export const onUpdateServiceFAQSubscriptionSchema = z.object({
  onUpdateServiceFAQ: z
    .object({
      __typename: z.literal("ServiceFAQ"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeleteServiceFAQSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceFAQFilterInputSchema.optional().nullable(),
});

export const onDeleteServiceFAQSubscriptionSchema = z.object({
  onDeleteServiceFAQ: z
    .object({
      __typename: z.literal("ServiceFAQ"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreateFeedbackSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionFeedbackFilterInputSchema.optional().nullable(),
});

export const onCreateFeedbackSubscriptionSchema = z.object({
  onCreateFeedback: z
    .object({
      __typename: z.literal("Feedback"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userFeedbacksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateFeedbackSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionFeedbackFilterInputSchema.optional().nullable(),
});

export const onUpdateFeedbackSubscriptionSchema = z.object({
  onUpdateFeedback: z
    .object({
      __typename: z.literal("Feedback"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userFeedbacksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteFeedbackSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionFeedbackFilterInputSchema.optional().nullable(),
});

export const onDeleteFeedbackSubscriptionSchema = z.object({
  onDeleteFeedback: z
    .object({
      __typename: z.literal("Feedback"),
      id: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userFeedbacksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateEquipmentSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionEquipmentFilterInputSchema.optional().nullable(),
});

export const onCreateEquipmentSubscriptionSchema = z.object({
  onCreateEquipment: z
    .object({
      __typename: z.literal("Equipment"),
      id: z.string(),
      providerID: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      category: equipmentCategorySchema.optional().nullable(),
      availabilityStatus: equipmentAvailabilityStatusSchema
        .optional()
        .nullable(),
      purchaseDate: z.string().optional().nullable(),
      maintenanceDate: z.string().optional().nullable(),
      image: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdateEquipmentSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionEquipmentFilterInputSchema.optional().nullable(),
});

export const onUpdateEquipmentSubscriptionSchema = z.object({
  onUpdateEquipment: z
    .object({
      __typename: z.literal("Equipment"),
      id: z.string(),
      providerID: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      category: equipmentCategorySchema.optional().nullable(),
      availabilityStatus: equipmentAvailabilityStatusSchema
        .optional()
        .nullable(),
      purchaseDate: z.string().optional().nullable(),
      maintenanceDate: z.string().optional().nullable(),
      image: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeleteEquipmentSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionEquipmentFilterInputSchema.optional().nullable(),
});

export const onDeleteEquipmentSubscriptionSchema = z.object({
  onDeleteEquipment: z
    .object({
      __typename: z.literal("Equipment"),
      id: z.string(),
      providerID: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      category: equipmentCategorySchema.optional().nullable(),
      availabilityStatus: equipmentAvailabilityStatusSchema
        .optional()
        .nullable(),
      purchaseDate: z.string().optional().nullable(),
      maintenanceDate: z.string().optional().nullable(),
      image: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreateWalletSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionWalletFilterInputSchema.optional().nullable(),
});

export const onCreateWalletSubscriptionSchema = z.object({
  onCreateWallet: z
    .object({
      __typename: z.literal("Wallet"),
      id: z.string(),
      ownerID: z.string(),
      balance: z.number(),
      currency: z.string(),
      transactions: z
        .object({
          __typename: z.literal("ModelTransactionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      lastUpdated: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdateWalletSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionWalletFilterInputSchema.optional().nullable(),
});

export const onUpdateWalletSubscriptionSchema = z.object({
  onUpdateWallet: z
    .object({
      __typename: z.literal("Wallet"),
      id: z.string(),
      ownerID: z.string(),
      balance: z.number(),
      currency: z.string(),
      transactions: z
        .object({
          __typename: z.literal("ModelTransactionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      lastUpdated: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeleteWalletSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionWalletFilterInputSchema.optional().nullable(),
});

export const onDeleteWalletSubscriptionSchema = z.object({
  onDeleteWallet: z
    .object({
      __typename: z.literal("Wallet"),
      id: z.string(),
      ownerID: z.string(),
      balance: z.number(),
      currency: z.string(),
      transactions: z
        .object({
          __typename: z.literal("ModelTransactionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      lastUpdated: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreateTransactionSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionTransactionFilterInputSchema.optional().nullable(),
});

export const onCreateTransactionSubscriptionSchema = z.object({
  onCreateTransaction: z
    .object({
      __typename: z.literal("Transaction"),
      id: z.string(),
      wallet: z
        .object({
          __typename: z.literal("Wallet"),
          id: z.string(),
          ownerID: z.string(),
          balance: z.number(),
          currency: z.string(),
          lastUpdated: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      type: transactionTypeSchema.optional().nullable(),
      description: z.string().optional().nullable(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      walletTransactionsId: z.string().optional().nullable(),
      userTransactionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateTransactionSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionTransactionFilterInputSchema.optional().nullable(),
});

export const onUpdateTransactionSubscriptionSchema = z.object({
  onUpdateTransaction: z
    .object({
      __typename: z.literal("Transaction"),
      id: z.string(),
      wallet: z
        .object({
          __typename: z.literal("Wallet"),
          id: z.string(),
          ownerID: z.string(),
          balance: z.number(),
          currency: z.string(),
          lastUpdated: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      type: transactionTypeSchema.optional().nullable(),
      description: z.string().optional().nullable(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      walletTransactionsId: z.string().optional().nullable(),
      userTransactionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteTransactionSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionTransactionFilterInputSchema.optional().nullable(),
});

export const onDeleteTransactionSubscriptionSchema = z.object({
  onDeleteTransaction: z
    .object({
      __typename: z.literal("Transaction"),
      id: z.string(),
      wallet: z
        .object({
          __typename: z.literal("Wallet"),
          id: z.string(),
          ownerID: z.string(),
          balance: z.number(),
          currency: z.string(),
          lastUpdated: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      amount: z.number(),
      type: transactionTypeSchema.optional().nullable(),
      description: z.string().optional().nullable(),
      date: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      walletTransactionsId: z.string().optional().nullable(),
      userTransactionsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateReviewSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionReviewFilterInputSchema.optional().nullable(),
});

export const onCreateReviewSubscriptionSchema = z.object({
  onCreateReview: z
    .object({
      __typename: z.literal("Review"),
      id: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      rating: z.number(),
      comment: z.string().optional().nullable(),
      date: z.string(),
      response: z
        .object({
          __typename: z.literal("ReviewResponse"),
          id: z.string(),
          responseText: z.string(),
          responseDate: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          reviewResponseReviewId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceReviewsId: z.string().optional().nullable(),
      providerReviewsId: z.string().optional().nullable(),
      userReviewsId: z.string().optional().nullable(),
      reviewResponseId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateReviewSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionReviewFilterInputSchema.optional().nullable(),
});

export const onUpdateReviewSubscriptionSchema = z.object({
  onUpdateReview: z
    .object({
      __typename: z.literal("Review"),
      id: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      rating: z.number(),
      comment: z.string().optional().nullable(),
      date: z.string(),
      response: z
        .object({
          __typename: z.literal("ReviewResponse"),
          id: z.string(),
          responseText: z.string(),
          responseDate: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          reviewResponseReviewId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceReviewsId: z.string().optional().nullable(),
      providerReviewsId: z.string().optional().nullable(),
      userReviewsId: z.string().optional().nullable(),
      reviewResponseId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteReviewSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionReviewFilterInputSchema.optional().nullable(),
});

export const onDeleteReviewSubscriptionSchema = z.object({
  onDeleteReview: z
    .object({
      __typename: z.literal("Review"),
      id: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      rating: z.number(),
      comment: z.string().optional().nullable(),
      date: z.string(),
      response: z
        .object({
          __typename: z.literal("ReviewResponse"),
          id: z.string(),
          responseText: z.string(),
          responseDate: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          reviewResponseReviewId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceReviewsId: z.string().optional().nullable(),
      providerReviewsId: z.string().optional().nullable(),
      userReviewsId: z.string().optional().nullable(),
      reviewResponseId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateReviewResponseSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionReviewResponseFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateReviewResponseSubscriptionSchema = z.object({
  onCreateReviewResponse: z
    .object({
      __typename: z.literal("ReviewResponse"),
      id: z.string(),
      review: z
        .object({
          __typename: z.literal("Review"),
          id: z.string(),
          rating: z.number(),
          comment: z.string().optional().nullable(),
          date: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          serviceReviewsId: z.string().optional().nullable(),
          providerReviewsId: z.string().optional().nullable(),
          userReviewsId: z.string().optional().nullable(),
          reviewResponseId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      responseText: z.string(),
      responseDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      reviewResponseReviewId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateReviewResponseSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionReviewResponseFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateReviewResponseSubscriptionSchema = z.object({
  onUpdateReviewResponse: z
    .object({
      __typename: z.literal("ReviewResponse"),
      id: z.string(),
      review: z
        .object({
          __typename: z.literal("Review"),
          id: z.string(),
          rating: z.number(),
          comment: z.string().optional().nullable(),
          date: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          serviceReviewsId: z.string().optional().nullable(),
          providerReviewsId: z.string().optional().nullable(),
          userReviewsId: z.string().optional().nullable(),
          reviewResponseId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      responseText: z.string(),
      responseDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      reviewResponseReviewId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteReviewResponseSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionReviewResponseFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteReviewResponseSubscriptionSchema = z.object({
  onDeleteReviewResponse: z
    .object({
      __typename: z.literal("ReviewResponse"),
      id: z.string(),
      review: z
        .object({
          __typename: z.literal("Review"),
          id: z.string(),
          rating: z.number(),
          comment: z.string().optional().nullable(),
          date: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          serviceReviewsId: z.string().optional().nullable(),
          providerReviewsId: z.string().optional().nullable(),
          userReviewsId: z.string().optional().nullable(),
          reviewResponseId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      responseText: z.string(),
      responseDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      reviewResponseReviewId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateMessageThreadSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionMessageThreadFilterInputSchema.optional().nullable(),
});

export const onCreateMessageThreadSubscriptionSchema = z.object({
  onCreateMessageThread: z
    .object({
      __typename: z.literal("MessageThread"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      messages: z
        .object({
          __typename: z.literal("ModelMessageContentConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      lastMessageDate: z.string().optional().nullable(),
      lastMessageContent: z.string().optional().nullable(),
      status: messageStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderMessagesId: z.string().optional().nullable(),
      userMessagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateMessageThreadSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionMessageThreadFilterInputSchema.optional().nullable(),
});

export const onUpdateMessageThreadSubscriptionSchema = z.object({
  onUpdateMessageThread: z
    .object({
      __typename: z.literal("MessageThread"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      messages: z
        .object({
          __typename: z.literal("ModelMessageContentConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      lastMessageDate: z.string().optional().nullable(),
      lastMessageContent: z.string().optional().nullable(),
      status: messageStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderMessagesId: z.string().optional().nullable(),
      userMessagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteMessageThreadSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionMessageThreadFilterInputSchema.optional().nullable(),
});

export const onDeleteMessageThreadSubscriptionSchema = z.object({
  onDeleteMessageThread: z
    .object({
      __typename: z.literal("MessageThread"),
      id: z.string(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      messages: z
        .object({
          __typename: z.literal("ModelMessageContentConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      lastMessageDate: z.string().optional().nullable(),
      lastMessageContent: z.string().optional().nullable(),
      status: messageStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderMessagesId: z.string().optional().nullable(),
      userMessagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateMessageContentSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionMessageContentFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateMessageContentSubscriptionSchema = z.object({
  onCreateMessageContent: z
    .object({
      __typename: z.literal("MessageContent"),
      id: z.string(),
      thread: z
        .object({
          __typename: z.literal("MessageThread"),
          id: z.string(),
          lastMessageDate: z.string().optional().nullable(),
          lastMessageContent: z.string().optional().nullable(),
          status: messageStatusSchema.optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          providerProviderMessagesId: z.string().optional().nullable(),
          userMessagesId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      sender: z.string().optional().nullable(),
      content: z.string(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      messageThreadMessagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateMessageContentSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionMessageContentFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateMessageContentSubscriptionSchema = z.object({
  onUpdateMessageContent: z
    .object({
      __typename: z.literal("MessageContent"),
      id: z.string(),
      thread: z
        .object({
          __typename: z.literal("MessageThread"),
          id: z.string(),
          lastMessageDate: z.string().optional().nullable(),
          lastMessageContent: z.string().optional().nullable(),
          status: messageStatusSchema.optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          providerProviderMessagesId: z.string().optional().nullable(),
          userMessagesId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      sender: z.string().optional().nullable(),
      content: z.string(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      messageThreadMessagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteMessageContentSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionMessageContentFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteMessageContentSubscriptionSchema = z.object({
  onDeleteMessageContent: z
    .object({
      __typename: z.literal("MessageContent"),
      id: z.string(),
      thread: z
        .object({
          __typename: z.literal("MessageThread"),
          id: z.string(),
          lastMessageDate: z.string().optional().nullable(),
          lastMessageContent: z.string().optional().nullable(),
          status: messageStatusSchema.optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          providerProviderMessagesId: z.string().optional().nullable(),
          userMessagesId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      sender: z.string().optional().nullable(),
      content: z.string(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      messageThreadMessagesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateBookingSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionBookingFilterInputSchema.optional().nullable(),
});

export const onCreateBookingSubscriptionSchema = z.object({
  onCreateBooking: z
    .object({
      __typename: z.literal("Booking"),
      id: z.string(),
      date: z.string(),
      startTime: z.string(),
      endTime: z.string(),
      status: bookingStatusSchema.optional().nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      location: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      price: z.number(),
      isInstantBooking: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceBookingsId: z.string().optional().nullable(),
      providerProviderBookingsId: z.string().optional().nullable(),
      userBookingsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateBookingSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionBookingFilterInputSchema.optional().nullable(),
});

export const onUpdateBookingSubscriptionSchema = z.object({
  onUpdateBooking: z
    .object({
      __typename: z.literal("Booking"),
      id: z.string(),
      date: z.string(),
      startTime: z.string(),
      endTime: z.string(),
      status: bookingStatusSchema.optional().nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      location: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      price: z.number(),
      isInstantBooking: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceBookingsId: z.string().optional().nullable(),
      providerProviderBookingsId: z.string().optional().nullable(),
      userBookingsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteBookingSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionBookingFilterInputSchema.optional().nullable(),
});

export const onDeleteBookingSubscriptionSchema = z.object({
  onDeleteBooking: z
    .object({
      __typename: z.literal("Booking"),
      id: z.string(),
      date: z.string(),
      startTime: z.string(),
      endTime: z.string(),
      status: bookingStatusSchema.optional().nullable(),
      service: z
        .object({
          __typename: z.literal("Service"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          price_min: z.number(),
          duration: z.string().optional().nullable(),
          Materials: z.string().optional().nullable(),
          MaterialCosts: z.number().optional().nullable(),
          BookingRequirements: z.string().optional().nullable(),
          price_max: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          invoiceServicesId: z.string().optional().nullable(),
          servicePackageServicesId: z.string().optional().nullable(),
          subCategoryServicesId: z.string().optional().nullable(),
          providerServicesOfferedId: z.string().optional().nullable(),
          serviceTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      user: z
        .object({
          __typename: z.literal("User"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          preferredContactTime: z.string().optional().nullable(),
          serviceInterestedIn: z.string().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          userWalletId: z.string().optional().nullable(),
          userCurentLocationId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      location: z.string().optional().nullable(),
      notes: z.string().optional().nullable(),
      price: z.number(),
      isInstantBooking: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceBookingsId: z.string().optional().nullable(),
      providerProviderBookingsId: z.string().optional().nullable(),
      userBookingsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateTeamMemberSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionTeamMemberFilterInputSchema.optional().nullable(),
});

export const onCreateTeamMemberSubscriptionSchema = z.object({
  onCreateTeamMember: z
    .object({
      __typename: z.literal("TeamMember"),
      id: z.string(),
      name: z.string(),
      role: z.string().optional().nullable(),
      currentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      jobSiteDuration: z.string().optional().nullable(),
      communicationLog: z
        .object({
          __typename: z.literal("ModelMessageConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      assignedJobs: z
        .object({
          __typename: z.literal("ModelJobConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerID: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerTeamMembersId: z.string().optional().nullable(),
      teamMemberCurrentLocationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateTeamMemberSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionTeamMemberFilterInputSchema.optional().nullable(),
});

export const onUpdateTeamMemberSubscriptionSchema = z.object({
  onUpdateTeamMember: z
    .object({
      __typename: z.literal("TeamMember"),
      id: z.string(),
      name: z.string(),
      role: z.string().optional().nullable(),
      currentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      jobSiteDuration: z.string().optional().nullable(),
      communicationLog: z
        .object({
          __typename: z.literal("ModelMessageConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      assignedJobs: z
        .object({
          __typename: z.literal("ModelJobConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerID: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerTeamMembersId: z.string().optional().nullable(),
      teamMemberCurrentLocationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteTeamMemberSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionTeamMemberFilterInputSchema.optional().nullable(),
});

export const onDeleteTeamMemberSubscriptionSchema = z.object({
  onDeleteTeamMember: z
    .object({
      __typename: z.literal("TeamMember"),
      id: z.string(),
      name: z.string(),
      role: z.string().optional().nullable(),
      currentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      jobSiteDuration: z.string().optional().nullable(),
      communicationLog: z
        .object({
          __typename: z.literal("ModelMessageConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      assignedJobs: z
        .object({
          __typename: z.literal("ModelJobConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerID: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerTeamMembersId: z.string().optional().nullable(),
      teamMemberCurrentLocationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateLocationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionLocationFilterInputSchema.optional().nullable(),
});

export const onCreateLocationSubscriptionSchema = z.object({
  onCreateLocation: z
    .object({
      __typename: z.literal("Location"),
      id: z.string(),
      latitude: z.number(),
      longitude: z.number(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdateLocationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionLocationFilterInputSchema.optional().nullable(),
});

export const onUpdateLocationSubscriptionSchema = z.object({
  onUpdateLocation: z
    .object({
      __typename: z.literal("Location"),
      id: z.string(),
      latitude: z.number(),
      longitude: z.number(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeleteLocationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionLocationFilterInputSchema.optional().nullable(),
});

export const onDeleteLocationSubscriptionSchema = z.object({
  onDeleteLocation: z
    .object({
      __typename: z.literal("Location"),
      id: z.string(),
      latitude: z.number(),
      longitude: z.number(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreateMessageSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionMessageFilterInputSchema.optional().nullable(),
});

export const onCreateMessageSubscriptionSchema = z.object({
  onCreateMessage: z
    .object({
      __typename: z.literal("Message"),
      id: z.string(),
      sender: z.string(),
      content: z.string(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      teamMemberCommunicationLogId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateMessageSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionMessageFilterInputSchema.optional().nullable(),
});

export const onUpdateMessageSubscriptionSchema = z.object({
  onUpdateMessage: z
    .object({
      __typename: z.literal("Message"),
      id: z.string(),
      sender: z.string(),
      content: z.string(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      teamMemberCommunicationLogId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteMessageSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionMessageFilterInputSchema.optional().nullable(),
});

export const onDeleteMessageSubscriptionSchema = z.object({
  onDeleteMessage: z
    .object({
      __typename: z.literal("Message"),
      id: z.string(),
      sender: z.string(),
      content: z.string(),
      timestamp: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      teamMemberCommunicationLogId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateJobSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionJobFilterInputSchema.optional().nullable(),
});

export const onCreateJobSubscriptionSchema = z.object({
  onCreateJob: z
    .object({
      __typename: z.literal("Job"),
      id: z.string(),
      description: z.string(),
      location: z.string(),
      startTime: z.string().optional().nullable(),
      endTime: z.string().optional().nullable(),
      status: jobStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      teamMemberAssignedJobsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateJobSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionJobFilterInputSchema.optional().nullable(),
});

export const onUpdateJobSubscriptionSchema = z.object({
  onUpdateJob: z
    .object({
      __typename: z.literal("Job"),
      id: z.string(),
      description: z.string(),
      location: z.string(),
      startTime: z.string().optional().nullable(),
      endTime: z.string().optional().nullable(),
      status: jobStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      teamMemberAssignedJobsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteJobSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionJobFilterInputSchema.optional().nullable(),
});

export const onDeleteJobSubscriptionSchema = z.object({
  onDeleteJob: z
    .object({
      __typename: z.literal("Job"),
      id: z.string(),
      description: z.string(),
      location: z.string(),
      startTime: z.string().optional().nullable(),
      endTime: z.string().optional().nullable(),
      status: jobStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      teamMemberAssignedJobsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateServiceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceFilterInputSchema.optional().nullable(),
});

export const onCreateServiceSubscriptionSchema = z.object({
  onCreateService: z
    .object({
      __typename: z.literal("Service"),
      id: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      price_min: z.number(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      bookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      SubCategory: z
        .object({
          __typename: z.literal("SubCategory"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          mainCategorySubCategoriesId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      servicePromotions: z
        .object({
          __typename: z.literal("ModelServicePromotionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReports: z
        .object({
          __typename: z.literal("ModelProviderReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userReports: z
        .object({
          __typename: z.literal("ModelUserReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userInvoices: z
        .object({
          __typename: z.literal("ModelUserInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userBookmarks: z
        .object({
          __typename: z.literal("ModelUserBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerNotifications: z
        .object({
          __typename: z.literal("ModelProviderNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userNotifications: z
        .object({
          __typename: z.literal("ModelUserNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceDiscounts: z
        .object({
          __typename: z.literal("ModelServiceDiscountConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAvailabilities: z
        .object({
          __typename: z.literal("ModelProviderAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userPreferences: z
        .object({
          __typename: z.literal("ModelUserPreferenceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerCertifications: z
        .object({
          __typename: z.literal("ModelProviderCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceVideos: z
        .object({
          __typename: z.literal("ModelServiceVideoConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceImages: z
        .object({
          __typename: z.literal("ModelServiceImageConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceReviews: z
        .object({
          __typename: z.literal("ModelServiceReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiDiagnostics: z
        .object({
          __typename: z.literal("ModelAIDiagnosticsConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizations: z
        .object({
          __typename: z.literal("ModelCustomizationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userHistories: z
        .object({
          __typename: z.literal("ModelUserHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAwards: z
        .object({
          __typename: z.literal("ModelProviderAwardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      contracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTrackings: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      duration: z.string().optional().nullable(),
      Materials: z.string().optional().nullable(),
      MaterialCosts: z.number().optional().nullable(),
      BookingRequirements: z.string().optional().nullable(),
      price_max: z.number(),
      Tasks: z
        .object({
          __typename: z.literal("Tasks"),
          id: z.string(),
          taskName: z.string(),
          taskTime: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          tasksServiceId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      invoiceServicesId: z.string().optional().nullable(),
      servicePackageServicesId: z.string().optional().nullable(),
      subCategoryServicesId: z.string().optional().nullable(),
      providerServicesOfferedId: z.string().optional().nullable(),
      serviceTasksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateServiceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceFilterInputSchema.optional().nullable(),
});

export const onUpdateServiceSubscriptionSchema = z.object({
  onUpdateService: z
    .object({
      __typename: z.literal("Service"),
      id: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      price_min: z.number(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      bookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      SubCategory: z
        .object({
          __typename: z.literal("SubCategory"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          mainCategorySubCategoriesId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      servicePromotions: z
        .object({
          __typename: z.literal("ModelServicePromotionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReports: z
        .object({
          __typename: z.literal("ModelProviderReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userReports: z
        .object({
          __typename: z.literal("ModelUserReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userInvoices: z
        .object({
          __typename: z.literal("ModelUserInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userBookmarks: z
        .object({
          __typename: z.literal("ModelUserBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerNotifications: z
        .object({
          __typename: z.literal("ModelProviderNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userNotifications: z
        .object({
          __typename: z.literal("ModelUserNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceDiscounts: z
        .object({
          __typename: z.literal("ModelServiceDiscountConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAvailabilities: z
        .object({
          __typename: z.literal("ModelProviderAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userPreferences: z
        .object({
          __typename: z.literal("ModelUserPreferenceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerCertifications: z
        .object({
          __typename: z.literal("ModelProviderCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceVideos: z
        .object({
          __typename: z.literal("ModelServiceVideoConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceImages: z
        .object({
          __typename: z.literal("ModelServiceImageConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceReviews: z
        .object({
          __typename: z.literal("ModelServiceReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiDiagnostics: z
        .object({
          __typename: z.literal("ModelAIDiagnosticsConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizations: z
        .object({
          __typename: z.literal("ModelCustomizationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userHistories: z
        .object({
          __typename: z.literal("ModelUserHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAwards: z
        .object({
          __typename: z.literal("ModelProviderAwardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      contracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTrackings: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      duration: z.string().optional().nullable(),
      Materials: z.string().optional().nullable(),
      MaterialCosts: z.number().optional().nullable(),
      BookingRequirements: z.string().optional().nullable(),
      price_max: z.number(),
      Tasks: z
        .object({
          __typename: z.literal("Tasks"),
          id: z.string(),
          taskName: z.string(),
          taskTime: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          tasksServiceId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      invoiceServicesId: z.string().optional().nullable(),
      servicePackageServicesId: z.string().optional().nullable(),
      subCategoryServicesId: z.string().optional().nullable(),
      providerServicesOfferedId: z.string().optional().nullable(),
      serviceTasksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteServiceSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionServiceFilterInputSchema.optional().nullable(),
});

export const onDeleteServiceSubscriptionSchema = z.object({
  onDeleteService: z
    .object({
      __typename: z.literal("Service"),
      id: z.string(),
      name: z.string(),
      description: z.string().optional().nullable(),
      price_min: z.number(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      bookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      SubCategory: z
        .object({
          __typename: z.literal("SubCategory"),
          id: z.string(),
          name: z.string(),
          description: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          mainCategorySubCategoriesId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      servicePromotions: z
        .object({
          __typename: z.literal("ModelServicePromotionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReports: z
        .object({
          __typename: z.literal("ModelProviderReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userReports: z
        .object({
          __typename: z.literal("ModelUserReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userInvoices: z
        .object({
          __typename: z.literal("ModelUserInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userBookmarks: z
        .object({
          __typename: z.literal("ModelUserBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerNotifications: z
        .object({
          __typename: z.literal("ModelProviderNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userNotifications: z
        .object({
          __typename: z.literal("ModelUserNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceDiscounts: z
        .object({
          __typename: z.literal("ModelServiceDiscountConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAvailabilities: z
        .object({
          __typename: z.literal("ModelProviderAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userPreferences: z
        .object({
          __typename: z.literal("ModelUserPreferenceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerCertifications: z
        .object({
          __typename: z.literal("ModelProviderCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceVideos: z
        .object({
          __typename: z.literal("ModelServiceVideoConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceImages: z
        .object({
          __typename: z.literal("ModelServiceImageConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceReviews: z
        .object({
          __typename: z.literal("ModelServiceReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiDiagnostics: z
        .object({
          __typename: z.literal("ModelAIDiagnosticsConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizations: z
        .object({
          __typename: z.literal("ModelCustomizationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userHistories: z
        .object({
          __typename: z.literal("ModelUserHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAwards: z
        .object({
          __typename: z.literal("ModelProviderAwardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      contracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTrackings: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      duration: z.string().optional().nullable(),
      Materials: z.string().optional().nullable(),
      MaterialCosts: z.number().optional().nullable(),
      BookingRequirements: z.string().optional().nullable(),
      price_max: z.number(),
      Tasks: z
        .object({
          __typename: z.literal("Tasks"),
          id: z.string(),
          taskName: z.string(),
          taskTime: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          tasksServiceId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      invoiceServicesId: z.string().optional().nullable(),
      servicePackageServicesId: z.string().optional().nullable(),
      subCategoryServicesId: z.string().optional().nullable(),
      providerServicesOfferedId: z.string().optional().nullable(),
      serviceTasksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateProviderSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderFilterInputSchema.optional().nullable(),
});

export const onCreateProviderSubscriptionSchema = z.object({
  onCreateProvider: z
    .object({
      __typename: z.literal("Provider"),
      id: z.string(),
      email: z.string(),
      password: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      dob: z.string().optional().nullable(),
      gender: genderSchema.optional().nullable(),
      phone: z.string().optional().nullable(),
      address: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      state: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      zipCode: z.string().optional().nullable(),
      profileImage: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isVerified: z.boolean().optional().nullable(),
      lastLogin: z.string().optional().nullable(),
      accountType: accountTypeSchema.optional().nullable(),
      notificationPreference: notificationPreferenceSchema
        .optional()
        .nullable(),
      languagePreference: z.string().optional().nullable(),
      currencyPreference: z.string().optional().nullable(),
      timezone: z.string().optional().nullable(),
      chatbotRequests: z.number().optional().nullable(),
      servicesOffered: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      teamMembers: z
        .object({
          __typename: z.literal("ModelTeamMemberConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      availability: z
        .object({
          __typename: z.literal("ModelAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      certifications: z
        .object({
          __typename: z.literal("ModelCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      qualifications: z
        .object({
          __typename: z.literal("ModelQualificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      specializations: z
        .object({
          __typename: z.literal("ModelSpecializationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerMessages: z
        .object({
          __typename: z.literal("ModelMessageThreadConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerContracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerInvoices: z
        .object({
          __typename: z.literal("ModelInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerTips: z
        .object({
          __typename: z.literal("ModelTipConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReferrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerHistories: z
        .object({
          __typename: z.literal("ModelProviderHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerNotifications: z
        .object({
          __typename: z.literal("ModelProviderNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReports: z
        .object({
          __typename: z.literal("ModelProviderReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAvailability: z
        .object({
          __typename: z.literal("ModelProviderAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerCertification: z
        .object({
          __typename: z.literal("ModelProviderCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAwards: z
        .object({
          __typename: z.literal("ModelProviderAwardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTracking: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      currentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      isInstantBookingAvailable: z.boolean().optional().nullable(),
      Tasks: z
        .object({
          __typename: z.literal("Tasks"),
          id: z.string(),
          taskName: z.string(),
          taskTime: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          tasksServiceId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      isEmailVerified: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      nicheServiceProvidersId: z.string().optional().nullable(),
      providerCurrentLocationId: z.string().optional().nullable(),
      providerTasksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateProviderSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderFilterInputSchema.optional().nullable(),
});

export const onUpdateProviderSubscriptionSchema = z.object({
  onUpdateProvider: z
    .object({
      __typename: z.literal("Provider"),
      id: z.string(),
      email: z.string(),
      password: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      dob: z.string().optional().nullable(),
      gender: genderSchema.optional().nullable(),
      phone: z.string().optional().nullable(),
      address: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      state: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      zipCode: z.string().optional().nullable(),
      profileImage: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isVerified: z.boolean().optional().nullable(),
      lastLogin: z.string().optional().nullable(),
      accountType: accountTypeSchema.optional().nullable(),
      notificationPreference: notificationPreferenceSchema
        .optional()
        .nullable(),
      languagePreference: z.string().optional().nullable(),
      currencyPreference: z.string().optional().nullable(),
      timezone: z.string().optional().nullable(),
      chatbotRequests: z.number().optional().nullable(),
      servicesOffered: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      teamMembers: z
        .object({
          __typename: z.literal("ModelTeamMemberConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      availability: z
        .object({
          __typename: z.literal("ModelAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      certifications: z
        .object({
          __typename: z.literal("ModelCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      qualifications: z
        .object({
          __typename: z.literal("ModelQualificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      specializations: z
        .object({
          __typename: z.literal("ModelSpecializationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerMessages: z
        .object({
          __typename: z.literal("ModelMessageThreadConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerContracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerInvoices: z
        .object({
          __typename: z.literal("ModelInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerTips: z
        .object({
          __typename: z.literal("ModelTipConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReferrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerHistories: z
        .object({
          __typename: z.literal("ModelProviderHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerNotifications: z
        .object({
          __typename: z.literal("ModelProviderNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReports: z
        .object({
          __typename: z.literal("ModelProviderReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAvailability: z
        .object({
          __typename: z.literal("ModelProviderAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerCertification: z
        .object({
          __typename: z.literal("ModelProviderCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAwards: z
        .object({
          __typename: z.literal("ModelProviderAwardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTracking: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      currentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      isInstantBookingAvailable: z.boolean().optional().nullable(),
      Tasks: z
        .object({
          __typename: z.literal("Tasks"),
          id: z.string(),
          taskName: z.string(),
          taskTime: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          tasksServiceId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      isEmailVerified: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      nicheServiceProvidersId: z.string().optional().nullable(),
      providerCurrentLocationId: z.string().optional().nullable(),
      providerTasksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteProviderSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderFilterInputSchema.optional().nullable(),
});

export const onDeleteProviderSubscriptionSchema = z.object({
  onDeleteProvider: z
    .object({
      __typename: z.literal("Provider"),
      id: z.string(),
      email: z.string(),
      password: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      dob: z.string().optional().nullable(),
      gender: genderSchema.optional().nullable(),
      phone: z.string().optional().nullable(),
      address: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      state: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      zipCode: z.string().optional().nullable(),
      profileImage: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isVerified: z.boolean().optional().nullable(),
      lastLogin: z.string().optional().nullable(),
      accountType: accountTypeSchema.optional().nullable(),
      notificationPreference: notificationPreferenceSchema
        .optional()
        .nullable(),
      languagePreference: z.string().optional().nullable(),
      currencyPreference: z.string().optional().nullable(),
      timezone: z.string().optional().nullable(),
      chatbotRequests: z.number().optional().nullable(),
      servicesOffered: z
        .object({
          __typename: z.literal("ModelServiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      teamMembers: z
        .object({
          __typename: z.literal("ModelTeamMemberConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      availability: z
        .object({
          __typename: z.literal("ModelAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      certifications: z
        .object({
          __typename: z.literal("ModelCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      qualifications: z
        .object({
          __typename: z.literal("ModelQualificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      specializations: z
        .object({
          __typename: z.literal("ModelSpecializationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerMessages: z
        .object({
          __typename: z.literal("ModelMessageThreadConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerContracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerInvoices: z
        .object({
          __typename: z.literal("ModelInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerTips: z
        .object({
          __typename: z.literal("ModelTipConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReferrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerHistories: z
        .object({
          __typename: z.literal("ModelProviderHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerNotifications: z
        .object({
          __typename: z.literal("ModelProviderNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerReports: z
        .object({
          __typename: z.literal("ModelProviderReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAvailability: z
        .object({
          __typename: z.literal("ModelProviderAvailabilityConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerCertification: z
        .object({
          __typename: z.literal("ModelProviderCertificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerAwards: z
        .object({
          __typename: z.literal("ModelProviderAwardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTracking: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      currentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      isInstantBookingAvailable: z.boolean().optional().nullable(),
      Tasks: z
        .object({
          __typename: z.literal("Tasks"),
          id: z.string(),
          taskName: z.string(),
          taskTime: z.number(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          tasksServiceId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      isEmailVerified: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      nicheServiceProvidersId: z.string().optional().nullable(),
      providerCurrentLocationId: z.string().optional().nullable(),
      providerTasksId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateAvailabilitySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAvailabilityFilterInputSchema.optional().nullable(),
});

export const onCreateAvailabilitySubscriptionSchema = z.object({
  onCreateAvailability: z
    .object({
      __typename: z.literal("Availability"),
      id: z.string(),
      startTime: z.string(),
      endTime: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      avalabilityDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerAvailabilityId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateAvailabilitySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAvailabilityFilterInputSchema.optional().nullable(),
});

export const onUpdateAvailabilitySubscriptionSchema = z.object({
  onUpdateAvailability: z
    .object({
      __typename: z.literal("Availability"),
      id: z.string(),
      startTime: z.string(),
      endTime: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      avalabilityDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerAvailabilityId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteAvailabilitySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionAvailabilityFilterInputSchema.optional().nullable(),
});

export const onDeleteAvailabilitySubscriptionSchema = z.object({
  onDeleteAvailability: z
    .object({
      __typename: z.literal("Availability"),
      id: z.string(),
      startTime: z.string(),
      endTime: z.string(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      avalabilityDate: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerAvailabilityId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateProviderReviewSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderReviewFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateProviderReviewSubscriptionSchema = z.object({
  onCreateProviderReview: z
    .object({
      __typename: z.literal("ProviderReview"),
      id: z.string(),
      providerID: z.string(),
      userID: z.string(),
      rating: z.number(),
      comment: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onUpdateProviderReviewSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderReviewFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateProviderReviewSubscriptionSchema = z.object({
  onUpdateProviderReview: z
    .object({
      __typename: z.literal("ProviderReview"),
      id: z.string(),
      providerID: z.string(),
      userID: z.string(),
      rating: z.number(),
      comment: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onDeleteProviderReviewSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderReviewFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteProviderReviewSubscriptionSchema = z.object({
  onDeleteProviderReview: z
    .object({
      __typename: z.literal("ProviderReview"),
      id: z.string(),
      providerID: z.string(),
      userID: z.string(),
      rating: z.number(),
      comment: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
    })
    .optional()
    .nullable(),
});

export const onCreateCertificationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionCertificationFilterInputSchema.optional().nullable(),
});

export const onCreateCertificationSubscriptionSchema = z.object({
  onCreateCertification: z
    .object({
      __typename: z.literal("Certification"),
      id: z.string(),
      certificationName: z.string(),
      issuedBy: z.string().optional().nullable(),
      validFrom: z.string().optional().nullable(),
      validUntil: z.string().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerCertificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateCertificationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionCertificationFilterInputSchema.optional().nullable(),
});

export const onUpdateCertificationSubscriptionSchema = z.object({
  onUpdateCertification: z
    .object({
      __typename: z.literal("Certification"),
      id: z.string(),
      certificationName: z.string(),
      issuedBy: z.string().optional().nullable(),
      validFrom: z.string().optional().nullable(),
      validUntil: z.string().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerCertificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteCertificationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionCertificationFilterInputSchema.optional().nullable(),
});

export const onDeleteCertificationSubscriptionSchema = z.object({
  onDeleteCertification: z
    .object({
      __typename: z.literal("Certification"),
      id: z.string(),
      certificationName: z.string(),
      issuedBy: z.string().optional().nullable(),
      validFrom: z.string().optional().nullable(),
      validUntil: z.string().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerCertificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateQualificationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionQualificationFilterInputSchema.optional().nullable(),
});

export const onCreateQualificationSubscriptionSchema = z.object({
  onCreateQualification: z
    .object({
      __typename: z.literal("Qualification"),
      id: z.string(),
      qualificationName: z.string(),
      institution: z.string().optional().nullable(),
      yearObtained: z.number().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerQualificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateQualificationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionQualificationFilterInputSchema.optional().nullable(),
});

export const onUpdateQualificationSubscriptionSchema = z.object({
  onUpdateQualification: z
    .object({
      __typename: z.literal("Qualification"),
      id: z.string(),
      qualificationName: z.string(),
      institution: z.string().optional().nullable(),
      yearObtained: z.number().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerQualificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteQualificationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionQualificationFilterInputSchema.optional().nullable(),
});

export const onDeleteQualificationSubscriptionSchema = z.object({
  onDeleteQualification: z
    .object({
      __typename: z.literal("Qualification"),
      id: z.string(),
      qualificationName: z.string(),
      institution: z.string().optional().nullable(),
      yearObtained: z.number().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerQualificationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateSpecializationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionSpecializationFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateSpecializationSubscriptionSchema = z.object({
  onCreateSpecialization: z
    .object({
      __typename: z.literal("Specialization"),
      id: z.string(),
      specializationName: z.string(),
      description: z.string().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerSpecializationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateSpecializationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionSpecializationFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateSpecializationSubscriptionSchema = z.object({
  onUpdateSpecialization: z
    .object({
      __typename: z.literal("Specialization"),
      id: z.string(),
      specializationName: z.string(),
      description: z.string().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerSpecializationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteSpecializationSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionSpecializationFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteSpecializationSubscriptionSchema = z.object({
  onDeleteSpecialization: z
    .object({
      __typename: z.literal("Specialization"),
      id: z.string(),
      specializationName: z.string(),
      description: z.string().optional().nullable(),
      Provider: z
        .object({
          __typename: z.literal("Provider"),
          id: z.string(),
          email: z.string(),
          password: z.string(),
          firstName: z.string(),
          lastName: z.string(),
          dob: z.string().optional().nullable(),
          gender: genderSchema.optional().nullable(),
          phone: z.string().optional().nullable(),
          address: z.string().optional().nullable(),
          city: z.string().optional().nullable(),
          state: z.string().optional().nullable(),
          country: z.string().optional().nullable(),
          zipCode: z.string().optional().nullable(),
          profileImage: z.string().optional().nullable(),
          isActive: z.boolean().optional().nullable(),
          isVerified: z.boolean().optional().nullable(),
          lastLogin: z.string().optional().nullable(),
          accountType: accountTypeSchema.optional().nullable(),
          notificationPreference: notificationPreferenceSchema
            .optional()
            .nullable(),
          languagePreference: z.string().optional().nullable(),
          currencyPreference: z.string().optional().nullable(),
          timezone: z.string().optional().nullable(),
          chatbotRequests: z.number().optional().nullable(),
          isInstantBookingAvailable: z.boolean().optional().nullable(),
          isEmailVerified: z.boolean().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
          nicheServiceProvidersId: z.string().optional().nullable(),
          providerCurrentLocationId: z.string().optional().nullable(),
          providerTasksId: z.string().optional().nullable(),
        })
        .optional()
        .nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerSpecializationsId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateProviderHistorySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderHistoryFilterInputSchema
    .optional()
    .nullable(),
});

export const onCreateProviderHistorySubscriptionSchema = z.object({
  onCreateProviderHistory: z
    .object({
      __typename: z.literal("ProviderHistory"),
      id: z.string(),
      providerID: z.string(),
      event: z.string(),
      date: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderHistoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateProviderHistorySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderHistoryFilterInputSchema
    .optional()
    .nullable(),
});

export const onUpdateProviderHistorySubscriptionSchema = z.object({
  onUpdateProviderHistory: z
    .object({
      __typename: z.literal("ProviderHistory"),
      id: z.string(),
      providerID: z.string(),
      event: z.string(),
      date: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderHistoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteProviderHistorySubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionProviderHistoryFilterInputSchema
    .optional()
    .nullable(),
});

export const onDeleteProviderHistorySubscriptionSchema = z.object({
  onDeleteProviderHistory: z
    .object({
      __typename: z.literal("ProviderHistory"),
      id: z.string(),
      providerID: z.string(),
      event: z.string(),
      date: z.string(),
      description: z.string().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      providerProviderHistoriesId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onCreateUserSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserFilterInputSchema.optional().nullable(),
});

export const onCreateUserSubscriptionSchema = z.object({
  onCreateUser: z
    .object({
      __typename: z.literal("User"),
      id: z.string(),
      email: z.string(),
      password: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      dob: z.string().optional().nullable(),
      gender: genderSchema.optional().nullable(),
      phone: z.string().optional().nullable(),
      address: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      state: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      zipCode: z.string().optional().nullable(),
      profileImage: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isVerified: z.boolean().optional().nullable(),
      lastLogin: z.string().optional().nullable(),
      accountType: accountTypeSchema.optional().nullable(),
      notificationPreference: notificationPreferenceSchema
        .optional()
        .nullable(),
      languagePreference: z.string().optional().nullable(),
      currencyPreference: z.string().optional().nullable(),
      timezone: z.string().optional().nullable(),
      chatbotRequests: z.number().optional().nullable(),
      bookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      messages: z
        .object({
          __typename: z.literal("ModelMessageThreadConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      wallet: z
        .object({
          __typename: z.literal("Wallet"),
          id: z.string(),
          ownerID: z.string(),
          balance: z.number(),
          currency: z.string(),
          lastUpdated: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      transactions: z
        .object({
          __typename: z.literal("ModelTransactionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      feedbacks: z
        .object({
          __typename: z.literal("ModelFeedbackConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      subscriptions: z
        .object({
          __typename: z.literal("ModelPLMBRSubscriptionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatBots: z
        .object({
          __typename: z.literal("ModelAIChatBotConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatLogs: z
        .object({
          __typename: z.literal("ModelAIChatLogConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTrackings: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reports: z
        .object({
          __typename: z.literal("ModelReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      loyaltyPrograms: z
        .object({
          __typename: z.literal("ModelLoyaltyProgramConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      rewards: z
        .object({
          __typename: z.literal("ModelRewardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      contracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      invoices: z
        .object({
          __typename: z.literal("ModelInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      paymentMethods: z
        .object({
          __typename: z.literal("ModelPaymentMethodConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      tips: z
        .object({
          __typename: z.literal("ModelTipConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userHistories: z
        .object({
          __typename: z.literal("ModelUserHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizations: z
        .object({
          __typename: z.literal("ModelCustomizationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceReviews: z
        .object({
          __typename: z.literal("ModelServiceReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userNotifications: z
        .object({
          __typename: z.literal("ModelUserNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userBookmarks: z
        .object({
          __typename: z.literal("ModelUserBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userInvoices: z
        .object({
          __typename: z.literal("ModelUserInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userReports: z
        .object({
          __typename: z.literal("ModelUserReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userPreference: z
        .object({
          __typename: z.literal("ModelUserPreferenceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      verifications: z
        .object({
          __typename: z.literal("ModelVerificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      preferredContactTime: z.string().optional().nullable(),
      serviceInterestedIn: z.string().optional().nullable(),
      curentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      isEmailVerified: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userWalletId: z.string().optional().nullable(),
      userCurentLocationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onUpdateUserSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserFilterInputSchema.optional().nullable(),
});

export const onUpdateUserSubscriptionSchema = z.object({
  onUpdateUser: z
    .object({
      __typename: z.literal("User"),
      id: z.string(),
      email: z.string(),
      password: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      dob: z.string().optional().nullable(),
      gender: genderSchema.optional().nullable(),
      phone: z.string().optional().nullable(),
      address: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      state: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      zipCode: z.string().optional().nullable(),
      profileImage: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isVerified: z.boolean().optional().nullable(),
      lastLogin: z.string().optional().nullable(),
      accountType: accountTypeSchema.optional().nullable(),
      notificationPreference: notificationPreferenceSchema
        .optional()
        .nullable(),
      languagePreference: z.string().optional().nullable(),
      currencyPreference: z.string().optional().nullable(),
      timezone: z.string().optional().nullable(),
      chatbotRequests: z.number().optional().nullable(),
      bookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      messages: z
        .object({
          __typename: z.literal("ModelMessageThreadConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      wallet: z
        .object({
          __typename: z.literal("Wallet"),
          id: z.string(),
          ownerID: z.string(),
          balance: z.number(),
          currency: z.string(),
          lastUpdated: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      transactions: z
        .object({
          __typename: z.literal("ModelTransactionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      feedbacks: z
        .object({
          __typename: z.literal("ModelFeedbackConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      subscriptions: z
        .object({
          __typename: z.literal("ModelPLMBRSubscriptionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatBots: z
        .object({
          __typename: z.literal("ModelAIChatBotConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatLogs: z
        .object({
          __typename: z.literal("ModelAIChatLogConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTrackings: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reports: z
        .object({
          __typename: z.literal("ModelReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      loyaltyPrograms: z
        .object({
          __typename: z.literal("ModelLoyaltyProgramConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      rewards: z
        .object({
          __typename: z.literal("ModelRewardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      contracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      invoices: z
        .object({
          __typename: z.literal("ModelInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      paymentMethods: z
        .object({
          __typename: z.literal("ModelPaymentMethodConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      tips: z
        .object({
          __typename: z.literal("ModelTipConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userHistories: z
        .object({
          __typename: z.literal("ModelUserHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizations: z
        .object({
          __typename: z.literal("ModelCustomizationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceReviews: z
        .object({
          __typename: z.literal("ModelServiceReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userNotifications: z
        .object({
          __typename: z.literal("ModelUserNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userBookmarks: z
        .object({
          __typename: z.literal("ModelUserBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userInvoices: z
        .object({
          __typename: z.literal("ModelUserInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userReports: z
        .object({
          __typename: z.literal("ModelUserReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userPreference: z
        .object({
          __typename: z.literal("ModelUserPreferenceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      verifications: z
        .object({
          __typename: z.literal("ModelVerificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      preferredContactTime: z.string().optional().nullable(),
      serviceInterestedIn: z.string().optional().nullable(),
      curentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      isEmailVerified: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userWalletId: z.string().optional().nullable(),
      userCurentLocationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const onDeleteUserSubscriptionVariablesSchema = z.object({
  filter: modelSubscriptionUserFilterInputSchema.optional().nullable(),
});

export const onDeleteUserSubscriptionSchema = z.object({
  onDeleteUser: z
    .object({
      __typename: z.literal("User"),
      id: z.string(),
      email: z.string(),
      password: z.string(),
      firstName: z.string(),
      lastName: z.string(),
      dob: z.string().optional().nullable(),
      gender: genderSchema.optional().nullable(),
      phone: z.string().optional().nullable(),
      address: z.string().optional().nullable(),
      city: z.string().optional().nullable(),
      state: z.string().optional().nullable(),
      country: z.string().optional().nullable(),
      zipCode: z.string().optional().nullable(),
      profileImage: z.string().optional().nullable(),
      isActive: z.boolean().optional().nullable(),
      isVerified: z.boolean().optional().nullable(),
      lastLogin: z.string().optional().nullable(),
      accountType: accountTypeSchema.optional().nullable(),
      notificationPreference: notificationPreferenceSchema
        .optional()
        .nullable(),
      languagePreference: z.string().optional().nullable(),
      currencyPreference: z.string().optional().nullable(),
      timezone: z.string().optional().nullable(),
      chatbotRequests: z.number().optional().nullable(),
      bookings: z
        .object({
          __typename: z.literal("ModelBookingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      messages: z
        .object({
          __typename: z.literal("ModelMessageThreadConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reviews: z
        .object({
          __typename: z.literal("ModelReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      wallet: z
        .object({
          __typename: z.literal("Wallet"),
          id: z.string(),
          ownerID: z.string(),
          balance: z.number(),
          currency: z.string(),
          lastUpdated: z.string().optional().nullable(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      transactions: z
        .object({
          __typename: z.literal("ModelTransactionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      feedbacks: z
        .object({
          __typename: z.literal("ModelFeedbackConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      subscriptions: z
        .object({
          __typename: z.literal("ModelPLMBRSubscriptionConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatBots: z
        .object({
          __typename: z.literal("ModelAIChatBotConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      aiChatLogs: z
        .object({
          __typename: z.literal("ModelAIChatLogConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      jobTrackings: z
        .object({
          __typename: z.literal("ModelJobTrackingConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      reports: z
        .object({
          __typename: z.literal("ModelReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      loyaltyPrograms: z
        .object({
          __typename: z.literal("ModelLoyaltyProgramConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      rewards: z
        .object({
          __typename: z.literal("ModelRewardConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      contracts: z
        .object({
          __typename: z.literal("ModelContractConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      invoices: z
        .object({
          __typename: z.literal("ModelInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      paymentMethods: z
        .object({
          __typename: z.literal("ModelPaymentMethodConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      tips: z
        .object({
          __typename: z.literal("ModelTipConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      referrals: z
        .object({
          __typename: z.literal("ModelReferralConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userHistories: z
        .object({
          __typename: z.literal("ModelUserHistoryConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      favoriteProviders: z
        .object({
          __typename: z.literal("ModelFavoriteProviderConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      expenses: z
        .object({
          __typename: z.literal("ModelExpenseConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      customizations: z
        .object({
          __typename: z.literal("ModelCustomizationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      serviceReviews: z
        .object({
          __typename: z.literal("ModelServiceReviewConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userNotifications: z
        .object({
          __typename: z.literal("ModelUserNotificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userBookmarks: z
        .object({
          __typename: z.literal("ModelUserBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userInvoices: z
        .object({
          __typename: z.literal("ModelUserInvoiceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userReports: z
        .object({
          __typename: z.literal("ModelUserReportConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      providerBookmarks: z
        .object({
          __typename: z.literal("ModelProviderBookmarkConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      userPreference: z
        .object({
          __typename: z.literal("ModelUserPreferenceConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      verifications: z
        .object({
          __typename: z.literal("ModelVerificationConnection"),
          nextToken: z.string().optional().nullable(),
          startedAt: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      preferredContactTime: z.string().optional().nullable(),
      serviceInterestedIn: z.string().optional().nullable(),
      curentLocation: z
        .object({
          __typename: z.literal("Location"),
          id: z.string(),
          latitude: z.number(),
          longitude: z.number(),
          timestamp: z.string(),
          createdAt: z.string(),
          updatedAt: z.string(),
          _version: z.number(),
          _deleted: z.boolean().optional().nullable(),
          _lastChangedAt: z.number(),
        })
        .optional()
        .nullable(),
      isEmailVerified: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      userWalletId: z.string().optional().nullable(),
      userCurentLocationId: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
});

export const modelProviderHistoryConnectionSchema = z.object({
  __typename: z.literal("ModelProviderHistoryConnection"),
  items: z.array(providerHistorySchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const modelMessageConnectionSchema = z.object({
  __typename: z.literal("ModelMessageConnection"),
  items: z.array(messageSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const jobSchema = z.object({
  __typename: z.literal("Job"),
  id: z.string(),
  description: z.string(),
  location: z.string(),
  startTime: z.string().optional().nullable(),
  endTime: z.string().optional().nullable(),
  status: jobStatusSchema.optional().nullable(),
  createdAt: z.string(),
  updatedAt: z.string(),
  _version: z.number(),
  _deleted: z.boolean().optional().nullable(),
  _lastChangedAt: z.number(),
  teamMemberAssignedJobsId: z.string().optional().nullable(),
});

export const modelFeedbackConnectionSchema = z.object({
  __typename: z.literal("ModelFeedbackConnection"),
  items: z.array(feedbackSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const modelPLMBRSubscriptionConnectionSchema = z.object({
  __typename: z.literal("ModelPLMBRSubscriptionConnection"),
  items: z.array(pLMBRSubscriptionSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const createTasksMutationVariablesSchema = z.object({
  input: createTasksInputSchema,
  condition: modelTasksConditionInputSchema.optional().nullable(),
});

export const createEquipmentMutationVariablesSchema = z.object({
  input: createEquipmentInputSchema,
  condition: modelEquipmentConditionInputSchema.optional().nullable(),
});

export const modelJobConnectionSchema = z.object({
  __typename: z.literal("ModelJobConnection"),
  items: z.array(jobSchema.nullable()),
  nextToken: z.string().optional().nullable(),
  startedAt: z.number().optional().nullable(),
});

export const tasksSchema: z.ZodSchema<Tasks> = z.lazy(() =>
  z.object({
    __typename: z.literal("Tasks"),
    id: z.string(),
    taskName: z.string(),
    taskTime: z.number(),
    Service: serviceSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    tasksServiceId: z.string().optional().nullable(),
  }),
);

export const serviceSchema: z.ZodSchema<Service> = z.lazy(() =>
  z.object({
    __typename: z.literal("Service"),
    id: z.string(),
    name: z.string(),
    description: z.string().optional().nullable(),
    price_min: z.number(),
    Provider: providerSchema.optional().nullable(),
    reviews: modelReviewConnectionSchema.optional().nullable(),
    bookings: modelBookingConnectionSchema.optional().nullable(),
    SubCategory: subCategorySchema.optional().nullable(),
    servicePromotions: modelServicePromotionConnectionSchema
      .optional()
      .nullable(),
    providerReports: modelProviderReportConnectionSchema.optional().nullable(),
    userReports: modelUserReportConnectionSchema.optional().nullable(),
    userInvoices: modelUserInvoiceConnectionSchema.optional().nullable(),
    providerBookmarks: modelProviderBookmarkConnectionSchema
      .optional()
      .nullable(),
    userBookmarks: modelUserBookmarkConnectionSchema.optional().nullable(),
    providerNotifications: modelProviderNotificationConnectionSchema
      .optional()
      .nullable(),
    userNotifications: modelUserNotificationConnectionSchema
      .optional()
      .nullable(),
    serviceDiscounts: modelServiceDiscountConnectionSchema
      .optional()
      .nullable(),
    providerAvailabilities: modelProviderAvailabilityConnectionSchema
      .optional()
      .nullable(),
    userPreferences: modelUserPreferenceConnectionSchema.optional().nullable(),
    providerCertifications: modelProviderCertificationConnectionSchema
      .optional()
      .nullable(),
    serviceVideos: modelServiceVideoConnectionSchema.optional().nullable(),
    serviceImages: modelServiceImageConnectionSchema.optional().nullable(),
    serviceReviews: modelServiceReviewConnectionSchema.optional().nullable(),
    aiDiagnostics: modelAIDiagnosticsConnectionSchema.optional().nullable(),
    customizations: modelCustomizationConnectionSchema.optional().nullable(),
    expenses: modelExpenseConnectionSchema.optional().nullable(),
    favoriteProviders: modelFavoriteProviderConnectionSchema
      .optional()
      .nullable(),
    userHistories: modelUserHistoryConnectionSchema.optional().nullable(),
    providerAwards: modelProviderAwardConnectionSchema.optional().nullable(),
    referrals: modelReferralConnectionSchema.optional().nullable(),
    contracts: modelContractConnectionSchema.optional().nullable(),
    jobTrackings: modelJobTrackingConnectionSchema.optional().nullable(),
    duration: z.string().optional().nullable(),
    Materials: z.string().optional().nullable(),
    MaterialCosts: z.number().optional().nullable(),
    BookingRequirements: z.string().optional().nullable(),
    price_max: z.number(),
    Tasks: tasksSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    invoiceServicesId: z.string().optional().nullable(),
    servicePackageServicesId: z.string().optional().nullable(),
    subCategoryServicesId: z.string().optional().nullable(),
    providerServicesOfferedId: z.string().optional().nullable(),
    serviceTasksId: z.string().optional().nullable(),
  }),
);

export const providerSchema: z.ZodSchema<Provider> = z.lazy(() =>
  z.object({
    __typename: z.literal("Provider"),
    id: z.string(),
    email: z.string(),
    password: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    dob: z.string().optional().nullable(),
    gender: genderSchema.optional().nullable(),
    phone: z.string().optional().nullable(),
    address: z.string().optional().nullable(),
    city: z.string().optional().nullable(),
    state: z.string().optional().nullable(),
    country: z.string().optional().nullable(),
    zipCode: z.string().optional().nullable(),
    profileImage: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    isVerified: z.boolean().optional().nullable(),
    lastLogin: z.string().optional().nullable(),
    accountType: accountTypeSchema.optional().nullable(),
    notificationPreference: notificationPreferenceSchema.optional().nullable(),
    languagePreference: z.string().optional().nullable(),
    currencyPreference: z.string().optional().nullable(),
    timezone: z.string().optional().nullable(),
    chatbotRequests: z.number().optional().nullable(),
    servicesOffered: modelServiceConnectionSchema.optional().nullable(),
    teamMembers: modelTeamMemberConnectionSchema.optional().nullable(),
    availability: modelAvailabilityConnectionSchema.optional().nullable(),
    reviews: modelReviewConnectionSchema.optional().nullable(),
    certifications: modelCertificationConnectionSchema.optional().nullable(),
    qualifications: modelQualificationConnectionSchema.optional().nullable(),
    specializations: modelSpecializationConnectionSchema.optional().nullable(),
    providerBookings: modelBookingConnectionSchema.optional().nullable(),
    providerMessages: modelMessageThreadConnectionSchema.optional().nullable(),
    providerContracts: modelContractConnectionSchema.optional().nullable(),
    providerInvoices: modelInvoiceConnectionSchema.optional().nullable(),
    providerTips: modelTipConnectionSchema.optional().nullable(),
    providerReferrals: modelReferralConnectionSchema.optional().nullable(),
    providerHistories: modelProviderHistoryConnectionSchema
      .optional()
      .nullable(),
    providerNotifications: modelProviderNotificationConnectionSchema
      .optional()
      .nullable(),
    providerBookmarks: modelProviderBookmarkConnectionSchema
      .optional()
      .nullable(),
    providerReports: modelProviderReportConnectionSchema.optional().nullable(),
    providerAvailability: modelProviderAvailabilityConnectionSchema
      .optional()
      .nullable(),
    providerCertification: modelProviderCertificationConnectionSchema
      .optional()
      .nullable(),
    favoriteProviders: modelFavoriteProviderConnectionSchema
      .optional()
      .nullable(),
    providerAwards: modelProviderAwardConnectionSchema.optional().nullable(),
    jobTracking: modelJobTrackingConnectionSchema.optional().nullable(),
    expenses: modelExpenseConnectionSchema.optional().nullable(),
    currentLocation: locationSchema.optional().nullable(),
    isInstantBookingAvailable: z.boolean().optional().nullable(),
    Tasks: tasksSchema.optional().nullable(),
    isEmailVerified: z.boolean().optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    nicheServiceProvidersId: z.string().optional().nullable(),
    providerCurrentLocationId: z.string().optional().nullable(),
    providerTasksId: z.string().optional().nullable(),
  }),
);

export const modelReviewConnectionSchema: z.ZodSchema<ModelReviewConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelReviewConnection"),
      items: z.array(reviewSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelBookingConnectionSchema: z.ZodSchema<ModelBookingConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelBookingConnection"),
      items: z.array(bookingSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const subCategorySchema: z.ZodSchema<SubCategory> = z.lazy(() =>
  z.object({
    __typename: z.literal("SubCategory"),
    id: z.string(),
    name: z.string(),
    description: z.string().optional().nullable(),
    MainCategory: mainCategorySchema.optional().nullable(),
    Services: modelServiceConnectionSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    mainCategorySubCategoriesId: z.string().optional().nullable(),
  }),
);

export const modelServicePromotionConnectionSchema: z.ZodSchema<ModelServicePromotionConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelServicePromotionConnection"),
      items: z.array(servicePromotionSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelProviderReportConnectionSchema: z.ZodSchema<ModelProviderReportConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelProviderReportConnection"),
      items: z.array(providerReportSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelUserReportConnectionSchema: z.ZodSchema<ModelUserReportConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelUserReportConnection"),
      items: z.array(userReportSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelUserInvoiceConnectionSchema: z.ZodSchema<ModelUserInvoiceConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelUserInvoiceConnection"),
      items: z.array(userInvoiceSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelProviderBookmarkConnectionSchema: z.ZodSchema<ModelProviderBookmarkConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelProviderBookmarkConnection"),
      items: z.array(providerBookmarkSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelUserBookmarkConnectionSchema: z.ZodSchema<ModelUserBookmarkConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelUserBookmarkConnection"),
      items: z.array(userBookmarkSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelProviderNotificationConnectionSchema: z.ZodSchema<ModelProviderNotificationConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelProviderNotificationConnection"),
      items: z.array(providerNotificationSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelUserNotificationConnectionSchema: z.ZodSchema<ModelUserNotificationConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelUserNotificationConnection"),
      items: z.array(userNotificationSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelServiceDiscountConnectionSchema: z.ZodSchema<ModelServiceDiscountConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelServiceDiscountConnection"),
      items: z.array(serviceDiscountSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelProviderAvailabilityConnectionSchema: z.ZodSchema<ModelProviderAvailabilityConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelProviderAvailabilityConnection"),
      items: z.array(providerAvailabilitySchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelUserPreferenceConnectionSchema: z.ZodSchema<ModelUserPreferenceConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelUserPreferenceConnection"),
      items: z.array(userPreferenceSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelProviderCertificationConnectionSchema: z.ZodSchema<ModelProviderCertificationConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelProviderCertificationConnection"),
      items: z.array(providerCertificationSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelServiceVideoConnectionSchema: z.ZodSchema<ModelServiceVideoConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelServiceVideoConnection"),
      items: z.array(serviceVideoSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelServiceImageConnectionSchema: z.ZodSchema<ModelServiceImageConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelServiceImageConnection"),
      items: z.array(serviceImageSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelServiceReviewConnectionSchema: z.ZodSchema<ModelServiceReviewConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelServiceReviewConnection"),
      items: z.array(serviceReviewSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelAIDiagnosticsConnectionSchema: z.ZodSchema<ModelAIDiagnosticsConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelAIDiagnosticsConnection"),
      items: z.array(aIDiagnosticsSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelCustomizationConnectionSchema: z.ZodSchema<ModelCustomizationConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelCustomizationConnection"),
      items: z.array(customizationSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelExpenseConnectionSchema: z.ZodSchema<ModelExpenseConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelExpenseConnection"),
      items: z.array(expenseSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelFavoriteProviderConnectionSchema: z.ZodSchema<ModelFavoriteProviderConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelFavoriteProviderConnection"),
      items: z.array(favoriteProviderSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelUserHistoryConnectionSchema: z.ZodSchema<ModelUserHistoryConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelUserHistoryConnection"),
      items: z.array(userHistorySchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelProviderAwardConnectionSchema: z.ZodSchema<ModelProviderAwardConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelProviderAwardConnection"),
      items: z.array(providerAwardSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelReferralConnectionSchema: z.ZodSchema<ModelReferralConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelReferralConnection"),
      items: z.array(referralSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelContractConnectionSchema: z.ZodSchema<ModelContractConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelContractConnection"),
      items: z.array(contractSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelJobTrackingConnectionSchema: z.ZodSchema<ModelJobTrackingConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelJobTrackingConnection"),
      items: z.array(jobTrackingSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelServiceConnectionSchema: z.ZodSchema<ModelServiceConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelServiceConnection"),
      items: z.array(serviceSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelTeamMemberConnectionSchema: z.ZodSchema<ModelTeamMemberConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelTeamMemberConnection"),
      items: z.array(teamMemberSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelAvailabilityConnectionSchema: z.ZodSchema<ModelAvailabilityConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelAvailabilityConnection"),
      items: z.array(availabilitySchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelCertificationConnectionSchema: z.ZodSchema<ModelCertificationConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelCertificationConnection"),
      items: z.array(certificationSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelQualificationConnectionSchema: z.ZodSchema<ModelQualificationConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelQualificationConnection"),
      items: z.array(qualificationSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelSpecializationConnectionSchema: z.ZodSchema<ModelSpecializationConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelSpecializationConnection"),
      items: z.array(specializationSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelMessageThreadConnectionSchema: z.ZodSchema<ModelMessageThreadConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelMessageThreadConnection"),
      items: z.array(messageThreadSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelInvoiceConnectionSchema: z.ZodSchema<ModelInvoiceConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelInvoiceConnection"),
      items: z.array(invoiceSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelTipConnectionSchema: z.ZodSchema<ModelTipConnection> = z.lazy(
  () =>
    z.object({
      __typename: z.literal("ModelTipConnection"),
      items: z.array(tipSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
);

export const teamMemberSchema: z.ZodSchema<TeamMember> = z.lazy(() =>
  z.object({
    __typename: z.literal("TeamMember"),
    id: z.string(),
    name: z.string(),
    role: z.string().optional().nullable(),
    currentLocation: locationSchema.optional().nullable(),
    jobSiteDuration: z.string().optional().nullable(),
    communicationLog: modelMessageConnectionSchema.optional().nullable(),
    assignedJobs: modelJobConnectionSchema.optional().nullable(),
    providerID: z.string(),
    Provider: providerSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    providerTeamMembersId: z.string().optional().nullable(),
    teamMemberCurrentLocationId: z.string().optional().nullable(),
  }),
);

export const availabilitySchema: z.ZodSchema<Availability> = z.lazy(() =>
  z.object({
    __typename: z.literal("Availability"),
    id: z.string(),
    startTime: z.string(),
    endTime: z.string(),
    Provider: providerSchema.optional().nullable(),
    avalabilityDate: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    providerAvailabilityId: z.string().optional().nullable(),
  }),
);

export const reviewSchema: z.ZodSchema<Review> = z.lazy(() =>
  z.object({
    __typename: z.literal("Review"),
    id: z.string(),
    Provider: providerSchema.optional().nullable(),
    user: userSchema.optional().nullable(),
    service: serviceSchema.optional().nullable(),
    rating: z.number(),
    comment: z.string().optional().nullable(),
    date: z.string(),
    response: reviewResponseSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceReviewsId: z.string().optional().nullable(),
    providerReviewsId: z.string().optional().nullable(),
    userReviewsId: z.string().optional().nullable(),
    reviewResponseId: z.string().optional().nullable(),
  }),
);

export const userSchema: z.ZodSchema<User> = z.lazy(() =>
  z.object({
    __typename: z.literal("User"),
    id: z.string(),
    email: z.string(),
    password: z.string(),
    firstName: z.string(),
    lastName: z.string(),
    dob: z.string().optional().nullable(),
    gender: genderSchema.optional().nullable(),
    phone: z.string().optional().nullable(),
    address: z.string().optional().nullable(),
    city: z.string().optional().nullable(),
    state: z.string().optional().nullable(),
    country: z.string().optional().nullable(),
    zipCode: z.string().optional().nullable(),
    profileImage: z.string().optional().nullable(),
    isActive: z.boolean().optional().nullable(),
    isVerified: z.boolean().optional().nullable(),
    lastLogin: z.string().optional().nullable(),
    accountType: accountTypeSchema.optional().nullable(),
    notificationPreference: notificationPreferenceSchema.optional().nullable(),
    languagePreference: z.string().optional().nullable(),
    currencyPreference: z.string().optional().nullable(),
    timezone: z.string().optional().nullable(),
    chatbotRequests: z.number().optional().nullable(),
    bookings: modelBookingConnectionSchema.optional().nullable(),
    messages: modelMessageThreadConnectionSchema.optional().nullable(),
    reviews: modelReviewConnectionSchema.optional().nullable(),
    wallet: walletSchema.optional().nullable(),
    transactions: modelTransactionConnectionSchema.optional().nullable(),
    feedbacks: modelFeedbackConnectionSchema.optional().nullable(),
    subscriptions: modelPLMBRSubscriptionConnectionSchema.optional().nullable(),
    aiChatBots: modelAIChatBotConnectionSchema.optional().nullable(),
    aiChatLogs: modelAIChatLogConnectionSchema.optional().nullable(),
    jobTrackings: modelJobTrackingConnectionSchema.optional().nullable(),
    reports: modelReportConnectionSchema.optional().nullable(),
    loyaltyPrograms: modelLoyaltyProgramConnectionSchema.optional().nullable(),
    rewards: modelRewardConnectionSchema.optional().nullable(),
    contracts: modelContractConnectionSchema.optional().nullable(),
    invoices: modelInvoiceConnectionSchema.optional().nullable(),
    paymentMethods: modelPaymentMethodConnectionSchema.optional().nullable(),
    tips: modelTipConnectionSchema.optional().nullable(),
    referrals: modelReferralConnectionSchema.optional().nullable(),
    userHistories: modelUserHistoryConnectionSchema.optional().nullable(),
    favoriteProviders: modelFavoriteProviderConnectionSchema
      .optional()
      .nullable(),
    expenses: modelExpenseConnectionSchema.optional().nullable(),
    customizations: modelCustomizationConnectionSchema.optional().nullable(),
    serviceReviews: modelServiceReviewConnectionSchema.optional().nullable(),
    userNotifications: modelUserNotificationConnectionSchema
      .optional()
      .nullable(),
    userBookmarks: modelUserBookmarkConnectionSchema.optional().nullable(),
    userInvoices: modelUserInvoiceConnectionSchema.optional().nullable(),
    userReports: modelUserReportConnectionSchema.optional().nullable(),
    providerBookmarks: modelProviderBookmarkConnectionSchema
      .optional()
      .nullable(),
    userPreference: modelUserPreferenceConnectionSchema.optional().nullable(),
    verifications: modelVerificationConnectionSchema.optional().nullable(),
    preferredContactTime: z.string().optional().nullable(),
    serviceInterestedIn: z.string().optional().nullable(),
    curentLocation: locationSchema.optional().nullable(),
    isEmailVerified: z.boolean().optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    userWalletId: z.string().optional().nullable(),
    userCurentLocationId: z.string().optional().nullable(),
  }),
);

export const reviewResponseSchema: z.ZodSchema<ReviewResponse> = z.lazy(() =>
  z.object({
    __typename: z.literal("ReviewResponse"),
    id: z.string(),
    review: reviewSchema.optional().nullable(),
    responseText: z.string(),
    responseDate: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    reviewResponseReviewId: z.string().optional().nullable(),
  }),
);

export const walletSchema: z.ZodSchema<Wallet> = z.lazy(() =>
  z.object({
    __typename: z.literal("Wallet"),
    id: z.string(),
    ownerID: z.string(),
    balance: z.number(),
    currency: z.string(),
    transactions: modelTransactionConnectionSchema.optional().nullable(),
    lastUpdated: z.string().optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
  }),
);

export const modelTransactionConnectionSchema: z.ZodSchema<ModelTransactionConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelTransactionConnection"),
      items: z.array(transactionSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelAIChatBotConnectionSchema: z.ZodSchema<ModelAIChatBotConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelAIChatBotConnection"),
      items: z.array(aIChatBotSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelAIChatLogConnectionSchema: z.ZodSchema<ModelAIChatLogConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelAIChatLogConnection"),
      items: z.array(aIChatLogSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelReportConnectionSchema: z.ZodSchema<ModelReportConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelReportConnection"),
      items: z.array(reportSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelLoyaltyProgramConnectionSchema: z.ZodSchema<ModelLoyaltyProgramConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelLoyaltyProgramConnection"),
      items: z.array(loyaltyProgramSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelRewardConnectionSchema: z.ZodSchema<ModelRewardConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelRewardConnection"),
      items: z.array(rewardSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelPaymentMethodConnectionSchema: z.ZodSchema<ModelPaymentMethodConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelPaymentMethodConnection"),
      items: z.array(paymentMethodSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelVerificationConnectionSchema: z.ZodSchema<ModelVerificationConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelVerificationConnection"),
      items: z.array(verificationSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const bookingSchema: z.ZodSchema<Booking> = z.lazy(() =>
  z.object({
    __typename: z.literal("Booking"),
    id: z.string(),
    date: z.string(),
    startTime: z.string(),
    endTime: z.string(),
    status: bookingStatusSchema.optional().nullable(),
    service: serviceSchema.optional().nullable(),
    provider: providerSchema.optional().nullable(),
    user: userSchema.optional().nullable(),
    location: z.string().optional().nullable(),
    notes: z.string().optional().nullable(),
    price: z.number(),
    isInstantBooking: z.boolean().optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceBookingsId: z.string().optional().nullable(),
    providerProviderBookingsId: z.string().optional().nullable(),
    userBookingsId: z.string().optional().nullable(),
  }),
);

export const messageThreadSchema: z.ZodSchema<MessageThread> = z.lazy(() =>
  z.object({
    __typename: z.literal("MessageThread"),
    id: z.string(),
    provider: providerSchema.optional().nullable(),
    user: userSchema.optional().nullable(),
    messages: modelMessageContentConnectionSchema.optional().nullable(),
    lastMessageDate: z.string().optional().nullable(),
    lastMessageContent: z.string().optional().nullable(),
    status: messageStatusSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    providerProviderMessagesId: z.string().optional().nullable(),
    userMessagesId: z.string().optional().nullable(),
  }),
);

export const modelMessageContentConnectionSchema: z.ZodSchema<ModelMessageContentConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelMessageContentConnection"),
      items: z.array(messageContentSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const messageContentSchema: z.ZodSchema<MessageContent> = z.lazy(() =>
  z.object({
    __typename: z.literal("MessageContent"),
    id: z.string(),
    thread: messageThreadSchema.optional().nullable(),
    sender: z.string().optional().nullable(),
    content: z.string(),
    timestamp: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    messageThreadMessagesId: z.string().optional().nullable(),
  }),
);

export const transactionSchema: z.ZodSchema<Transaction> = z.lazy(() =>
  z.object({
    __typename: z.literal("Transaction"),
    id: z.string(),
    wallet: walletSchema.optional().nullable(),
    amount: z.number(),
    type: transactionTypeSchema.optional().nullable(),
    description: z.string().optional().nullable(),
    date: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    walletTransactionsId: z.string().optional().nullable(),
    userTransactionsId: z.string().optional().nullable(),
  }),
);

export const aIChatBotSchema: z.ZodSchema<AIChatBot> = z.lazy(() =>
  z.object({
    __typename: z.literal("AIChatBot"),
    id: z.string(),
    name: z.string(),
    version: z.string(),
    diagnostics: modelAIDiagnosticsConnectionSchema.optional().nullable(),
    chatLogs: modelAIChatLogConnectionSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    userAiChatBotsId: z.string().optional().nullable(),
  }),
);

export const aIDiagnosticsSchema: z.ZodSchema<AIDiagnostics> = z.lazy(() =>
  z.object({
    __typename: z.literal("AIDiagnostics"),
    id: z.string(),
    aiChatBot: aIChatBotSchema.optional().nullable(),
    diagnosticData: z.string(),
    date: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    aIChatBotDiagnosticsId: z.string().optional().nullable(),
    serviceAiDiagnosticsId: z.string().optional().nullable(),
  }),
);

export const aIChatLogSchema: z.ZodSchema<AIChatLog> = z.lazy(() =>
  z.object({
    __typename: z.literal("AIChatLog"),
    id: z.string(),
    user: userSchema.optional().nullable(),
    aiChatBot: aIChatBotSchema.optional().nullable(),
    message: z.string(),
    response: z.string(),
    date: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    aIChatBotChatLogsId: z.string().optional().nullable(),
    userAiChatLogsId: z.string().optional().nullable(),
  }),
);

export const jobTrackingSchema: z.ZodSchema<JobTracking> = z.lazy(() =>
  z.object({
    __typename: z.literal("JobTracking"),
    id: z.string(),
    user: userSchema.optional().nullable(),
    provider: providerSchema.optional().nullable(),
    service: serviceSchema.optional().nullable(),
    status: jobStatusSchema.optional().nullable(),
    startDate: z.string(),
    endDate: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceJobTrackingsId: z.string().optional().nullable(),
    providerJobTrackingId: z.string().optional().nullable(),
    userJobTrackingsId: z.string().optional().nullable(),
  }),
);

export const reportSchema: z.ZodSchema<Report> = z.lazy(() =>
  z.object({
    __typename: z.literal("Report"),
    id: z.string(),
    reporter: userSchema.optional().nullable(),
    reportedEntity: z.string(),
    description: z.string(),
    dateReported: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    userReportsId: z.string().optional().nullable(),
  }),
);

export const loyaltyProgramSchema: z.ZodSchema<LoyaltyProgram> = z.lazy(() =>
  z.object({
    __typename: z.literal("LoyaltyProgram"),
    id: z.string(),
    user: userSchema.optional().nullable(),
    points: z.number(),
    rewards: modelRewardConnectionSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    userLoyaltyProgramsId: z.string().optional().nullable(),
  }),
);

export const rewardSchema: z.ZodSchema<Reward> = z.lazy(() =>
  z.object({
    __typename: z.literal("Reward"),
    id: z.string(),
    rewardName: z.string(),
    description: z.string(),
    value: z.number(),
    referrals: modelReferralConnectionSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    loyaltyProgramRewardsId: z.string().optional().nullable(),
    userRewardsId: z.string().optional().nullable(),
  }),
);

export const referralSchema: z.ZodSchema<Referral> = z.lazy(() =>
  z.object({
    __typename: z.literal("Referral"),
    id: z.string(),
    referrer: userSchema.optional().nullable(),
    referred: userSchema.optional().nullable(),
    dateReferred: z.string(),
    reward: rewardSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    rewardReferralsId: z.string().optional().nullable(),
    serviceReferralsId: z.string().optional().nullable(),
    providerProviderReferralsId: z.string().optional().nullable(),
    userReferralsId: z.string().optional().nullable(),
  }),
);

export const contractSchema: z.ZodSchema<Contract> = z.lazy(() =>
  z.object({
    __typename: z.literal("Contract"),
    id: z.string(),
    user: userSchema.optional().nullable(),
    provider: providerSchema.optional().nullable(),
    service: serviceSchema.optional().nullable(),
    startDate: z.string(),
    endDate: z.string(),
    terms: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceContractsId: z.string().optional().nullable(),
    providerProviderContractsId: z.string().optional().nullable(),
    userContractsId: z.string().optional().nullable(),
  }),
);

export const invoiceSchema: z.ZodSchema<Invoice> = z.lazy(() =>
  z.object({
    __typename: z.literal("Invoice"),
    id: z.string(),
    user: userSchema.optional().nullable(),
    provider: providerSchema.optional().nullable(),
    amount: z.number(),
    dateIssued: z.string(),
    dueDate: z.string(),
    status: invoiceStatusSchema.optional().nullable(),
    services: modelServiceConnectionSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    providerProviderInvoicesId: z.string().optional().nullable(),
    userInvoicesId: z.string().optional().nullable(),
  }),
);

export const paymentMethodSchema: z.ZodSchema<PaymentMethod> = z.lazy(() =>
  z.object({
    __typename: z.literal("PaymentMethod"),
    id: z.string(),
    user: userSchema.optional().nullable(),
    cardNumber: z.string(),
    expiryDate: z.string(),
    cardType: cardTypeSchema.optional().nullable(),
    stripeCustomerId: z.string().optional().nullable(),
    stripeCardId: z.string().optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    userPaymentMethodsId: z.string().optional().nullable(),
  }),
);

export const tipSchema: z.ZodSchema<Tip> = z.lazy(() =>
  z.object({
    __typename: z.literal("Tip"),
    id: z.string(),
    user: userSchema.optional().nullable(),
    provider: providerSchema.optional().nullable(),
    amount: z.number(),
    date: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    providerProviderTipsId: z.string().optional().nullable(),
    userTipsId: z.string().optional().nullable(),
  }),
);

export const userHistorySchema: z.ZodSchema<UserHistory> = z.lazy(() =>
  z.object({
    __typename: z.literal("UserHistory"),
    id: z.string(),
    user: userSchema.optional().nullable(),
    action: z.string(),
    date: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceUserHistoriesId: z.string().optional().nullable(),
    userUserHistoriesId: z.string().optional().nullable(),
  }),
);

export const favoriteProviderSchema: z.ZodSchema<FavoriteProvider> = z.lazy(
  () =>
    z.object({
      __typename: z.literal("FavoriteProvider"),
      id: z.string(),
      user: userSchema.optional().nullable(),
      provider: providerSchema.optional().nullable(),
      dateAdded: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceFavoriteProvidersId: z.string().optional().nullable(),
      providerFavoriteProvidersId: z.string().optional().nullable(),
      userFavoriteProvidersId: z.string().optional().nullable(),
    }),
);

export const expenseSchema: z.ZodSchema<Expense> = z.lazy(() =>
  z.object({
    __typename: z.literal("Expense"),
    id: z.string(),
    provider: providerSchema.optional().nullable(),
    amount: z.number(),
    description: z.string(),
    date: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceExpensesId: z.string().optional().nullable(),
    providerExpensesId: z.string().optional().nullable(),
    userExpensesId: z.string().optional().nullable(),
  }),
);

export const customizationSchema: z.ZodSchema<Customization> = z.lazy(() =>
  z.object({
    __typename: z.literal("Customization"),
    id: z.string(),
    user: userSchema.optional().nullable(),
    customizationType: z.string(),
    customizationValue: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceCustomizationsId: z.string().optional().nullable(),
    userCustomizationsId: z.string().optional().nullable(),
  }),
);

export const serviceReviewSchema: z.ZodSchema<ServiceReview> = z.lazy(() =>
  z.object({
    __typename: z.literal("ServiceReview"),
    id: z.string(),
    service: serviceSchema.optional().nullable(),
    user: userSchema.optional().nullable(),
    rating: z.number(),
    comment: z.string(),
    date: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceServiceReviewsId: z.string().optional().nullable(),
    userServiceReviewsId: z.string().optional().nullable(),
  }),
);

export const userNotificationSchema: z.ZodSchema<UserNotification> = z.lazy(
  () =>
    z.object({
      __typename: z.literal("UserNotification"),
      id: z.string(),
      user: userSchema.optional().nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceUserNotificationsId: z.string().optional().nullable(),
      userUserNotificationsId: z.string().optional().nullable(),
    }),
);

export const userBookmarkSchema: z.ZodSchema<UserBookmark> = z.lazy(() =>
  z.object({
    __typename: z.literal("UserBookmark"),
    id: z.string(),
    user: userSchema.optional().nullable(),
    service: serviceSchema.optional().nullable(),
    dateBookmarked: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceUserBookmarksId: z.string().optional().nullable(),
    userUserBookmarksId: z.string().optional().nullable(),
  }),
);

export const userInvoiceSchema: z.ZodSchema<UserInvoice> = z.lazy(() =>
  z.object({
    __typename: z.literal("UserInvoice"),
    id: z.string(),
    user: userSchema.optional().nullable(),
    amount: z.number(),
    dateIssued: z.string(),
    dueDate: z.string(),
    status: invoiceStatusSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceUserInvoicesId: z.string().optional().nullable(),
    userUserInvoicesId: z.string().optional().nullable(),
  }),
);

export const userReportSchema: z.ZodSchema<UserReport> = z.lazy(() =>
  z.object({
    __typename: z.literal("UserReport"),
    id: z.string(),
    user: userSchema.optional().nullable(),
    description: z.string(),
    dateReported: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceUserReportsId: z.string().optional().nullable(),
    userUserReportsId: z.string().optional().nullable(),
  }),
);

export const providerBookmarkSchema: z.ZodSchema<ProviderBookmark> = z.lazy(
  () =>
    z.object({
      __typename: z.literal("ProviderBookmark"),
      id: z.string(),
      provider: providerSchema.optional().nullable(),
      user: userSchema.optional().nullable(),
      dateBookmarked: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderBookmarksId: z.string().optional().nullable(),
      providerProviderBookmarksId: z.string().optional().nullable(),
      userProviderBookmarksId: z.string().optional().nullable(),
    }),
);

export const userPreferenceSchema: z.ZodSchema<UserPreference> = z.lazy(() =>
  z.object({
    __typename: z.literal("UserPreference"),
    id: z.string(),
    user: userSchema.optional().nullable(),
    preferenceType: z.string(),
    preferenceValue: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceUserPreferencesId: z.string().optional().nullable(),
    userUserPreferenceId: z.string().optional().nullable(),
  }),
);

export const verificationSchema: z.ZodSchema<Verification> = z.lazy(() =>
  z.object({
    __typename: z.literal("Verification"),
    id: z.string(),
    user: userSchema.optional().nullable(),
    verificationCode: z.string(),
    dateSent: z.string(),
    status: verificationStatusSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    userVerificationsId: z.string().optional().nullable(),
  }),
);

export const certificationSchema: z.ZodSchema<Certification> = z.lazy(() =>
  z.object({
    __typename: z.literal("Certification"),
    id: z.string(),
    certificationName: z.string(),
    issuedBy: z.string().optional().nullable(),
    validFrom: z.string().optional().nullable(),
    validUntil: z.string().optional().nullable(),
    Provider: providerSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    providerCertificationsId: z.string().optional().nullable(),
  }),
);

export const qualificationSchema: z.ZodSchema<Qualification> = z.lazy(() =>
  z.object({
    __typename: z.literal("Qualification"),
    id: z.string(),
    qualificationName: z.string(),
    institution: z.string().optional().nullable(),
    yearObtained: z.number().optional().nullable(),
    Provider: providerSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    providerQualificationsId: z.string().optional().nullable(),
  }),
);

export const specializationSchema: z.ZodSchema<Specialization> = z.lazy(() =>
  z.object({
    __typename: z.literal("Specialization"),
    id: z.string(),
    specializationName: z.string(),
    description: z.string().optional().nullable(),
    Provider: providerSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    providerSpecializationsId: z.string().optional().nullable(),
  }),
);

export const providerNotificationSchema: z.ZodSchema<ProviderNotification> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ProviderNotification"),
      id: z.string(),
      provider: providerSchema.optional().nullable(),
      content: z.string(),
      dateSent: z.string(),
      status: notificationStatusSchema.optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderNotificationsId: z.string().optional().nullable(),
      providerProviderNotificationsId: z.string().optional().nullable(),
    }),
  );

export const providerReportSchema: z.ZodSchema<ProviderReport> = z.lazy(() =>
  z.object({
    __typename: z.literal("ProviderReport"),
    id: z.string(),
    provider: providerSchema.optional().nullable(),
    description: z.string(),
    dateReported: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceProviderReportsId: z.string().optional().nullable(),
    providerProviderReportsId: z.string().optional().nullable(),
  }),
);

export const providerAvailabilitySchema: z.ZodSchema<ProviderAvailability> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ProviderAvailability"),
      id: z.string(),
      provider: providerSchema.optional().nullable(),
      startDate: z.string(),
      endDate: z.string(),
      isScheduled: z.boolean().optional().nullable(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderAvailabilitiesId: z.string().optional().nullable(),
      providerProviderAvailabilityId: z.string().optional().nullable(),
    }),
  );

export const providerCertificationSchema: z.ZodSchema<ProviderCertification> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ProviderCertification"),
      id: z.string(),
      provider: providerSchema.optional().nullable(),
      certificationName: z.string(),
      issuedBy: z.string(),
      validFrom: z.string(),
      validUntil: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceProviderCertificationsId: z.string().optional().nullable(),
      providerProviderCertificationId: z.string().optional().nullable(),
    }),
  );

export const providerAwardSchema: z.ZodSchema<ProviderAward> = z.lazy(() =>
  z.object({
    __typename: z.literal("ProviderAward"),
    id: z.string(),
    provider: providerSchema.optional().nullable(),
    awardName: z.string(),
    awardedBy: z.string(),
    dateAwarded: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceProviderAwardsId: z.string().optional().nullable(),
    providerProviderAwardsId: z.string().optional().nullable(),
  }),
);

export const mainCategorySchema: z.ZodSchema<MainCategory> = z.lazy(() =>
  z.object({
    __typename: z.literal("MainCategory"),
    id: z.string(),
    name: z.string(),
    descrption: z.string().optional().nullable(),
    SubCategories: modelSubCategoryConnectionSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
  }),
);

export const modelSubCategoryConnectionSchema: z.ZodSchema<ModelSubCategoryConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelSubCategoryConnection"),
      items: z.array(subCategorySchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const servicePromotionSchema: z.ZodSchema<ServicePromotion> = z.lazy(
  () =>
    z.object({
      __typename: z.literal("ServicePromotion"),
      id: z.string(),
      service: serviceSchema.optional().nullable(),
      description: z.string(),
      startDate: z.string(),
      endDate: z.string(),
      discountPercentage: z.number(),
      createdAt: z.string(),
      updatedAt: z.string(),
      _version: z.number(),
      _deleted: z.boolean().optional().nullable(),
      _lastChangedAt: z.number(),
      serviceServicePromotionsId: z.string().optional().nullable(),
    }),
);

export const serviceDiscountSchema: z.ZodSchema<ServiceDiscount> = z.lazy(() =>
  z.object({
    __typename: z.literal("ServiceDiscount"),
    id: z.string(),
    service: serviceSchema.optional().nullable(),
    discountPercentage: z.number(),
    startDate: z.string(),
    endDate: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceServiceDiscountsId: z.string().optional().nullable(),
  }),
);

export const serviceVideoSchema: z.ZodSchema<ServiceVideo> = z.lazy(() =>
  z.object({
    __typename: z.literal("ServiceVideo"),
    id: z.string(),
    service: serviceSchema.optional().nullable(),
    videoURL: z.string(),
    description: z.string().optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceServiceVideosId: z.string().optional().nullable(),
  }),
);

export const serviceImageSchema: z.ZodSchema<ServiceImage> = z.lazy(() =>
  z.object({
    __typename: z.literal("ServiceImage"),
    id: z.string(),
    service: serviceSchema.optional().nullable(),
    imageURL: z.string(),
    description: z.string().optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
    serviceServiceImagesId: z.string().optional().nullable(),
  }),
);

export const nicheServiceSchema: z.ZodSchema<NicheService> = z.lazy(() =>
  z.object({
    __typename: z.literal("NicheService"),
    id: z.string(),
    serviceName: z.string(),
    description: z.string(),
    providers: modelProviderConnectionSchema.optional().nullable(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
  }),
);

export const modelProviderConnectionSchema: z.ZodSchema<ModelProviderConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelProviderConnection"),
      items: z.array(providerSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const servicePackageSchema: z.ZodSchema<ServicePackage> = z.lazy(() =>
  z.object({
    __typename: z.literal("ServicePackage"),
    id: z.string(),
    packageName: z.string(),
    services: modelServiceConnectionSchema.optional().nullable(),
    discount: z.number(),
    createdAt: z.string(),
    updatedAt: z.string(),
    _version: z.number(),
    _deleted: z.boolean().optional().nullable(),
    _lastChangedAt: z.number(),
  }),
);

export const modelTasksConnectionSchema: z.ZodSchema<ModelTasksConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelTasksConnection"),
      items: z.array(tasksSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelNicheServiceConnectionSchema: z.ZodSchema<ModelNicheServiceConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelNicheServiceConnection"),
      items: z.array(nicheServiceSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelServicePackageConnectionSchema: z.ZodSchema<ModelServicePackageConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelServicePackageConnection"),
      items: z.array(servicePackageSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelMainCategoryConnectionSchema: z.ZodSchema<ModelMainCategoryConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelMainCategoryConnection"),
      items: z.array(mainCategorySchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelWalletConnectionSchema: z.ZodSchema<ModelWalletConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelWalletConnection"),
      items: z.array(walletSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelReviewResponseConnectionSchema: z.ZodSchema<ModelReviewResponseConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelReviewResponseConnection"),
      items: z.array(reviewResponseSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );

export const modelUserConnectionSchema: z.ZodSchema<ModelUserConnection> =
  z.lazy(() =>
    z.object({
      __typename: z.literal("ModelUserConnection"),
      items: z.array(userSchema.nullable()),
      nextToken: z.string().optional().nullable(),
      startedAt: z.number().optional().nullable(),
    }),
  );
